{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4405f49f",
   "metadata": {},
   "source": [
    "For this project, I wanted to look at baseball data and see how we can use it to predict different things such as a players salary and whether or not they make it into the baseball hall of fame. Analyzing this data could be useful to organizations to see how much a player is worth based on a model and then compare this to what they are actually getting paid. It can also be used to predict performance by modeling how the players past performance could lead to future acheivements. To accomplish this, I downloaded the baseball databank from Kaggle (https://www.kaggle.com/datasets/open-source-sports/baseball-databank). This is sourced from Sean Lahmans baseball databank. Some of the data goes back to 1871. One of the issues I can see occuring with this is that there are two common eras in baseball know as the live ball era and the dead ball era with the split coming in the 1920s. The game has fundamentally changed since 1871 so comparing players from the begining of the data set to players in more recent years is not really feasible. To compensate for this, we could split the analysis into multiple eras, potentially using the split between the live ball and dead ball eras or spliting the data even further. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "026e5766",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c32b3361",
   "metadata": {},
   "outputs": [],
   "source": [
    "batting = pd.read_csv(\"/Users/jacksonlyons/Documents/Coursework/Winter '23/DSC 550/Final Project/Data/Batting.csv\")\n",
    "fielding = pd.read_csv(\"/Users/jacksonlyons/Documents/Coursework/Winter '23/DSC 550/Final Project/Data/Fielding.csv\")\n",
    "pitching = pd.read_csv(\"/Users/jacksonlyons/Documents/Coursework/Winter '23/DSC 550/Final Project/Data/Pitching.csv\")\n",
    "salaries = pd.read_csv(\"/Users/jacksonlyons/Documents/Coursework/Winter '23/DSC 550/Final Project/Data/Salaries.csv\")\n",
    "all_star = pd.read_csv(\"/Users/jacksonlyons/Documents/Coursework/Winter '23/DSC 550/Final Project/Data/AllstarFull.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "04ddb7b9",
   "metadata": {},
   "source": [
    "Batting is a common metric that is used when evaluating a players effectiveness so this is where we will begin our analysis. Some of the most common statistics used are the number of hits (H) a player has and the runs batted in (RBI). This gives a good picture of how often a player gets on base and how often they generate runs for the team. There are other metrics such as on base percentage (OBP) that we could evaluate as well."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5936b1d5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>playerID</th>\n",
       "      <th>yearID</th>\n",
       "      <th>stint</th>\n",
       "      <th>teamID</th>\n",
       "      <th>lgID</th>\n",
       "      <th>G</th>\n",
       "      <th>AB</th>\n",
       "      <th>R</th>\n",
       "      <th>H</th>\n",
       "      <th>2B</th>\n",
       "      <th>...</th>\n",
       "      <th>RBI</th>\n",
       "      <th>SB</th>\n",
       "      <th>CS</th>\n",
       "      <th>BB</th>\n",
       "      <th>SO</th>\n",
       "      <th>IBB</th>\n",
       "      <th>HBP</th>\n",
       "      <th>SH</th>\n",
       "      <th>SF</th>\n",
       "      <th>GIDP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>abercda01</td>\n",
       "      <td>1871</td>\n",
       "      <td>1</td>\n",
       "      <td>TRO</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>addybo01</td>\n",
       "      <td>1871</td>\n",
       "      <td>1</td>\n",
       "      <td>RC1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>25</td>\n",
       "      <td>118.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>...</td>\n",
       "      <td>13.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>allisar01</td>\n",
       "      <td>1871</td>\n",
       "      <td>1</td>\n",
       "      <td>CL1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>29</td>\n",
       "      <td>137.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>...</td>\n",
       "      <td>19.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>allisdo01</td>\n",
       "      <td>1871</td>\n",
       "      <td>1</td>\n",
       "      <td>WS3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>27</td>\n",
       "      <td>133.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>...</td>\n",
       "      <td>27.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ansonca01</td>\n",
       "      <td>1871</td>\n",
       "      <td>1</td>\n",
       "      <td>RC1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>25</td>\n",
       "      <td>120.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>...</td>\n",
       "      <td>16.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    playerID  yearID  stint teamID lgID   G     AB     R     H    2B  ...  \\\n",
       "0  abercda01    1871      1    TRO  NaN   1    4.0   0.0   0.0   0.0  ...   \n",
       "1   addybo01    1871      1    RC1  NaN  25  118.0  30.0  32.0   6.0  ...   \n",
       "2  allisar01    1871      1    CL1  NaN  29  137.0  28.0  40.0   4.0  ...   \n",
       "3  allisdo01    1871      1    WS3  NaN  27  133.0  28.0  44.0  10.0  ...   \n",
       "4  ansonca01    1871      1    RC1  NaN  25  120.0  29.0  39.0  11.0  ...   \n",
       "\n",
       "    RBI   SB   CS   BB   SO  IBB  HBP  SH  SF  GIDP  \n",
       "0   0.0  0.0  0.0  0.0  0.0  NaN  NaN NaN NaN   NaN  \n",
       "1  13.0  8.0  1.0  4.0  0.0  NaN  NaN NaN NaN   NaN  \n",
       "2  19.0  3.0  1.0  2.0  5.0  NaN  NaN NaN NaN   NaN  \n",
       "3  27.0  1.0  1.0  0.0  2.0  NaN  NaN NaN NaN   NaN  \n",
       "4  16.0  6.0  2.0  2.0  1.0  NaN  NaN NaN NaN   NaN  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batting.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ecebd8f9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(101332, 22)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batting.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f1bd9c32",
   "metadata": {},
   "source": [
    "We can look at all the different columns that are included with our dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9e094d56",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['playerID', 'yearID', 'stint', 'teamID', 'lgID', 'G', 'AB', 'R', 'H',\n",
       "       '2B', '3B', 'HR', 'RBI', 'SB', 'CS', 'BB', 'SO', 'IBB', 'HBP', 'SH',\n",
       "       'SF', 'GIDP'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batting.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2186a056",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/7n/5fnxz4s548x3pvrkkldffwjm0000gn/T/ipykernel_21163/2322887558.py:1: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n",
      "  corr = batting.corr()\n"
     ]
    }
   ],
   "source": [
    "corr = batting.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8bbbb97f",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(corr, \n",
    "            xticklabels=corr.columns.values,\n",
    "            yticklabels=corr.columns.values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ab206972",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "97cbf398",
   "metadata": {},
   "source": [
    "Lets first plot a histogram of the number of hits a player had (H) in a season."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "801c0a9b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(batting['H'], bins = 50)\n",
    "plt.title(\"Histogram of Hits\")\n",
    "plt.xlabel(\"Number of Hits\")\n",
    "plt.ylabel(\"Count\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ece2cbcb",
   "metadata": {},
   "source": [
    "We can see there is a large number of players that had less than 50 hits in a seson with a very large right skew to our data. We can further investigagte these players less than 50 hits."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a74c98c5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lessthan_50H = batting[batting['H'] <= 50]\n",
    "plt.hist(lessthan_50H['H'], bins = 50)\n",
    "plt.title(\"Histogram of Hits\")\n",
    "plt.xlabel(\"Number of Hits\")\n",
    "plt.ylabel(\"Count\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3775baf9",
   "metadata": {},
   "source": [
    "In our new plot we can see that there is a very large number of players who recorded 0 hits in a season. This could be an issue with further analysis. We may consider removing some of these issues especially with players that had very few at bats (AB) in a season."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "352a6fe3",
   "metadata": {},
   "source": [
    "Next, we will plot the Runs Batted In (RBI) per season."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "38fe50f8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(batting['RBI'], bins = 50)\n",
    "plt.title(\"Histogram of RBIs\")\n",
    "plt.xlabel(\"Number of RBIs\")\n",
    "plt.ylabel(\"Count\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a053a0a5",
   "metadata": {},
   "source": [
    "Again we can see a very large concentration of our data at 0 indicating a lot of players who had no RBIs in a season. We could consider doing something similar that we talked about with hits."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ec0114da",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>playerID</th>\n",
       "      <th>yearID</th>\n",
       "      <th>stint</th>\n",
       "      <th>teamID</th>\n",
       "      <th>lgID</th>\n",
       "      <th>POS</th>\n",
       "      <th>G</th>\n",
       "      <th>GS</th>\n",
       "      <th>InnOuts</th>\n",
       "      <th>PO</th>\n",
       "      <th>A</th>\n",
       "      <th>E</th>\n",
       "      <th>DP</th>\n",
       "      <th>PB</th>\n",
       "      <th>WP</th>\n",
       "      <th>SB</th>\n",
       "      <th>CS</th>\n",
       "      <th>ZR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>abercda01</td>\n",
       "      <td>1871</td>\n",
       "      <td>1</td>\n",
       "      <td>TRO</td>\n",
       "      <td>NaN</td>\n",
       "      <td>SS</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>addybo01</td>\n",
       "      <td>1871</td>\n",
       "      <td>1</td>\n",
       "      <td>RC1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2B</td>\n",
       "      <td>22</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>67.0</td>\n",
       "      <td>72.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>addybo01</td>\n",
       "      <td>1871</td>\n",
       "      <td>1</td>\n",
       "      <td>RC1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>SS</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>allisar01</td>\n",
       "      <td>1871</td>\n",
       "      <td>1</td>\n",
       "      <td>CL1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2B</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>allisar01</td>\n",
       "      <td>1871</td>\n",
       "      <td>1</td>\n",
       "      <td>CL1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>OF</td>\n",
       "      <td>29</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>51.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    playerID  yearID  stint teamID lgID POS   G  GS  InnOuts    PO     A  \\\n",
       "0  abercda01    1871      1    TRO  NaN  SS   1 NaN      NaN   1.0   3.0   \n",
       "1   addybo01    1871      1    RC1  NaN  2B  22 NaN      NaN  67.0  72.0   \n",
       "2   addybo01    1871      1    RC1  NaN  SS   3 NaN      NaN   8.0  14.0   \n",
       "3  allisar01    1871      1    CL1  NaN  2B   2 NaN      NaN   1.0   4.0   \n",
       "4  allisar01    1871      1    CL1  NaN  OF  29 NaN      NaN  51.0   3.0   \n",
       "\n",
       "      E   DP  PB  WP  SB  CS  ZR  \n",
       "0   2.0  0.0 NaN NaN NaN NaN NaN  \n",
       "1  42.0  5.0 NaN NaN NaN NaN NaN  \n",
       "2   7.0  0.0 NaN NaN NaN NaN NaN  \n",
       "3   0.0  0.0 NaN NaN NaN NaN NaN  \n",
       "4   7.0  1.0 NaN NaN NaN NaN NaN  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fielding.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "487b5ce5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['playerID', 'yearID', 'stint', 'teamID', 'lgID', 'POS', 'G', 'GS',\n",
       "       'InnOuts', 'PO', 'A', 'E', 'DP', 'PB', 'WP', 'SB', 'CS', 'ZR'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fielding.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71a144d6",
   "metadata": {},
   "source": [
    "When evaluating field players, batting and fielding data is typically the metrics that are used. When it comes to pitchers, however, these statistics are usually not used. Most pitchers are evaluated on data such as earned run average (ERA), Wins (W) and Losses (L), Walks (W), Hits (H), and more."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "c651b441",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>playerID</th>\n",
       "      <th>yearID</th>\n",
       "      <th>stint</th>\n",
       "      <th>teamID</th>\n",
       "      <th>lgID</th>\n",
       "      <th>W</th>\n",
       "      <th>L</th>\n",
       "      <th>G</th>\n",
       "      <th>GS</th>\n",
       "      <th>CG</th>\n",
       "      <th>...</th>\n",
       "      <th>IBB</th>\n",
       "      <th>WP</th>\n",
       "      <th>HBP</th>\n",
       "      <th>BK</th>\n",
       "      <th>BFP</th>\n",
       "      <th>GF</th>\n",
       "      <th>R</th>\n",
       "      <th>SH</th>\n",
       "      <th>SF</th>\n",
       "      <th>GIDP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>bechtge01</td>\n",
       "      <td>1871</td>\n",
       "      <td>1</td>\n",
       "      <td>PH1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>42</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>brainas01</td>\n",
       "      <td>1871</td>\n",
       "      <td>1</td>\n",
       "      <td>WS3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12</td>\n",
       "      <td>15</td>\n",
       "      <td>30</td>\n",
       "      <td>30</td>\n",
       "      <td>30</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>292</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>fergubo01</td>\n",
       "      <td>1871</td>\n",
       "      <td>1</td>\n",
       "      <td>NY2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>fishech01</td>\n",
       "      <td>1871</td>\n",
       "      <td>1</td>\n",
       "      <td>RC1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4</td>\n",
       "      <td>16</td>\n",
       "      <td>24</td>\n",
       "      <td>24</td>\n",
       "      <td>22</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>257</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>fleetfr01</td>\n",
       "      <td>1871</td>\n",
       "      <td>1</td>\n",
       "      <td>NY2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>21</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 30 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    playerID  yearID  stint teamID lgID   W   L   G  GS  CG  ...  IBB  WP  \\\n",
       "0  bechtge01    1871      1    PH1  NaN   1   2   3   3   2  ...  NaN NaN   \n",
       "1  brainas01    1871      1    WS3  NaN  12  15  30  30  30  ...  NaN NaN   \n",
       "2  fergubo01    1871      1    NY2  NaN   0   0   1   0   0  ...  NaN NaN   \n",
       "3  fishech01    1871      1    RC1  NaN   4  16  24  24  22  ...  NaN NaN   \n",
       "4  fleetfr01    1871      1    NY2  NaN   0   1   1   1   1  ...  NaN NaN   \n",
       "\n",
       "   HBP  BK  BFP  GF    R  SH  SF  GIDP  \n",
       "0  NaN   0  NaN NaN   42 NaN NaN   NaN  \n",
       "1  NaN   0  NaN NaN  292 NaN NaN   NaN  \n",
       "2  NaN   0  NaN NaN    9 NaN NaN   NaN  \n",
       "3  NaN   0  NaN NaN  257 NaN NaN   NaN  \n",
       "4  NaN   0  NaN NaN   21 NaN NaN   NaN  \n",
       "\n",
       "[5 rows x 30 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pitching.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "87164d0b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['playerID', 'yearID', 'stint', 'teamID', 'lgID', 'W', 'L', 'G', 'GS',\n",
       "       'CG', 'SHO', 'SV', 'IPouts', 'H', 'ER', 'HR', 'BB', 'SO', 'BAOpp',\n",
       "       'ERA', 'IBB', 'WP', 'HBP', 'BK', 'BFP', 'GF', 'R', 'SH', 'SF', 'GIDP'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pitching.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c7894ad0",
   "metadata": {},
   "source": [
    "One of the most important metrics used to evaluate pitches is the Earned Run Average (ERA). ERA represents the number of earned runs a pitcher allows per nine innings. The formula for calculating this is 9 * Earned Runs / Innings Pitched."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ef21d033",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(pitching['ERA'], bins = 50)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ee626fc7",
   "metadata": {},
   "source": [
    "In our histogram of ERAs, we can see that we have some extreme outliers which is causing our plot to be unreadable. Looking at the plot, we can see that most eras are below 25 so we will subset our dataframe to only include rows where the era is less than 25."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "dd8b865e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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JWnMmDFh1/jWrVs7cIVdQ3l5uWbMmKGKigqVlZXpiy++UG5urj777DNvhuv6yl3OeZaidE27uGzf+ta33GnTpoUdu+WWW9yFCxdGaUVd02OPPebedttt0V5GlybJ3bx5s/f12bNnXb/f7y5ZssQ79r///c91HMd97rnnorDCruPCc+26rjtx4kT3e9/7XlTW05XV1dW5ktzy8nLXdbmur5YLz7PrRu+aZifmMrW0tKiqqkq5ublhx3Nzc7Vjx44orarr+vDDDxUIBJSWlqaHHnpIH330UbSX1KUdPHhQtbW1Ydd3fHy8hg8fzvV9lfz9739XSkqKvv71r2vy5Mmqq6uL9pLMC4VCkqTk5GRJXNdXy4Xn+bxoXNNEzGX65JNPdObMmVb/+KTP52v1j1TiymRlZenFF1/U66+/rjVr1qi2tlY5OTn69NNPo720Luv8Ncz13THGjh2rDRs26I033tBTTz2lyspKfec731Fzc3O0l2aW67qaM2eO7r77bmVkZEjiur4avuw8S9G7pjv1PzvQGcXExIR97bpuq2O4MmPHjvX+85AhQ5Sdna2vfe1rWrdunebMmRPFlXV9XN8dY8KECd5/zsjI0NChQzVgwABt2bJFDzzwQBRXZtfMmTP17rvvavv27a3u47puP191nqN1TbMTc5n69Omj2NjYVvVeV1fXqvLRvnr27KkhQ4boww8/jPZSuqzz7/7i+o6Ofv36acCAAVzjbTRr1iy99tprevPNN3XjjTd6x7mu29dXnecv01HXNBFzmbp3767MzEyVlZWFHS8rK1NOTk6UVnVtaG5u1v79+9WvX79oL6XLSktLk9/vD7u+W1paVF5ezvXdAT799FPV1NRwjUfIdV3NnDlTr7zyit544w2lpaWF3c913T4udZ6/TEdd0/w5KQJz5sxRYWGhhg4dquzsbK1evVqHDx/WtGnTor20LmXevHm677771L9/f9XV1enXv/61GhoaNHHixGgvzbRTp07p3//+t/f1wYMHVV1dreTkZPXv31/BYFBFRUVKT09Xenq6ioqK1KNHDxUUFERx1TZd7FwnJydr8eLFevDBB9WvXz8dOnRIP//5z9WnTx99//vfj+Kq7ZkxY4Y2btyoV199VYmJid6Oi+M4SkhIUExMDNd1O7jUeT516lT0rukOfz+Ucb///e/dAQMGuN27d3fvuOOOsLeYoX1MmDDB7devn9utWzc3EAi4DzzwgLtv375oL8u8N99805XU6jZx4kTXdc+9HfWxxx5z/X6/Gx8f795zzz3unj17ortooy52rj///HM3NzfX7du3r9utWze3f//+7sSJE93Dhw9He9nmfNk5luS+8MIL3gzX9ZW71HmO5jUd8/8LBAAAMIXXxAAAAJOIGAAAYBIRAwAATCJiAACASUQMAAAwiYgBAAAmETEAAMAkIgYAAJhExAAAAJOIGAAAYBIRAwAATCJiAACASf8Hb6PckotHlcQAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "era_lessthan_25 = pitching[pitching['ERA'] <= 25]\n",
    "plt.hist(era_lessthan_25['ERA'], bins = 30)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a9394ef9",
   "metadata": {},
   "source": [
    "Again out data is still very right skewed so we will subset our data again to only include ERAs less than or equal to 10 to look get a better look at the bulk of our data points."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "eaaf1aab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "era_lessthan_10 = pitching[pitching['ERA'] <= 10]\n",
    "plt.hist(era_lessthan_10['ERA'], bins = 30)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15b2c8d3",
   "metadata": {},
   "source": [
    "Finally we have a readable plot of ERAs that is more representative of our data. We can see that ERAs are mostly normal with the mean around 4. There are many ERAs that are 0 as well as a large spike around an ERA of 9. The data is still slightly right skewed. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "3ccb0847",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>yearID</th>\n",
       "      <th>teamID</th>\n",
       "      <th>lgID</th>\n",
       "      <th>playerID</th>\n",
       "      <th>salary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1985</td>\n",
       "      <td>ATL</td>\n",
       "      <td>NL</td>\n",
       "      <td>barkele01</td>\n",
       "      <td>870000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1985</td>\n",
       "      <td>ATL</td>\n",
       "      <td>NL</td>\n",
       "      <td>bedrost01</td>\n",
       "      <td>550000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1985</td>\n",
       "      <td>ATL</td>\n",
       "      <td>NL</td>\n",
       "      <td>benedbr01</td>\n",
       "      <td>545000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1985</td>\n",
       "      <td>ATL</td>\n",
       "      <td>NL</td>\n",
       "      <td>campri01</td>\n",
       "      <td>633333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1985</td>\n",
       "      <td>ATL</td>\n",
       "      <td>NL</td>\n",
       "      <td>ceronri01</td>\n",
       "      <td>625000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   yearID teamID lgID   playerID  salary\n",
       "0    1985    ATL   NL  barkele01  870000\n",
       "1    1985    ATL   NL  bedrost01  550000\n",
       "2    1985    ATL   NL  benedbr01  545000\n",
       "3    1985    ATL   NL   campri01  633333\n",
       "4    1985    ATL   NL  ceronri01  625000"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "salaries.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "f4715b6f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(salaries['salary'], bins = 50)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "a8e732df",
   "metadata": {},
   "outputs": [],
   "source": [
    "salaries_lessthan_million = salaries[salaries['salary'] <= 1000000]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "75bb03c5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(salaries_lessthan_million['salary'], bins = 15)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8f42efb6",
   "metadata": {},
   "source": [
    "Some issues I see with this data is that the salaries are recorded based on the value in the year that was paid, but this makes it difficult to compare the salaries across years due to inflation. To correct this, we will have to compute the salaries with inflation to a common year to conduct any further analysis with this data. To accomplish this, we have a CPI dataset from the BLS that will allow us to compute these new salaries."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f51ef4d7",
   "metadata": {},
   "source": [
    "## Start of Project Milestone 2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c769ee8",
   "metadata": {},
   "source": [
    "Now, we will move on to cleaning our data. First, I want to take care of the issues where batters had no hits and no RBIs. We will remove any batters who no at bats (AB). Since the player had no at bats, they will not be useful to our model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "3ab4ab94",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(101332, 22)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batting.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "e3641687",
   "metadata": {},
   "outputs": [],
   "source": [
    "batting = batting[batting[\"AB\"] != 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "385f0f4d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(91559, 22)"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batting.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "abaaee85",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(batting['H'], bins = 50)\n",
    "plt.title(\"Histogram of Hits\")\n",
    "plt.xlabel(\"Number of Hits\")\n",
    "plt.ylabel(\"Count\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d94ce0d4",
   "metadata": {},
   "source": [
    "We can still see that there is a large number of 0 hits, we can investiage this a little bit further by seeing how many ABs these values of 0 had. If the average is small, then we will remove more values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "d0b1aace",
   "metadata": {},
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.simplefilter(action='ignore', category=FutureWarning)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "243030d8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "yearID    1967.099730\n",
       "stint        1.076937\n",
       "G           16.681982\n",
       "AB           3.849640\n",
       "R            0.160360\n",
       "H            0.000000\n",
       "2B           0.000000\n",
       "3B           0.000000\n",
       "HR           0.000000\n",
       "RBI          0.046088\n",
       "SB           0.020479\n",
       "CS           0.010988\n",
       "BB           0.231712\n",
       "SO           1.644175\n",
       "IBB          0.005007\n",
       "HBP          0.018437\n",
       "SH           0.245840\n",
       "SF           0.012997\n",
       "GIDP         0.069776\n",
       "dtype: float64"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batting[batting[\"H\"] == 0].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "17bf6b1f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "yearID    1960.538014\n",
       "stint        1.075853\n",
       "G           54.645649\n",
       "AB         166.932022\n",
       "R           22.132647\n",
       "H           43.702153\n",
       "2B           7.387721\n",
       "3B           1.528689\n",
       "HR           3.282872\n",
       "RBI         20.006606\n",
       "SB           3.520056\n",
       "CS           1.524123\n",
       "BB          15.371311\n",
       "SO          24.292712\n",
       "IBB          1.442054\n",
       "HBP          1.243281\n",
       "SH           2.755126\n",
       "SF           1.364930\n",
       "GIDP         3.717390\n",
       "dtype: float64"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batting.mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3922b58d",
   "metadata": {},
   "source": [
    "We can see that our averge number of ABs was 3.85, this is a very small value when comparing it to the overall mean of our data for 166 average at bats. So we will remove all values below 5."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "535ae23b",
   "metadata": {},
   "outputs": [],
   "source": [
    "batting = batting[batting[\"AB\"] > 5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "f0ef6b30",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(73934, 22)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batting.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "a283ea92",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(batting['H'], bins = 50)\n",
    "plt.title(\"Histogram of Hits\")\n",
    "plt.xlabel(\"Number of Hits\")\n",
    "plt.ylabel(\"Count\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "395c050e",
   "metadata": {},
   "source": [
    "This significantly reduced the number of 0 hits in our data frame. We could consider returning to this to drop more values with low at bats as these will reduce the accuracy of our model. It might also be wise to filter out certain players such as pitchers who have relatively few at bats and are typically not great hitters."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2881ce0e",
   "metadata": {},
   "source": [
    "Looking at our pitching chart from before, we can see that there are a lot of pitchers who had a 0 era. This indicates that they had no earned runs which is very unlikely for pitchers who pitch a lot of innings. We will go ahead and remove any entries with ERA equal to zero."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "cc11f431",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(44139, 30)"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pitching.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "8d86b9f5",
   "metadata": {},
   "outputs": [],
   "source": [
    "pitching = pitching[pitching[\"ERA\"] != 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "c346ee90",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(42987, 30)"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pitching.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "bb2a0846",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "era_lessthan_10 = pitching[pitching['ERA'] <= 10]\n",
    "plt.hist(era_lessthan_10['ERA'], bins = 30)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6c3da8e8",
   "metadata": {},
   "source": [
    "This only removed around 1100 entries in our data frame however it removed our unecessary outliers which will make it easier to get better models in future steps."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "108e284b",
   "metadata": {},
   "source": [
    "Since we are looking at creating a model for predicting salaries, we will need to reduce our batting and pitching data frames to only include values after 1985 since this is the earliest year that we have data in our salaries data frame. To accomplish this, we will create new data frames and preserve our old data frames."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "dcd2726b",
   "metadata": {},
   "outputs": [],
   "source": [
    "batting_after_1985 = batting[batting[\"yearID\"] >= 1985]\n",
    "pitching_after_1985 = pitching[pitching[\"yearID\"] >= 1985]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "82f61f55",
   "metadata": {},
   "source": [
    "Now, we want to look for null values in our data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "0768a3ba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batting_after_1985.isnull().values.any()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "a267f12f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pitching_after_1985.isnull().values.any()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fe3364be",
   "metadata": {},
   "source": [
    "We can see that batting has no null values but there are some in the pitching dataframe. We can look at column by column to see which ones are null."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "6961db70",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "playerID    False\n",
       "yearID      False\n",
       "stint       False\n",
       "teamID      False\n",
       "lgID        False\n",
       "W           False\n",
       "L           False\n",
       "G           False\n",
       "GS          False\n",
       "CG          False\n",
       "SHO         False\n",
       "SV          False\n",
       "IPouts       True\n",
       "H           False\n",
       "ER          False\n",
       "HR          False\n",
       "BB          False\n",
       "SO          False\n",
       "BAOpp        True\n",
       "ERA          True\n",
       "IBB         False\n",
       "WP          False\n",
       "HBP          True\n",
       "BK          False\n",
       "BFP         False\n",
       "GF          False\n",
       "R           False\n",
       "SH           True\n",
       "SF           True\n",
       "GIDP         True\n",
       "dtype: bool"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pitching_after_1985.isnull().any()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "dc5239e6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "playerID        0\n",
       "yearID          0\n",
       "stint           0\n",
       "teamID          0\n",
       "lgID            0\n",
       "W               0\n",
       "L               0\n",
       "G               0\n",
       "GS              0\n",
       "CG              0\n",
       "SHO             0\n",
       "SV              0\n",
       "IPouts          1\n",
       "H               0\n",
       "ER              0\n",
       "HR              0\n",
       "BB              0\n",
       "SO              0\n",
       "BAOpp         626\n",
       "ERA            19\n",
       "IBB             0\n",
       "WP              0\n",
       "HBP             1\n",
       "BK              0\n",
       "BFP             0\n",
       "GF              0\n",
       "R               0\n",
       "SH           7765\n",
       "SF           7765\n",
       "GIDP        17987\n",
       "dtype: int64"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pitching_after_1985.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "ca6b076c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "18704"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pitching_after_1985.shape[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2926ec5e",
   "metadata": {},
   "source": [
    "The GIDP value has almost as many null values as there are entries in the data frame so we can drop this column all together as it provides no useful information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "a2ef4f45",
   "metadata": {},
   "outputs": [],
   "source": [
    "pitching_after_1985 = pitching_after_1985.drop(columns = ['GIDP'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a7da70c4",
   "metadata": {},
   "source": [
    "For the rest of our NA values we will fill them in with the mean of the column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "ecf34023",
   "metadata": {},
   "outputs": [],
   "source": [
    "pitching_after_1985['IPouts'] = pitching_after_1985['IPouts'].fillna(pitching_after_1985['IPouts'].mean())\n",
    "pitching_after_1985['BAOpp'] = pitching_after_1985['BAOpp'].fillna(pitching_after_1985['BAOpp'].mean())\n",
    "pitching_after_1985['ERA'] = pitching_after_1985['ERA'].fillna(pitching_after_1985['ERA'].mean())\n",
    "pitching_after_1985['HBP'] = pitching_after_1985['HBP'].fillna(pitching_after_1985['HBP'].mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "d6e1caf8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "playerID       0\n",
       "yearID         0\n",
       "stint          0\n",
       "teamID         0\n",
       "lgID           0\n",
       "W              0\n",
       "L              0\n",
       "G              0\n",
       "GS             0\n",
       "CG             0\n",
       "SHO            0\n",
       "SV             0\n",
       "IPouts         0\n",
       "H              0\n",
       "ER             0\n",
       "HR             0\n",
       "BB             0\n",
       "SO             0\n",
       "BAOpp          0\n",
       "ERA            0\n",
       "IBB            0\n",
       "WP             0\n",
       "HBP            0\n",
       "BK             0\n",
       "BFP            0\n",
       "GF             0\n",
       "R              0\n",
       "SH          7765\n",
       "SF          7765\n",
       "dtype: int64"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pitching_after_1985.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5beae912",
   "metadata": {},
   "source": [
    "We can also drop the SH and SF columns. I cannot find any information as to what these columns are and with such a large amount of missing values, it will not be useful in our model creation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "4e493336",
   "metadata": {},
   "outputs": [],
   "source": [
    "pitching_after_1985 = pitching_after_1985.drop(columns = ['SH', 'SF'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "50aeb221",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pitching_after_1985.isnull().values.any()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b7021012",
   "metadata": {},
   "source": [
    "Now our pitching dataframe is free from null values, we can take a look at our salaries dataframe to see if there are any null values in it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "fc2fda74",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "salaries.isnull().values.any()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b00a763c",
   "metadata": {},
   "source": [
    "Now we have no NA values in any of our pitching, batting, or salaries dataframes. However, we want to check that there are no outliers in our salaries dataframe that could impact our model creation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "11d20aad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>yearID</th>\n",
       "      <th>teamID</th>\n",
       "      <th>lgID</th>\n",
       "      <th>playerID</th>\n",
       "      <th>salary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6179</th>\n",
       "      <td>1993</td>\n",
       "      <td>NYA</td>\n",
       "      <td>AL</td>\n",
       "      <td>jamesdi01</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12007</th>\n",
       "      <td>1999</td>\n",
       "      <td>PIT</td>\n",
       "      <td>NL</td>\n",
       "      <td>martija02</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       yearID teamID lgID   playerID  salary\n",
       "6179     1993    NYA   AL  jamesdi01       0\n",
       "12007    1999    PIT   NL  martija02       0"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "salaries[salaries[\"salary\"] == 0]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21d031b0",
   "metadata": {},
   "source": [
    "We can see that we have two entries in our salaries dataframe that are equal to zero. We will get rid of these outliers since MLB players do not typically play for free and thus are not useful for the model we want to create."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "1e8ab396",
   "metadata": {},
   "outputs": [],
   "source": [
    "salaries = salaries[salaries[\"salary\"] != 0]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9a54c9e5",
   "metadata": {},
   "source": [
    "Now all of our dataframes are cleaned, have no null values, and have no outliers that could have serious implications for the models that we want to build."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cab8c27d",
   "metadata": {},
   "source": [
    "## Start of Project Milestone 3"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e486cf53",
   "metadata": {},
   "source": [
    "In order to create a model for our expected salary, we need to combine our batting after 1985 and salary data frames into a single data frame. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "c1669768",
   "metadata": {},
   "outputs": [],
   "source": [
    "batting_salary = salaries.merge(batting_after_1985, on=['playerID', 'yearID', 'teamID'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "6db797fa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>yearID</th>\n",
       "      <th>teamID</th>\n",
       "      <th>lgID_x</th>\n",
       "      <th>playerID</th>\n",
       "      <th>salary</th>\n",
       "      <th>stint</th>\n",
       "      <th>lgID_y</th>\n",
       "      <th>G</th>\n",
       "      <th>AB</th>\n",
       "      <th>R</th>\n",
       "      <th>...</th>\n",
       "      <th>RBI</th>\n",
       "      <th>SB</th>\n",
       "      <th>CS</th>\n",
       "      <th>BB</th>\n",
       "      <th>SO</th>\n",
       "      <th>IBB</th>\n",
       "      <th>HBP</th>\n",
       "      <th>SH</th>\n",
       "      <th>SF</th>\n",
       "      <th>GIDP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1985</td>\n",
       "      <td>ATL</td>\n",
       "      <td>NL</td>\n",
       "      <td>barkele01</td>\n",
       "      <td>870000</td>\n",
       "      <td>1</td>\n",
       "      <td>NL</td>\n",
       "      <td>20</td>\n",
       "      <td>17.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1985</td>\n",
       "      <td>ATL</td>\n",
       "      <td>NL</td>\n",
       "      <td>bedrost01</td>\n",
       "      <td>550000</td>\n",
       "      <td>1</td>\n",
       "      <td>NL</td>\n",
       "      <td>37</td>\n",
       "      <td>64.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1985</td>\n",
       "      <td>ATL</td>\n",
       "      <td>NL</td>\n",
       "      <td>benedbr01</td>\n",
       "      <td>545000</td>\n",
       "      <td>1</td>\n",
       "      <td>NL</td>\n",
       "      <td>70</td>\n",
       "      <td>208.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>...</td>\n",
       "      <td>20.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1985</td>\n",
       "      <td>ATL</td>\n",
       "      <td>NL</td>\n",
       "      <td>campri01</td>\n",
       "      <td>633333</td>\n",
       "      <td>1</td>\n",
       "      <td>NL</td>\n",
       "      <td>66</td>\n",
       "      <td>13.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1985</td>\n",
       "      <td>ATL</td>\n",
       "      <td>NL</td>\n",
       "      <td>ceronri01</td>\n",
       "      <td>625000</td>\n",
       "      <td>1</td>\n",
       "      <td>NL</td>\n",
       "      <td>96</td>\n",
       "      <td>282.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>...</td>\n",
       "      <td>25.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>15.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   yearID teamID lgID_x   playerID  salary  stint lgID_y   G     AB     R  \\\n",
       "0    1985    ATL     NL  barkele01  870000      1     NL  20   17.0   0.0   \n",
       "1    1985    ATL     NL  bedrost01  550000      1     NL  37   64.0   3.0   \n",
       "2    1985    ATL     NL  benedbr01  545000      1     NL  70  208.0  12.0   \n",
       "3    1985    ATL     NL   campri01  633333      1     NL  66   13.0   1.0   \n",
       "4    1985    ATL     NL  ceronri01  625000      1     NL  96  282.0  15.0   \n",
       "\n",
       "   ...   RBI   SB   CS    BB    SO  IBB  HBP   SH   SF  GIDP  \n",
       "0  ...   0.0  0.0  1.0   0.0   7.0  0.0  0.0  0.0  0.0   0.0  \n",
       "1  ...   1.0  0.0  0.0   1.0  22.0  0.0  0.0  6.0  0.0   0.0  \n",
       "2  ...  20.0  0.0  1.0  22.0  12.0  1.0  1.0  4.0  2.0   8.0  \n",
       "3  ...   2.0  0.0  0.0   1.0   5.0  0.0  0.0  1.0  0.0   0.0  \n",
       "4  ...  25.0  0.0  3.0  29.0  25.0  1.0  1.0  0.0  4.0  15.0  \n",
       "\n",
       "[5 rows x 24 columns]"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batting_salary.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "ffed548a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "yearID      False\n",
       "teamID      False\n",
       "lgID_x      False\n",
       "playerID    False\n",
       "salary      False\n",
       "stint       False\n",
       "lgID_y      False\n",
       "G           False\n",
       "AB          False\n",
       "R           False\n",
       "H           False\n",
       "2B          False\n",
       "3B          False\n",
       "HR          False\n",
       "RBI         False\n",
       "SB          False\n",
       "CS          False\n",
       "BB          False\n",
       "SO          False\n",
       "IBB         False\n",
       "HBP         False\n",
       "SH          False\n",
       "SF          False\n",
       "GIDP        False\n",
       "dtype: bool"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batting_salary.isnull().any()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "7d3fcabd",
   "metadata": {},
   "outputs": [],
   "source": [
    "batting_salary = batting_salary.drop(columns=['lgID_y'])\n",
    "batting_salary = batting_salary.rename(columns={'lgID_x':'lgID'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "7528e4c5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['yearID', 'teamID', 'lgID', 'playerID', 'salary', 'stint', 'G', 'AB',\n",
       "       'R', 'H', '2B', '3B', 'HR', 'RBI', 'SB', 'CS', 'BB', 'SO', 'IBB', 'HBP',\n",
       "       'SH', 'SF', 'GIDP'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batting_salary.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "59611ff2",
   "metadata": {},
   "source": [
    "There are several variables that we need to drop from our dataset before we can build our model. These include the yearID, teamID, lgID, playerID, and stint."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "8f43da5f",
   "metadata": {},
   "outputs": [],
   "source": [
    "batting_salary = batting_salary.drop(columns=['yearID', 'teamID', 'lgID', 'playerID', 'stint'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "491aec29",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>salary</th>\n",
       "      <th>G</th>\n",
       "      <th>AB</th>\n",
       "      <th>R</th>\n",
       "      <th>H</th>\n",
       "      <th>2B</th>\n",
       "      <th>3B</th>\n",
       "      <th>HR</th>\n",
       "      <th>RBI</th>\n",
       "      <th>SB</th>\n",
       "      <th>CS</th>\n",
       "      <th>BB</th>\n",
       "      <th>SO</th>\n",
       "      <th>IBB</th>\n",
       "      <th>HBP</th>\n",
       "      <th>SH</th>\n",
       "      <th>SF</th>\n",
       "      <th>GIDP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>870000</td>\n",
       "      <td>20</td>\n",
       "      <td>17.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>550000</td>\n",
       "      <td>37</td>\n",
       "      <td>64.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>545000</td>\n",
       "      <td>70</td>\n",
       "      <td>208.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>633333</td>\n",
       "      <td>66</td>\n",
       "      <td>13.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>625000</td>\n",
       "      <td>96</td>\n",
       "      <td>282.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>61.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>15.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   salary   G     AB     R     H   2B   3B   HR   RBI   SB   CS    BB    SO  \\\n",
       "0  870000  20   17.0   0.0   0.0  0.0  0.0  0.0   0.0  0.0  1.0   0.0   7.0   \n",
       "1  550000  37   64.0   3.0   5.0  0.0  0.0  0.0   1.0  0.0  0.0   1.0  22.0   \n",
       "2  545000  70  208.0  12.0  42.0  6.0  0.0  0.0  20.0  0.0  1.0  22.0  12.0   \n",
       "3  633333  66   13.0   1.0   3.0  0.0  0.0  1.0   2.0  0.0  0.0   1.0   5.0   \n",
       "4  625000  96  282.0  15.0  61.0  9.0  0.0  3.0  25.0  0.0  3.0  29.0  25.0   \n",
       "\n",
       "   IBB  HBP   SH   SF  GIDP  \n",
       "0  0.0  0.0  0.0  0.0   0.0  \n",
       "1  0.0  0.0  6.0  0.0   0.0  \n",
       "2  1.0  1.0  4.0  2.0   8.0  \n",
       "3  0.0  0.0  1.0  0.0   0.0  \n",
       "4  1.0  1.0  0.0  4.0  15.0  "
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batting_salary.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "701b1f20",
   "metadata": {},
   "source": [
    "Now that we have our merged data set and we have just the columns that we want to look at, we can start to build a model to predict salary. Since we have a numerical target and numerical features, we will start with a simple linear regression to predict salary. We can start by looking at the correlations between our features and target."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "10e66a2d",
   "metadata": {},
   "outputs": [],
   "source": [
    "corr = batting_salary.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "e507c610",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(corr, \n",
    "            xticklabels=corr.columns.values,\n",
    "            yticklabels=corr.columns.values)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a7150b6",
   "metadata": {},
   "source": [
    "Looking at our correlation matrix, we can see that none of our variables are highly correlated with salary. Our highest correlation is 0.3 being home runs (HR)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "055683c7",
   "metadata": {},
   "source": [
    "We can start to build our model. We will use feature selection in order to see which features give us the best accuracy withou overfitting our model. In order to do this, we will use Recursive Feature Elimination."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "c307361c",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "435f7707",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = batting_salary.drop(columns=['salary'])\n",
    "y = batting_salary['salary']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "735d952c",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "bad17862",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_selection import RFECV\n",
    "warnings.filterwarnings(action='ignore', module='scipy', message='^internal gelsd')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "7e7d79a9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 26.,  61.,   6., ...,   3.,   0.,   3.],\n",
       "       [ 55.,  80.,  16., ...,   2.,   0.,   2.],\n",
       "       [ 34.,  76.,   7., ...,  11.,   1.,   1.],\n",
       "       ...,\n",
       "       [145., 507.,  68., ...,   0.,   4.,  12.],\n",
       "       [125., 496.,  87., ...,   7.,   0.,   9.],\n",
       "       [158., 612., 100., ...,   0.,   6.,  13.]])"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ols = LinearRegression()\n",
    "rfecv = RFECV(estimator=ols, step=1, scoring='neg_mean_squared_error')\n",
    "rfecv.fit(X_train, y_train)\n",
    "rfecv.transform(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "8d221470",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "16"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rfecv.n_features_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "76685777",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ True,  True,  True,  True, False,  True,  True,  True,  True,\n",
       "        True,  True,  True,  True,  True,  True,  True,  True])"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rfecv.support_"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86203e46",
   "metadata": {},
   "source": [
    "Accoridng to the RFE, we can see that we should keep all of our features. Thus, we can trail our model with all of our features."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "229f09e6",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = ols.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af0004a5",
   "metadata": {},
   "source": [
    "Now that we have fitted our regression model, we can evaluate its performance using R-Squared, RMSE, and MAE."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "9d00b0f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "d7739aeb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.1660675861027976"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import r2_score\n",
    "r2_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "eb38d77b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3480719.6437443737"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import mean_squared_error\n",
    "import math\n",
    "math.sqrt(mean_squared_error(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "6bea20bb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2197260.023447863"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import mean_absolute_error\n",
    "mean_absolute_error(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4042c0c9",
   "metadata": {},
   "source": [
    "We can see from our above tests that our model does not have any predictive power. Our R-Squared of only 0.162 indicates that our features have very little predictive power. There could be a couple of reasons for this, the first being interactive effects. Multiple of our feature variables are highly correlated and are not independent (in order to score a run the player must get on base meaning that R is depedent on other variables in our data set). Since most of our features have high correlations, we can create interactive terms for all combinations and then reevaluate which features should be selected for an updated model."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4fe58f7b",
   "metadata": {},
   "source": [
    "We will first retest our model with all of our features as well as all combinations for our feature interactions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "091db4b1",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "interaction = PolynomialFeatures(degree=3, include_bias=False, interaction_only=True)\n",
    "features_interaction = interaction.fit_transform(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "665c1271",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(features_interaction, y, test_size=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "1e086702",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = ols.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "2241e163",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "0a5a299f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.15301645481077764"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r2_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "7eae3220",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3443282.348511806"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "math.sqrt(mean_squared_error(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "17e83442",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2142896.2805895843"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_absolute_error(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16be9143",
   "metadata": {},
   "source": [
    "Using all of our interaction terms our model did not get any better than our previous model. We can do Lasso Regression to reduce our number of features and see if our results are any better."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "47e4d456",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import Lasso\n",
    "from sklearn.preprocessing import StandardScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "4c764277",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/jacksonlyons/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.222e+16, tolerance: 1.716e+13\n",
      "  model = cd_fast.enet_coordinate_descent(\n"
     ]
    }
   ],
   "source": [
    "scaler = StandardScaler()\n",
    "features_standardized = scaler.fit_transform(X_train)\n",
    "regression = Lasso(alpha=0.5)\n",
    "model = regression.fit(features_standardized, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "4fd852f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_test_standardized = scaler.transform(X_test)\n",
    "y_pred = model.predict(X_test_standardized)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "e4f17cd0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.20376235460018943"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r2_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "a06bddfe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3338539.377709517"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "math.sqrt(mean_squared_error(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "d8aeca6c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2082543.167684171"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_absolute_error(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6b5386cc",
   "metadata": {},
   "source": [
    "With our Lasso Regression we can see a very small improvement in our accuracy compared to our model with all of the features. However, our model is still not very predictive when looking at our test data. This indicates that the features we have are not very useful when trying to predict our target variable. This could indicate that we are missing key features that are most useful for predicting salary."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ed12607",
   "metadata": {},
   "source": [
    "Now, we will try adding in our fielding data set to see if adding in more features could be useful in predicting our salary. Batting makes up only little bit of what a player does throughout a game. Fielding makes up a much larger percentage of plays that a player will make throughout a game. Therefore, players are evaluated on both batting and fielding so our combined data set should have more predictive power than just the batting set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "dad6afc9",
   "metadata": {},
   "outputs": [],
   "source": [
    "batting_fielding_salary = salaries.merge(batting_after_1985, on=['playerID', 'yearID', 'teamID'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "de9a07d2",
   "metadata": {},
   "outputs": [],
   "source": [
    "batting_fielding_salary = batting_fielding_salary.drop(columns=['lgID_y'])\n",
    "batting_fielding_salary = batting_fielding_salary.rename(columns={'lgID_x':'lgID'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "9379f7bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "batting_fielding_salary = batting_fielding_salary.merge(fielding, on=['playerID', 'yearID', 'teamID'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "5612689e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['yearID', 'teamID', 'lgID_x', 'playerID', 'salary', 'stint_x', 'G_x',\n",
       "       'AB', 'R', 'H', '2B', '3B', 'HR', 'RBI', 'SB_x', 'CS_x', 'BB', 'SO',\n",
       "       'IBB', 'HBP', 'SH', 'SF', 'GIDP', 'stint_y', 'lgID_y', 'POS', 'G_y',\n",
       "       'GS', 'InnOuts', 'PO', 'A', 'E', 'DP', 'PB', 'WP', 'SB_y', 'CS_y',\n",
       "       'ZR'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batting_fielding_salary.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "f5d78fab",
   "metadata": {},
   "outputs": [],
   "source": [
    "batting_fielding_salary = batting_fielding_salary.drop(columns=['yearID', 'teamID', 'lgID_x', 'lgID_y', 'playerID', 'stint_x', 'stint_y', 'POS'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "893e0c41",
   "metadata": {},
   "outputs": [],
   "source": [
    "batting_fielding_salary = batting_fielding_salary.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "029805e0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "corr = batting_fielding_salary.corr()\n",
    "sns.heatmap(corr, \n",
    "            xticklabels=corr.columns.values,\n",
    "            yticklabels=corr.columns.values)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf4c2be9",
   "metadata": {},
   "source": [
    "We will first create a simple linear regression model using our combined data set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "e69aa584",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = batting_fielding_salary.drop(columns=['salary'])\n",
    "y = batting_fielding_salary['salary']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "f0be2384",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "c5c9b52b",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = ols.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "3f94db60",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "4877ed46",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.24595646585021724"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r2_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "ddf0305c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "855171.9284964155"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "math.sqrt(mean_squared_error(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "ad9e31e3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "529105.8841146013"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_absolute_error(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "268ad1c0",
   "metadata": {},
   "source": [
    "We can see a decent improvement over our data set containing just our batting and salary data. Our r-squared improved to 0.329 compared to 0.177 in our previous model. We can also test a Lasso Regression to see if we get a more accurate model using that model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "dfc259e8",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/jacksonlyons/anaconda3/lib/python3.11/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.425e+14, tolerance: 7.680e+10\n",
      "  model = cd_fast.enet_coordinate_descent(\n"
     ]
    }
   ],
   "source": [
    "scaler = StandardScaler()\n",
    "features_standardized = scaler.fit_transform(X_train)\n",
    "regression = Lasso(alpha=0.5)\n",
    "model = regression.fit(features_standardized, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "63858f98",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_test_standardized = scaler.transform(X_test)\n",
    "y_pred = model.predict(X_test_standardized)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "2e14bf0e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.24150845824250022"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r2_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "3eaf2ba1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "857690.4953997425"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "math.sqrt(mean_squared_error(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "e14c23b3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "529182.7797301001"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_absolute_error(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "656e45e4",
   "metadata": {},
   "source": [
    "We don't really see an improvement in our accuracy when using our Lasso model so it might be better to move forward with the simple linear regression if we were to implement our model to predict as the model is better for interpretation. However, with such a low R-Squared value in our combined model, there still is not a significant reason to implement the model in its current state. We would need a much more accurate model to predict what a players salary should be using batting and fielding statistics. This means that we either need to find more data that could be used to make the model more accurate or that our model is not practical for trying to predict a players salary and we should train a differnt model such as a regression tree."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "36655f3f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "playerID       False\n",
       "yearID         False\n",
       "gameNum        False\n",
       "gameID          True\n",
       "teamID         False\n",
       "lgID           False\n",
       "GP              True\n",
       "startingPos     True\n",
       "dtype: bool"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_star.isnull().any()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "f9eec1b7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5069, 8)"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_star.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "efb4e6d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "all_star = all_star.drop(columns=['gameID', 'GP', 'startingPos'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "abc74344",
   "metadata": {},
   "outputs": [],
   "source": [
    "batting_all_star = batting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "31297bb5",
   "metadata": {},
   "outputs": [],
   "source": [
    "all_star['is_all_star'] = True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "214ca1c5",
   "metadata": {},
   "outputs": [],
   "source": [
    "batting_all_star = batting.merge(all_star, on=['playerID', 'yearID', 'teamID'], how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "94d141a3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>is_all_star</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>74130</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>74131</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>74132</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>74133</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>74134</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>74135 rows Ã— 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      is_all_star\n",
       "0             NaN\n",
       "1             NaN\n",
       "2             NaN\n",
       "3             NaN\n",
       "4             NaN\n",
       "...           ...\n",
       "74130         NaN\n",
       "74131         NaN\n",
       "74132         NaN\n",
       "74133         NaN\n",
       "74134         NaN\n",
       "\n",
       "[74135 rows x 1 columns]"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batting_all_star[['is_all_star']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "f4c8a6c6",
   "metadata": {},
   "outputs": [],
   "source": [
    "batting_all_star['is_all_star'] = batting_all_star['is_all_star'].fillna(False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "eecc57aa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "playerID           0\n",
       "yearID             0\n",
       "stint              0\n",
       "teamID             0\n",
       "lgID_x           648\n",
       "G                  0\n",
       "AB                 0\n",
       "R                  0\n",
       "H                  0\n",
       "2B                 0\n",
       "3B                 0\n",
       "HR                 0\n",
       "RBI              348\n",
       "SB              1170\n",
       "CS             20451\n",
       "BB                 0\n",
       "SO              6918\n",
       "IBB            31833\n",
       "HBP             2485\n",
       "SH              5688\n",
       "SF             31386\n",
       "GIDP           22820\n",
       "gameNum        69642\n",
       "lgID_y         69642\n",
       "is_all_star        0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batting_all_star.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "839f858d",
   "metadata": {},
   "outputs": [],
   "source": [
    "batting_all_star = batting_all_star.drop(columns=['playerID', 'yearID', 'stint','teamID','gameNum', 'lgID_y', 'lgID_x'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "69e27027",
   "metadata": {},
   "outputs": [],
   "source": [
    "batting_all_star = batting_all_star.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "e19ac101",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(42284, 18)"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batting_all_star.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "13abea70",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "corr = batting_all_star.corr()\n",
    "sns.heatmap(corr, \n",
    "            xticklabels=corr.columns.values,\n",
    "            yticklabels=corr.columns.values)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "d3c62c07",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "d7da03ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = batting_all_star.drop(columns=['is_all_star'])\n",
    "y = batting_all_star['is_all_star']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "c65a2092",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "0c11caca",
   "metadata": {},
   "outputs": [],
   "source": [
    "scalar = StandardScaler()\n",
    "features_standardized = scalar.fit_transform(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "fa58a325",
   "metadata": {},
   "outputs": [],
   "source": [
    "logistic_regression = LogisticRegression(random_state=0)\n",
    "model = logistic_regression.fit(features_standardized, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "54127720",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/jacksonlyons/anaconda3/lib/python3.11/site-packages/sklearn/base.py:457: UserWarning: X has feature names, but LogisticRegression was fitted without feature names\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "pred = model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "606bba79",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9154546529502188"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num_correct = 0\n",
    "for i in range(len(pred)):\n",
    "    if pred[i] == y_test.iat[i]:\n",
    "        num_correct += 1\n",
    "        \n",
    "num_correct / len(pred)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
