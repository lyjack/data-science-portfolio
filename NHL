{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "98a66a05",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import warnings\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.model_selection import cross_val_score\n",
    "import sklearn.metrics as metrics\n",
    "from sklearn.ensemble import BaggingRegressor\n",
    "import math\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.tree import DecisionTreeRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a590cf79",
   "metadata": {},
   "outputs": [],
   "source": [
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a38d6c73",
   "metadata": {},
   "outputs": [],
   "source": [
    "summed_team_stats = pd.read_excel(\"/Users/jacksonlyons/Documents/Coursework/Spring '24/DSC-630/Final Project/Data/Summed_Team_Stats.xlsx\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4ea64e6e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Team</th>\n",
       "      <th>GP</th>\n",
       "      <th>W</th>\n",
       "      <th>L</th>\n",
       "      <th>T</th>\n",
       "      <th>OT</th>\n",
       "      <th>P</th>\n",
       "      <th>P%</th>\n",
       "      <th>RW</th>\n",
       "      <th>ROW</th>\n",
       "      <th>...</th>\n",
       "      <th>GA</th>\n",
       "      <th>GF/GP</th>\n",
       "      <th>GA/GP</th>\n",
       "      <th>PP%</th>\n",
       "      <th>PK%</th>\n",
       "      <th>Net PP%</th>\n",
       "      <th>Net PK%</th>\n",
       "      <th>Shots/GP</th>\n",
       "      <th>SA/GP</th>\n",
       "      <th>FOW%</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Boston Bruins</td>\n",
       "      <td>246</td>\n",
       "      <td>163</td>\n",
       "      <td>58</td>\n",
       "      <td>--</td>\n",
       "      <td>25</td>\n",
       "      <td>351</td>\n",
       "      <td>0.713</td>\n",
       "      <td>130</td>\n",
       "      <td>153</td>\n",
       "      <td>...</td>\n",
       "      <td>613</td>\n",
       "      <td>3.32</td>\n",
       "      <td>2.49</td>\n",
       "      <td>21.9</td>\n",
       "      <td>83.8</td>\n",
       "      <td>19.3</td>\n",
       "      <td>86.2</td>\n",
       "      <td>32.8</td>\n",
       "      <td>29.7</td>\n",
       "      <td>52.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Carolina Hurricanes</td>\n",
       "      <td>246</td>\n",
       "      <td>158</td>\n",
       "      <td>64</td>\n",
       "      <td>--</td>\n",
       "      <td>24</td>\n",
       "      <td>340</td>\n",
       "      <td>0.691</td>\n",
       "      <td>129</td>\n",
       "      <td>151</td>\n",
       "      <td>...</td>\n",
       "      <td>621</td>\n",
       "      <td>3.32</td>\n",
       "      <td>2.52</td>\n",
       "      <td>22.9</td>\n",
       "      <td>86.3</td>\n",
       "      <td>20.6</td>\n",
       "      <td>89.6</td>\n",
       "      <td>34.1</td>\n",
       "      <td>26.6</td>\n",
       "      <td>53.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Colorado Avalanche</td>\n",
       "      <td>246</td>\n",
       "      <td>157</td>\n",
       "      <td>68</td>\n",
       "      <td>--</td>\n",
       "      <td>21</td>\n",
       "      <td>335</td>\n",
       "      <td>0.681</td>\n",
       "      <td>124</td>\n",
       "      <td>145</td>\n",
       "      <td>...</td>\n",
       "      <td>707</td>\n",
       "      <td>3.59</td>\n",
       "      <td>2.87</td>\n",
       "      <td>24.3</td>\n",
       "      <td>79.6</td>\n",
       "      <td>22.4</td>\n",
       "      <td>82.1</td>\n",
       "      <td>33.8</td>\n",
       "      <td>30.9</td>\n",
       "      <td>47.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>New York Rangers</td>\n",
       "      <td>246</td>\n",
       "      <td>154</td>\n",
       "      <td>69</td>\n",
       "      <td>--</td>\n",
       "      <td>23</td>\n",
       "      <td>331</td>\n",
       "      <td>0.673</td>\n",
       "      <td>124</td>\n",
       "      <td>142</td>\n",
       "      <td>...</td>\n",
       "      <td>646</td>\n",
       "      <td>3.26</td>\n",
       "      <td>2.63</td>\n",
       "      <td>25.3</td>\n",
       "      <td>82.7</td>\n",
       "      <td>23.4</td>\n",
       "      <td>86.2</td>\n",
       "      <td>30.7</td>\n",
       "      <td>29.9</td>\n",
       "      <td>49.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Toronto Maple Leafs</td>\n",
       "      <td>246</td>\n",
       "      <td>150</td>\n",
       "      <td>68</td>\n",
       "      <td>--</td>\n",
       "      <td>28</td>\n",
       "      <td>328</td>\n",
       "      <td>0.667</td>\n",
       "      <td>120</td>\n",
       "      <td>141</td>\n",
       "      <td>...</td>\n",
       "      <td>733</td>\n",
       "      <td>3.61</td>\n",
       "      <td>2.98</td>\n",
       "      <td>25.7</td>\n",
       "      <td>80.3</td>\n",
       "      <td>22.8</td>\n",
       "      <td>84.0</td>\n",
       "      <td>33.1</td>\n",
       "      <td>30.0</td>\n",
       "      <td>53.9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                  Team   GP    W   L   T  OT    P     P%   RW  ROW  ...   GA  \\\n",
       "0        Boston Bruins  246  163  58  --  25  351  0.713  130  153  ...  613   \n",
       "1  Carolina Hurricanes  246  158  64  --  24  340  0.691  129  151  ...  621   \n",
       "2   Colorado Avalanche  246  157  68  --  21  335  0.681  124  145  ...  707   \n",
       "3     New York Rangers  246  154  69  --  23  331  0.673  124  142  ...  646   \n",
       "4  Toronto Maple Leafs  246  150  68  --  28  328  0.667  120  141  ...  733   \n",
       "\n",
       "   GF/GP  GA/GP   PP%   PK%  Net PP%  Net PK%  Shots/GP  SA/GP  FOW%  \n",
       "0   3.32   2.49  21.9  83.8     19.3     86.2      32.8   29.7  52.8  \n",
       "1   3.32   2.52  22.9  86.3     20.6     89.6      34.1   26.6  53.1  \n",
       "2   3.59   2.87  24.3  79.6     22.4     82.1      33.8   30.9  47.3  \n",
       "3   3.26   2.63  25.3  82.7     23.4     86.2      30.7   29.9  49.8  \n",
       "4   3.61   2.98  25.7  80.3     22.8     84.0      33.1   30.0  53.9  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "summed_team_stats.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d8dce975",
   "metadata": {},
   "outputs": [],
   "source": [
    "summed_team_stats = summed_team_stats.drop(columns=['T'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "55bb1f71",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Team         object\n",
       "GP            int64\n",
       "W             int64\n",
       "L             int64\n",
       "OT            int64\n",
       "P             int64\n",
       "P%          float64\n",
       "RW            int64\n",
       "ROW           int64\n",
       "S/O Win       int64\n",
       "GF            int64\n",
       "GA            int64\n",
       "GF/GP       float64\n",
       "GA/GP       float64\n",
       "PP%         float64\n",
       "PK%         float64\n",
       "Net PP%     float64\n",
       "Net PK%     float64\n",
       "Shots/GP    float64\n",
       "SA/GP       float64\n",
       "FOW%        float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "summed_team_stats.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d71bdbce",
   "metadata": {},
   "outputs": [],
   "source": [
    "summed_team_stats[\"W%\"] = summed_team_stats[\"W\"] / summed_team_stats['GP']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "fba9eda8",
   "metadata": {},
   "outputs": [],
   "source": [
    "summed_team_stats[\"Goal_Diff\"] = summed_team_stats['GF'] - summed_team_stats['GA']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "0c4edb98",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Team</th>\n",
       "      <th>GP</th>\n",
       "      <th>W</th>\n",
       "      <th>L</th>\n",
       "      <th>OT</th>\n",
       "      <th>P</th>\n",
       "      <th>P%</th>\n",
       "      <th>RW</th>\n",
       "      <th>ROW</th>\n",
       "      <th>S/O Win</th>\n",
       "      <th>...</th>\n",
       "      <th>GA/GP</th>\n",
       "      <th>PP%</th>\n",
       "      <th>PK%</th>\n",
       "      <th>Net PP%</th>\n",
       "      <th>Net PK%</th>\n",
       "      <th>Shots/GP</th>\n",
       "      <th>SA/GP</th>\n",
       "      <th>FOW%</th>\n",
       "      <th>W%</th>\n",
       "      <th>Goal_Diff</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Boston Bruins</td>\n",
       "      <td>246</td>\n",
       "      <td>163</td>\n",
       "      <td>58</td>\n",
       "      <td>25</td>\n",
       "      <td>351</td>\n",
       "      <td>0.713</td>\n",
       "      <td>130</td>\n",
       "      <td>153</td>\n",
       "      <td>10</td>\n",
       "      <td>...</td>\n",
       "      <td>2.49</td>\n",
       "      <td>21.9</td>\n",
       "      <td>83.8</td>\n",
       "      <td>19.3</td>\n",
       "      <td>86.2</td>\n",
       "      <td>32.8</td>\n",
       "      <td>29.7</td>\n",
       "      <td>52.8</td>\n",
       "      <td>0.662602</td>\n",
       "      <td>204</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Carolina Hurricanes</td>\n",
       "      <td>246</td>\n",
       "      <td>158</td>\n",
       "      <td>64</td>\n",
       "      <td>24</td>\n",
       "      <td>340</td>\n",
       "      <td>0.691</td>\n",
       "      <td>129</td>\n",
       "      <td>151</td>\n",
       "      <td>7</td>\n",
       "      <td>...</td>\n",
       "      <td>2.52</td>\n",
       "      <td>22.9</td>\n",
       "      <td>86.3</td>\n",
       "      <td>20.6</td>\n",
       "      <td>89.6</td>\n",
       "      <td>34.1</td>\n",
       "      <td>26.6</td>\n",
       "      <td>53.1</td>\n",
       "      <td>0.642276</td>\n",
       "      <td>195</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Colorado Avalanche</td>\n",
       "      <td>246</td>\n",
       "      <td>157</td>\n",
       "      <td>68</td>\n",
       "      <td>21</td>\n",
       "      <td>335</td>\n",
       "      <td>0.681</td>\n",
       "      <td>124</td>\n",
       "      <td>145</td>\n",
       "      <td>12</td>\n",
       "      <td>...</td>\n",
       "      <td>2.87</td>\n",
       "      <td>24.3</td>\n",
       "      <td>79.6</td>\n",
       "      <td>22.4</td>\n",
       "      <td>82.1</td>\n",
       "      <td>33.8</td>\n",
       "      <td>30.9</td>\n",
       "      <td>47.3</td>\n",
       "      <td>0.638211</td>\n",
       "      <td>177</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>New York Rangers</td>\n",
       "      <td>246</td>\n",
       "      <td>154</td>\n",
       "      <td>69</td>\n",
       "      <td>23</td>\n",
       "      <td>331</td>\n",
       "      <td>0.673</td>\n",
       "      <td>124</td>\n",
       "      <td>142</td>\n",
       "      <td>12</td>\n",
       "      <td>...</td>\n",
       "      <td>2.63</td>\n",
       "      <td>25.3</td>\n",
       "      <td>82.7</td>\n",
       "      <td>23.4</td>\n",
       "      <td>86.2</td>\n",
       "      <td>30.7</td>\n",
       "      <td>29.9</td>\n",
       "      <td>49.8</td>\n",
       "      <td>0.626016</td>\n",
       "      <td>155</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Toronto Maple Leafs</td>\n",
       "      <td>246</td>\n",
       "      <td>150</td>\n",
       "      <td>68</td>\n",
       "      <td>28</td>\n",
       "      <td>328</td>\n",
       "      <td>0.667</td>\n",
       "      <td>120</td>\n",
       "      <td>141</td>\n",
       "      <td>9</td>\n",
       "      <td>...</td>\n",
       "      <td>2.98</td>\n",
       "      <td>25.7</td>\n",
       "      <td>80.3</td>\n",
       "      <td>22.8</td>\n",
       "      <td>84.0</td>\n",
       "      <td>33.1</td>\n",
       "      <td>30.0</td>\n",
       "      <td>53.9</td>\n",
       "      <td>0.609756</td>\n",
       "      <td>155</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                  Team   GP    W   L  OT    P     P%   RW  ROW  S/O Win  ...  \\\n",
       "0        Boston Bruins  246  163  58  25  351  0.713  130  153       10  ...   \n",
       "1  Carolina Hurricanes  246  158  64  24  340  0.691  129  151        7  ...   \n",
       "2   Colorado Avalanche  246  157  68  21  335  0.681  124  145       12  ...   \n",
       "3     New York Rangers  246  154  69  23  331  0.673  124  142       12  ...   \n",
       "4  Toronto Maple Leafs  246  150  68  28  328  0.667  120  141        9  ...   \n",
       "\n",
       "   GA/GP   PP%   PK%  Net PP%  Net PK%  Shots/GP  SA/GP  FOW%        W%  \\\n",
       "0   2.49  21.9  83.8     19.3     86.2      32.8   29.7  52.8  0.662602   \n",
       "1   2.52  22.9  86.3     20.6     89.6      34.1   26.6  53.1  0.642276   \n",
       "2   2.87  24.3  79.6     22.4     82.1      33.8   30.9  47.3  0.638211   \n",
       "3   2.63  25.3  82.7     23.4     86.2      30.7   29.9  49.8  0.626016   \n",
       "4   2.98  25.7  80.3     22.8     84.0      33.1   30.0  53.9  0.609756   \n",
       "\n",
       "   Goal_Diff  \n",
       "0        204  \n",
       "1        195  \n",
       "2        177  \n",
       "3        155  \n",
       "4        155  \n",
       "\n",
       "[5 rows x 23 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "summed_team_stats.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "1220af0c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "dataplot=sns.heatmap(summed_team_stats.corr())\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "84c2919d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>GP</th>\n",
       "      <th>W</th>\n",
       "      <th>L</th>\n",
       "      <th>OT</th>\n",
       "      <th>P</th>\n",
       "      <th>P%</th>\n",
       "      <th>RW</th>\n",
       "      <th>ROW</th>\n",
       "      <th>S/O Win</th>\n",
       "      <th>GF</th>\n",
       "      <th>...</th>\n",
       "      <th>GA/GP</th>\n",
       "      <th>PP%</th>\n",
       "      <th>PK%</th>\n",
       "      <th>Net PP%</th>\n",
       "      <th>Net PK%</th>\n",
       "      <th>Shots/GP</th>\n",
       "      <th>SA/GP</th>\n",
       "      <th>FOW%</th>\n",
       "      <th>W%</th>\n",
       "      <th>Goal_Diff</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>GP</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>W</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.981582</td>\n",
       "      <td>-0.485177</td>\n",
       "      <td>0.995765</td>\n",
       "      <td>0.995815</td>\n",
       "      <td>0.986172</td>\n",
       "      <td>0.993350</td>\n",
       "      <td>0.283072</td>\n",
       "      <td>0.897788</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.913208</td>\n",
       "      <td>0.778599</td>\n",
       "      <td>0.625392</td>\n",
       "      <td>0.810834</td>\n",
       "      <td>0.704231</td>\n",
       "      <td>0.747118</td>\n",
       "      <td>-0.704699</td>\n",
       "      <td>0.479678</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.987087</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>L</th>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.981582</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.309192</td>\n",
       "      <td>-0.994989</td>\n",
       "      <td>-0.994926</td>\n",
       "      <td>-0.977689</td>\n",
       "      <td>-0.975971</td>\n",
       "      <td>-0.270227</td>\n",
       "      <td>-0.868366</td>\n",
       "      <td>...</td>\n",
       "      <td>0.927922</td>\n",
       "      <td>-0.738132</td>\n",
       "      <td>-0.662428</td>\n",
       "      <td>-0.766797</td>\n",
       "      <td>-0.744204</td>\n",
       "      <td>-0.752237</td>\n",
       "      <td>0.727947</td>\n",
       "      <td>-0.533907</td>\n",
       "      <td>-0.981582</td>\n",
       "      <td>-0.980444</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>OT</th>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.485177</td>\n",
       "      <td>0.309192</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.402732</td>\n",
       "      <td>-0.403267</td>\n",
       "      <td>-0.434159</td>\n",
       "      <td>-0.477758</td>\n",
       "      <td>-0.172271</td>\n",
       "      <td>-0.494566</td>\n",
       "      <td>...</td>\n",
       "      <td>0.298736</td>\n",
       "      <td>-0.497344</td>\n",
       "      <td>-0.081186</td>\n",
       "      <td>-0.526610</td>\n",
       "      <td>-0.099349</td>\n",
       "      <td>-0.276073</td>\n",
       "      <td>0.176089</td>\n",
       "      <td>0.055919</td>\n",
       "      <td>-0.485177</td>\n",
       "      <td>-0.426104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>P</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0.995765</td>\n",
       "      <td>-0.994989</td>\n",
       "      <td>-0.402732</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.999996</td>\n",
       "      <td>0.986654</td>\n",
       "      <td>0.989584</td>\n",
       "      <td>0.278201</td>\n",
       "      <td>0.887784</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.924516</td>\n",
       "      <td>0.762728</td>\n",
       "      <td>0.646110</td>\n",
       "      <td>0.793394</td>\n",
       "      <td>0.726727</td>\n",
       "      <td>0.753040</td>\n",
       "      <td>-0.719148</td>\n",
       "      <td>0.507995</td>\n",
       "      <td>0.995765</td>\n",
       "      <td>0.988459</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>P%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0.995815</td>\n",
       "      <td>-0.994926</td>\n",
       "      <td>-0.403267</td>\n",
       "      <td>0.999996</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.986728</td>\n",
       "      <td>0.989668</td>\n",
       "      <td>0.277932</td>\n",
       "      <td>0.887777</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.924575</td>\n",
       "      <td>0.762875</td>\n",
       "      <td>0.645784</td>\n",
       "      <td>0.793564</td>\n",
       "      <td>0.726330</td>\n",
       "      <td>0.752980</td>\n",
       "      <td>-0.719090</td>\n",
       "      <td>0.507198</td>\n",
       "      <td>0.995815</td>\n",
       "      <td>0.988489</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RW</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0.986172</td>\n",
       "      <td>-0.977689</td>\n",
       "      <td>-0.434159</td>\n",
       "      <td>0.986654</td>\n",
       "      <td>0.986728</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.993782</td>\n",
       "      <td>0.161132</td>\n",
       "      <td>0.884385</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.935733</td>\n",
       "      <td>0.749863</td>\n",
       "      <td>0.648612</td>\n",
       "      <td>0.782767</td>\n",
       "      <td>0.735521</td>\n",
       "      <td>0.767749</td>\n",
       "      <td>-0.750197</td>\n",
       "      <td>0.472893</td>\n",
       "      <td>0.986172</td>\n",
       "      <td>0.993010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ROW</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0.993350</td>\n",
       "      <td>-0.975971</td>\n",
       "      <td>-0.477758</td>\n",
       "      <td>0.989584</td>\n",
       "      <td>0.989668</td>\n",
       "      <td>0.993782</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.170769</td>\n",
       "      <td>0.901421</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.919313</td>\n",
       "      <td>0.773076</td>\n",
       "      <td>0.649006</td>\n",
       "      <td>0.800863</td>\n",
       "      <td>0.724435</td>\n",
       "      <td>0.765698</td>\n",
       "      <td>-0.720100</td>\n",
       "      <td>0.484475</td>\n",
       "      <td>0.993350</td>\n",
       "      <td>0.992458</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>S/O Win</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0.283072</td>\n",
       "      <td>-0.270227</td>\n",
       "      <td>-0.172271</td>\n",
       "      <td>0.278201</td>\n",
       "      <td>0.277932</td>\n",
       "      <td>0.161132</td>\n",
       "      <td>0.170769</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.174137</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.157059</td>\n",
       "      <td>0.223276</td>\n",
       "      <td>-0.054330</td>\n",
       "      <td>0.267676</td>\n",
       "      <td>-0.007973</td>\n",
       "      <td>0.015327</td>\n",
       "      <td>-0.032142</td>\n",
       "      <td>0.069250</td>\n",
       "      <td>0.283072</td>\n",
       "      <td>0.179995</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GF</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0.897788</td>\n",
       "      <td>-0.868366</td>\n",
       "      <td>-0.494566</td>\n",
       "      <td>0.887784</td>\n",
       "      <td>0.887777</td>\n",
       "      <td>0.884385</td>\n",
       "      <td>0.901421</td>\n",
       "      <td>0.174137</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.683504</td>\n",
       "      <td>0.830877</td>\n",
       "      <td>0.479228</td>\n",
       "      <td>0.820726</td>\n",
       "      <td>0.572346</td>\n",
       "      <td>0.776430</td>\n",
       "      <td>-0.586858</td>\n",
       "      <td>0.390837</td>\n",
       "      <td>0.897788</td>\n",
       "      <td>0.909907</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GA</th>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.912682</td>\n",
       "      <td>0.928055</td>\n",
       "      <td>0.295512</td>\n",
       "      <td>-0.924304</td>\n",
       "      <td>-0.924364</td>\n",
       "      <td>-0.935451</td>\n",
       "      <td>-0.918800</td>\n",
       "      <td>-0.156832</td>\n",
       "      <td>-0.682664</td>\n",
       "      <td>...</td>\n",
       "      <td>0.999969</td>\n",
       "      <td>-0.580317</td>\n",
       "      <td>-0.689030</td>\n",
       "      <td>-0.635689</td>\n",
       "      <td>-0.750992</td>\n",
       "      <td>-0.674414</td>\n",
       "      <td>0.785205</td>\n",
       "      <td>-0.508598</td>\n",
       "      <td>-0.912682</td>\n",
       "      <td>-0.924277</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GF/GP</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0.898040</td>\n",
       "      <td>-0.868598</td>\n",
       "      <td>-0.494764</td>\n",
       "      <td>0.888028</td>\n",
       "      <td>0.888026</td>\n",
       "      <td>0.884950</td>\n",
       "      <td>0.901893</td>\n",
       "      <td>0.172365</td>\n",
       "      <td>0.999962</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.683960</td>\n",
       "      <td>0.831735</td>\n",
       "      <td>0.480731</td>\n",
       "      <td>0.821597</td>\n",
       "      <td>0.574224</td>\n",
       "      <td>0.778015</td>\n",
       "      <td>-0.587413</td>\n",
       "      <td>0.391701</td>\n",
       "      <td>0.898040</td>\n",
       "      <td>0.910155</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GA/GP</th>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.913208</td>\n",
       "      <td>0.927922</td>\n",
       "      <td>0.298736</td>\n",
       "      <td>-0.924516</td>\n",
       "      <td>-0.924575</td>\n",
       "      <td>-0.935733</td>\n",
       "      <td>-0.919313</td>\n",
       "      <td>-0.157059</td>\n",
       "      <td>-0.683504</td>\n",
       "      <td>...</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.580064</td>\n",
       "      <td>-0.687290</td>\n",
       "      <td>-0.635606</td>\n",
       "      <td>-0.749303</td>\n",
       "      <td>-0.675471</td>\n",
       "      <td>0.784631</td>\n",
       "      <td>-0.506981</td>\n",
       "      <td>-0.913208</td>\n",
       "      <td>-0.924698</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PP%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0.778599</td>\n",
       "      <td>-0.738132</td>\n",
       "      <td>-0.497344</td>\n",
       "      <td>0.762728</td>\n",
       "      <td>0.762875</td>\n",
       "      <td>0.749863</td>\n",
       "      <td>0.773076</td>\n",
       "      <td>0.223276</td>\n",
       "      <td>0.830877</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.580064</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.438986</td>\n",
       "      <td>0.981742</td>\n",
       "      <td>0.488211</td>\n",
       "      <td>0.490010</td>\n",
       "      <td>-0.446398</td>\n",
       "      <td>0.406084</td>\n",
       "      <td>0.778599</td>\n",
       "      <td>0.763462</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PK%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0.625392</td>\n",
       "      <td>-0.662428</td>\n",
       "      <td>-0.081186</td>\n",
       "      <td>0.646110</td>\n",
       "      <td>0.645784</td>\n",
       "      <td>0.648612</td>\n",
       "      <td>0.649006</td>\n",
       "      <td>-0.054330</td>\n",
       "      <td>0.479228</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.687290</td>\n",
       "      <td>0.438986</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.439943</td>\n",
       "      <td>0.951933</td>\n",
       "      <td>0.580131</td>\n",
       "      <td>-0.658733</td>\n",
       "      <td>0.598692</td>\n",
       "      <td>0.625392</td>\n",
       "      <td>0.641479</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Net PP%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0.810834</td>\n",
       "      <td>-0.766797</td>\n",
       "      <td>-0.526610</td>\n",
       "      <td>0.793394</td>\n",
       "      <td>0.793564</td>\n",
       "      <td>0.782767</td>\n",
       "      <td>0.800863</td>\n",
       "      <td>0.267676</td>\n",
       "      <td>0.820726</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.635606</td>\n",
       "      <td>0.981742</td>\n",
       "      <td>0.439943</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.491705</td>\n",
       "      <td>0.500846</td>\n",
       "      <td>-0.436514</td>\n",
       "      <td>0.388051</td>\n",
       "      <td>0.810834</td>\n",
       "      <td>0.789591</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Net PK%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0.704231</td>\n",
       "      <td>-0.744204</td>\n",
       "      <td>-0.099349</td>\n",
       "      <td>0.726727</td>\n",
       "      <td>0.726330</td>\n",
       "      <td>0.735521</td>\n",
       "      <td>0.724435</td>\n",
       "      <td>-0.007973</td>\n",
       "      <td>0.572346</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.749303</td>\n",
       "      <td>0.488211</td>\n",
       "      <td>0.951933</td>\n",
       "      <td>0.491705</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.663589</td>\n",
       "      <td>-0.749737</td>\n",
       "      <td>0.650819</td>\n",
       "      <td>0.704231</td>\n",
       "      <td>0.725296</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Shots/GP</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0.747118</td>\n",
       "      <td>-0.752237</td>\n",
       "      <td>-0.276073</td>\n",
       "      <td>0.753040</td>\n",
       "      <td>0.752980</td>\n",
       "      <td>0.767749</td>\n",
       "      <td>0.765698</td>\n",
       "      <td>0.015327</td>\n",
       "      <td>0.776430</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.675471</td>\n",
       "      <td>0.490010</td>\n",
       "      <td>0.580131</td>\n",
       "      <td>0.500846</td>\n",
       "      <td>0.663589</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.665743</td>\n",
       "      <td>0.441290</td>\n",
       "      <td>0.747118</td>\n",
       "      <td>0.788435</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SA/GP</th>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.704699</td>\n",
       "      <td>0.727947</td>\n",
       "      <td>0.176089</td>\n",
       "      <td>-0.719148</td>\n",
       "      <td>-0.719090</td>\n",
       "      <td>-0.750197</td>\n",
       "      <td>-0.720100</td>\n",
       "      <td>-0.032142</td>\n",
       "      <td>-0.586858</td>\n",
       "      <td>...</td>\n",
       "      <td>0.784631</td>\n",
       "      <td>-0.446398</td>\n",
       "      <td>-0.658733</td>\n",
       "      <td>-0.436514</td>\n",
       "      <td>-0.749737</td>\n",
       "      <td>-0.665743</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.433589</td>\n",
       "      <td>-0.704699</td>\n",
       "      <td>-0.752298</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FOW%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0.479678</td>\n",
       "      <td>-0.533907</td>\n",
       "      <td>0.055919</td>\n",
       "      <td>0.507995</td>\n",
       "      <td>0.507198</td>\n",
       "      <td>0.472893</td>\n",
       "      <td>0.484475</td>\n",
       "      <td>0.069250</td>\n",
       "      <td>0.390837</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.506981</td>\n",
       "      <td>0.406084</td>\n",
       "      <td>0.598692</td>\n",
       "      <td>0.388051</td>\n",
       "      <td>0.650819</td>\n",
       "      <td>0.441290</td>\n",
       "      <td>-0.433589</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.479678</td>\n",
       "      <td>0.492880</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>W%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.981582</td>\n",
       "      <td>-0.485177</td>\n",
       "      <td>0.995765</td>\n",
       "      <td>0.995815</td>\n",
       "      <td>0.986172</td>\n",
       "      <td>0.993350</td>\n",
       "      <td>0.283072</td>\n",
       "      <td>0.897788</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.913208</td>\n",
       "      <td>0.778599</td>\n",
       "      <td>0.625392</td>\n",
       "      <td>0.810834</td>\n",
       "      <td>0.704231</td>\n",
       "      <td>0.747118</td>\n",
       "      <td>-0.704699</td>\n",
       "      <td>0.479678</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.987087</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Goal_Diff</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0.987087</td>\n",
       "      <td>-0.980444</td>\n",
       "      <td>-0.426104</td>\n",
       "      <td>0.988459</td>\n",
       "      <td>0.988489</td>\n",
       "      <td>0.993010</td>\n",
       "      <td>0.992458</td>\n",
       "      <td>0.179995</td>\n",
       "      <td>0.909907</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.924698</td>\n",
       "      <td>0.763462</td>\n",
       "      <td>0.641479</td>\n",
       "      <td>0.789591</td>\n",
       "      <td>0.725296</td>\n",
       "      <td>0.788435</td>\n",
       "      <td>-0.752298</td>\n",
       "      <td>0.492880</td>\n",
       "      <td>0.987087</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>22 rows Ã— 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           GP         W         L        OT         P        P%        RW  \\\n",
       "GP        NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
       "W         NaN  1.000000 -0.981582 -0.485177  0.995765  0.995815  0.986172   \n",
       "L         NaN -0.981582  1.000000  0.309192 -0.994989 -0.994926 -0.977689   \n",
       "OT        NaN -0.485177  0.309192  1.000000 -0.402732 -0.403267 -0.434159   \n",
       "P         NaN  0.995765 -0.994989 -0.402732  1.000000  0.999996  0.986654   \n",
       "P%        NaN  0.995815 -0.994926 -0.403267  0.999996  1.000000  0.986728   \n",
       "RW        NaN  0.986172 -0.977689 -0.434159  0.986654  0.986728  1.000000   \n",
       "ROW       NaN  0.993350 -0.975971 -0.477758  0.989584  0.989668  0.993782   \n",
       "S/O Win   NaN  0.283072 -0.270227 -0.172271  0.278201  0.277932  0.161132   \n",
       "GF        NaN  0.897788 -0.868366 -0.494566  0.887784  0.887777  0.884385   \n",
       "GA        NaN -0.912682  0.928055  0.295512 -0.924304 -0.924364 -0.935451   \n",
       "GF/GP     NaN  0.898040 -0.868598 -0.494764  0.888028  0.888026  0.884950   \n",
       "GA/GP     NaN -0.913208  0.927922  0.298736 -0.924516 -0.924575 -0.935733   \n",
       "PP%       NaN  0.778599 -0.738132 -0.497344  0.762728  0.762875  0.749863   \n",
       "PK%       NaN  0.625392 -0.662428 -0.081186  0.646110  0.645784  0.648612   \n",
       "Net PP%   NaN  0.810834 -0.766797 -0.526610  0.793394  0.793564  0.782767   \n",
       "Net PK%   NaN  0.704231 -0.744204 -0.099349  0.726727  0.726330  0.735521   \n",
       "Shots/GP  NaN  0.747118 -0.752237 -0.276073  0.753040  0.752980  0.767749   \n",
       "SA/GP     NaN -0.704699  0.727947  0.176089 -0.719148 -0.719090 -0.750197   \n",
       "FOW%      NaN  0.479678 -0.533907  0.055919  0.507995  0.507198  0.472893   \n",
       "W%        NaN  1.000000 -0.981582 -0.485177  0.995765  0.995815  0.986172   \n",
       "Goal_Diff NaN  0.987087 -0.980444 -0.426104  0.988459  0.988489  0.993010   \n",
       "\n",
       "                ROW   S/O Win        GF  ...     GA/GP       PP%       PK%  \\\n",
       "GP              NaN       NaN       NaN  ...       NaN       NaN       NaN   \n",
       "W          0.993350  0.283072  0.897788  ... -0.913208  0.778599  0.625392   \n",
       "L         -0.975971 -0.270227 -0.868366  ...  0.927922 -0.738132 -0.662428   \n",
       "OT        -0.477758 -0.172271 -0.494566  ...  0.298736 -0.497344 -0.081186   \n",
       "P          0.989584  0.278201  0.887784  ... -0.924516  0.762728  0.646110   \n",
       "P%         0.989668  0.277932  0.887777  ... -0.924575  0.762875  0.645784   \n",
       "RW         0.993782  0.161132  0.884385  ... -0.935733  0.749863  0.648612   \n",
       "ROW        1.000000  0.170769  0.901421  ... -0.919313  0.773076  0.649006   \n",
       "S/O Win    0.170769  1.000000  0.174137  ... -0.157059  0.223276 -0.054330   \n",
       "GF         0.901421  0.174137  1.000000  ... -0.683504  0.830877  0.479228   \n",
       "GA        -0.918800 -0.156832 -0.682664  ...  0.999969 -0.580317 -0.689030   \n",
       "GF/GP      0.901893  0.172365  0.999962  ... -0.683960  0.831735  0.480731   \n",
       "GA/GP     -0.919313 -0.157059 -0.683504  ...  1.000000 -0.580064 -0.687290   \n",
       "PP%        0.773076  0.223276  0.830877  ... -0.580064  1.000000  0.438986   \n",
       "PK%        0.649006 -0.054330  0.479228  ... -0.687290  0.438986  1.000000   \n",
       "Net PP%    0.800863  0.267676  0.820726  ... -0.635606  0.981742  0.439943   \n",
       "Net PK%    0.724435 -0.007973  0.572346  ... -0.749303  0.488211  0.951933   \n",
       "Shots/GP   0.765698  0.015327  0.776430  ... -0.675471  0.490010  0.580131   \n",
       "SA/GP     -0.720100 -0.032142 -0.586858  ...  0.784631 -0.446398 -0.658733   \n",
       "FOW%       0.484475  0.069250  0.390837  ... -0.506981  0.406084  0.598692   \n",
       "W%         0.993350  0.283072  0.897788  ... -0.913208  0.778599  0.625392   \n",
       "Goal_Diff  0.992458  0.179995  0.909907  ... -0.924698  0.763462  0.641479   \n",
       "\n",
       "            Net PP%   Net PK%  Shots/GP     SA/GP      FOW%        W%  \\\n",
       "GP              NaN       NaN       NaN       NaN       NaN       NaN   \n",
       "W          0.810834  0.704231  0.747118 -0.704699  0.479678  1.000000   \n",
       "L         -0.766797 -0.744204 -0.752237  0.727947 -0.533907 -0.981582   \n",
       "OT        -0.526610 -0.099349 -0.276073  0.176089  0.055919 -0.485177   \n",
       "P          0.793394  0.726727  0.753040 -0.719148  0.507995  0.995765   \n",
       "P%         0.793564  0.726330  0.752980 -0.719090  0.507198  0.995815   \n",
       "RW         0.782767  0.735521  0.767749 -0.750197  0.472893  0.986172   \n",
       "ROW        0.800863  0.724435  0.765698 -0.720100  0.484475  0.993350   \n",
       "S/O Win    0.267676 -0.007973  0.015327 -0.032142  0.069250  0.283072   \n",
       "GF         0.820726  0.572346  0.776430 -0.586858  0.390837  0.897788   \n",
       "GA        -0.635689 -0.750992 -0.674414  0.785205 -0.508598 -0.912682   \n",
       "GF/GP      0.821597  0.574224  0.778015 -0.587413  0.391701  0.898040   \n",
       "GA/GP     -0.635606 -0.749303 -0.675471  0.784631 -0.506981 -0.913208   \n",
       "PP%        0.981742  0.488211  0.490010 -0.446398  0.406084  0.778599   \n",
       "PK%        0.439943  0.951933  0.580131 -0.658733  0.598692  0.625392   \n",
       "Net PP%    1.000000  0.491705  0.500846 -0.436514  0.388051  0.810834   \n",
       "Net PK%    0.491705  1.000000  0.663589 -0.749737  0.650819  0.704231   \n",
       "Shots/GP   0.500846  0.663589  1.000000 -0.665743  0.441290  0.747118   \n",
       "SA/GP     -0.436514 -0.749737 -0.665743  1.000000 -0.433589 -0.704699   \n",
       "FOW%       0.388051  0.650819  0.441290 -0.433589  1.000000  0.479678   \n",
       "W%         0.810834  0.704231  0.747118 -0.704699  0.479678  1.000000   \n",
       "Goal_Diff  0.789591  0.725296  0.788435 -0.752298  0.492880  0.987087   \n",
       "\n",
       "           Goal_Diff  \n",
       "GP               NaN  \n",
       "W           0.987087  \n",
       "L          -0.980444  \n",
       "OT         -0.426104  \n",
       "P           0.988459  \n",
       "P%          0.988489  \n",
       "RW          0.993010  \n",
       "ROW         0.992458  \n",
       "S/O Win     0.179995  \n",
       "GF          0.909907  \n",
       "GA         -0.924277  \n",
       "GF/GP       0.910155  \n",
       "GA/GP      -0.924698  \n",
       "PP%         0.763462  \n",
       "PK%         0.641479  \n",
       "Net PP%     0.789591  \n",
       "Net PK%     0.725296  \n",
       "Shots/GP    0.788435  \n",
       "SA/GP      -0.752298  \n",
       "FOW%        0.492880  \n",
       "W%          0.987087  \n",
       "Goal_Diff   1.000000  \n",
       "\n",
       "[22 rows x 22 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "summed_team_stats.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "6e7318ea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GP                NaN\n",
       "W            1.000000\n",
       "L           -0.981582\n",
       "OT          -0.485177\n",
       "P            0.995765\n",
       "P%           0.995815\n",
       "RW           0.986172\n",
       "ROW          0.993350\n",
       "S/O Win      0.283072\n",
       "GF           0.897788\n",
       "GA          -0.912682\n",
       "GF/GP        0.898040\n",
       "GA/GP       -0.913208\n",
       "PP%          0.778599\n",
       "PK%          0.625392\n",
       "Net PP%      0.810834\n",
       "Net PK%      0.704231\n",
       "Shots/GP     0.747118\n",
       "SA/GP       -0.704699\n",
       "FOW%         0.479678\n",
       "W%           1.000000\n",
       "Goal_Diff    0.987087\n",
       "Name: W, dtype: float64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "summed_team_stats[summed_team_stats.columns[0:]].corr()['W']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "ca48d3f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "players = pd.read_excel(\"/Users/jacksonlyons/Documents/Coursework/Spring '24/DSC-630/Final Project/Data/Players.xlsx\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "4fa3b785",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Player</th>\n",
       "      <th>S/C</th>\n",
       "      <th>Pos</th>\n",
       "      <th>GP</th>\n",
       "      <th>G</th>\n",
       "      <th>A</th>\n",
       "      <th>P</th>\n",
       "      <th>+/-</th>\n",
       "      <th>PIM</th>\n",
       "      <th>P/GP</th>\n",
       "      <th>...</th>\n",
       "      <th>PPG</th>\n",
       "      <th>PPP</th>\n",
       "      <th>SHG</th>\n",
       "      <th>SHP</th>\n",
       "      <th>OTG</th>\n",
       "      <th>GWG</th>\n",
       "      <th>S</th>\n",
       "      <th>S%</th>\n",
       "      <th>TOI/GP</th>\n",
       "      <th>FOW%</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Connor McDavid</td>\n",
       "      <td>L</td>\n",
       "      <td>C</td>\n",
       "      <td>35</td>\n",
       "      <td>20</td>\n",
       "      <td>50</td>\n",
       "      <td>70</td>\n",
       "      <td>18</td>\n",
       "      <td>12</td>\n",
       "      <td>2.00</td>\n",
       "      <td>...</td>\n",
       "      <td>8</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>131</td>\n",
       "      <td>15.3</td>\n",
       "      <td>23:10</td>\n",
       "      <td>49.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Leon Draisaitl</td>\n",
       "      <td>L</td>\n",
       "      <td>C</td>\n",
       "      <td>35</td>\n",
       "      <td>26</td>\n",
       "      <td>40</td>\n",
       "      <td>66</td>\n",
       "      <td>6</td>\n",
       "      <td>22</td>\n",
       "      <td>1.89</td>\n",
       "      <td>...</td>\n",
       "      <td>13</td>\n",
       "      <td>26</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>119</td>\n",
       "      <td>21.9</td>\n",
       "      <td>21:51</td>\n",
       "      <td>52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Matthew Tkachuk</td>\n",
       "      <td>L</td>\n",
       "      <td>L</td>\n",
       "      <td>40</td>\n",
       "      <td>19</td>\n",
       "      <td>28</td>\n",
       "      <td>47</td>\n",
       "      <td>9</td>\n",
       "      <td>111</td>\n",
       "      <td>1.18</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>127</td>\n",
       "      <td>15</td>\n",
       "      <td>19:57</td>\n",
       "      <td>33.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Mikko Rantanen</td>\n",
       "      <td>L</td>\n",
       "      <td>R</td>\n",
       "      <td>34</td>\n",
       "      <td>14</td>\n",
       "      <td>32</td>\n",
       "      <td>46</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>1.35</td>\n",
       "      <td>...</td>\n",
       "      <td>3</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>97</td>\n",
       "      <td>14.4</td>\n",
       "      <td>21:02</td>\n",
       "      <td>53.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Cale Makar</td>\n",
       "      <td>R</td>\n",
       "      <td>D</td>\n",
       "      <td>33</td>\n",
       "      <td>12</td>\n",
       "      <td>34</td>\n",
       "      <td>46</td>\n",
       "      <td>14</td>\n",
       "      <td>16</td>\n",
       "      <td>1.39</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>18</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>113</td>\n",
       "      <td>10.6</td>\n",
       "      <td>26:31</td>\n",
       "      <td>--</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Player S/C Pos  GP   G   A   P  +/-  PIM  P/GP  ...  PPG  PPP  \\\n",
       "0   Connor McDavid   L   C  35  20  50  70   18   12  2.00  ...    8   30   \n",
       "1   Leon Draisaitl   L   C  35  26  40  66    6   22  1.89  ...   13   26   \n",
       "2  Matthew Tkachuk   L   L  40  19  28  47    9  111  1.18  ...    5   16   \n",
       "3   Mikko Rantanen   L   R  34  14  32  46   12   12  1.35  ...    3   17   \n",
       "4       Cale Makar   R   D  33  12  34  46   14   16  1.39  ...    4   18   \n",
       "\n",
       "   SHG  SHP  OTG  GWG    S    S%  TOI/GP  FOW%  \n",
       "0    1    2    1    1  131  15.3   23:10  49.7  \n",
       "1    1    1    0    3  119  21.9   21:51    52  \n",
       "2    0    0    3    5  127    15   19:57  33.3  \n",
       "3    0    0    0    1   97  14.4   21:02  53.9  \n",
       "4    1    2    1    1  113  10.6   26:31    --  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "players.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "a85199a5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Player     object\n",
       "S/C        object\n",
       "Pos        object\n",
       "GP          int64\n",
       "G           int64\n",
       "A           int64\n",
       "P           int64\n",
       "+/-         int64\n",
       "PIM         int64\n",
       "P/GP      float64\n",
       "EVG         int64\n",
       "EVP         int64\n",
       "PPG         int64\n",
       "PPP         int64\n",
       "SHG         int64\n",
       "SHP         int64\n",
       "OTG         int64\n",
       "GWG         int64\n",
       "S           int64\n",
       "S%         object\n",
       "TOI/GP     object\n",
       "FOW%       object\n",
       "dtype: object"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "players.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "ede745be",
   "metadata": {},
   "outputs": [],
   "source": [
    "players['FOW%'] = players['FOW%'].replace('--', np.nan)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "d5809177",
   "metadata": {},
   "outputs": [],
   "source": [
    "players['FOW%'] = pd.to_numeric(players['FOW%'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "cf28b990",
   "metadata": {},
   "outputs": [],
   "source": [
    "players['S%'] = players['S%'].replace('--', np.nan)\n",
    "players['S%'] = pd.to_numeric(players['S%'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "190538e3",
   "metadata": {},
   "outputs": [],
   "source": [
    "temp = players['TOI/GP'].str.split(pat=\":\", expand=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "b62e6ef9",
   "metadata": {},
   "outputs": [],
   "source": [
    "temp[0] = pd.to_numeric(temp[0])\n",
    "temp[1] = pd.to_numeric(temp[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "0f6ad289",
   "metadata": {},
   "outputs": [],
   "source": [
    "time = temp[0] + temp[1] / 60"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "0e08957e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      23.166667\n",
       "1      21.850000\n",
       "2      19.950000\n",
       "3      21.033333\n",
       "4      26.516667\n",
       "         ...    \n",
       "549     4.150000\n",
       "550     1.833333\n",
       "551    17.416667\n",
       "552     9.516667\n",
       "553     5.500000\n",
       "Length: 554, dtype: float64"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "9ea030c6",
   "metadata": {},
   "outputs": [],
   "source": [
    "players['TOI/GP'] = time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "c2163877",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Player</th>\n",
       "      <th>S/C</th>\n",
       "      <th>Pos</th>\n",
       "      <th>GP</th>\n",
       "      <th>G</th>\n",
       "      <th>A</th>\n",
       "      <th>P</th>\n",
       "      <th>+/-</th>\n",
       "      <th>PIM</th>\n",
       "      <th>P/GP</th>\n",
       "      <th>...</th>\n",
       "      <th>PPG</th>\n",
       "      <th>PPP</th>\n",
       "      <th>SHG</th>\n",
       "      <th>SHP</th>\n",
       "      <th>OTG</th>\n",
       "      <th>GWG</th>\n",
       "      <th>S</th>\n",
       "      <th>S%</th>\n",
       "      <th>TOI/GP</th>\n",
       "      <th>FOW%</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Connor McDavid</td>\n",
       "      <td>L</td>\n",
       "      <td>C</td>\n",
       "      <td>35</td>\n",
       "      <td>20</td>\n",
       "      <td>50</td>\n",
       "      <td>70</td>\n",
       "      <td>18</td>\n",
       "      <td>12</td>\n",
       "      <td>2.00</td>\n",
       "      <td>...</td>\n",
       "      <td>8</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>131</td>\n",
       "      <td>15.3</td>\n",
       "      <td>23.166667</td>\n",
       "      <td>49.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Leon Draisaitl</td>\n",
       "      <td>L</td>\n",
       "      <td>C</td>\n",
       "      <td>35</td>\n",
       "      <td>26</td>\n",
       "      <td>40</td>\n",
       "      <td>66</td>\n",
       "      <td>6</td>\n",
       "      <td>22</td>\n",
       "      <td>1.89</td>\n",
       "      <td>...</td>\n",
       "      <td>13</td>\n",
       "      <td>26</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>119</td>\n",
       "      <td>21.9</td>\n",
       "      <td>21.850000</td>\n",
       "      <td>52.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Matthew Tkachuk</td>\n",
       "      <td>L</td>\n",
       "      <td>L</td>\n",
       "      <td>40</td>\n",
       "      <td>19</td>\n",
       "      <td>28</td>\n",
       "      <td>47</td>\n",
       "      <td>9</td>\n",
       "      <td>111</td>\n",
       "      <td>1.18</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>127</td>\n",
       "      <td>15.0</td>\n",
       "      <td>19.950000</td>\n",
       "      <td>33.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Mikko Rantanen</td>\n",
       "      <td>L</td>\n",
       "      <td>R</td>\n",
       "      <td>34</td>\n",
       "      <td>14</td>\n",
       "      <td>32</td>\n",
       "      <td>46</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>1.35</td>\n",
       "      <td>...</td>\n",
       "      <td>3</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>97</td>\n",
       "      <td>14.4</td>\n",
       "      <td>21.033333</td>\n",
       "      <td>53.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Cale Makar</td>\n",
       "      <td>R</td>\n",
       "      <td>D</td>\n",
       "      <td>33</td>\n",
       "      <td>12</td>\n",
       "      <td>34</td>\n",
       "      <td>46</td>\n",
       "      <td>14</td>\n",
       "      <td>16</td>\n",
       "      <td>1.39</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>18</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>113</td>\n",
       "      <td>10.6</td>\n",
       "      <td>26.516667</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Player S/C Pos  GP   G   A   P  +/-  PIM  P/GP  ...  PPG  PPP  \\\n",
       "0   Connor McDavid   L   C  35  20  50  70   18   12  2.00  ...    8   30   \n",
       "1   Leon Draisaitl   L   C  35  26  40  66    6   22  1.89  ...   13   26   \n",
       "2  Matthew Tkachuk   L   L  40  19  28  47    9  111  1.18  ...    5   16   \n",
       "3   Mikko Rantanen   L   R  34  14  32  46   12   12  1.35  ...    3   17   \n",
       "4       Cale Makar   R   D  33  12  34  46   14   16  1.39  ...    4   18   \n",
       "\n",
       "   SHG  SHP  OTG  GWG    S    S%     TOI/GP  FOW%  \n",
       "0    1    2    1    1  131  15.3  23.166667  49.7  \n",
       "1    1    1    0    3  119  21.9  21.850000  52.0  \n",
       "2    0    0    3    5  127  15.0  19.950000  33.3  \n",
       "3    0    0    0    1   97  14.4  21.033333  53.9  \n",
       "4    1    2    1    1  113  10.6  26.516667   NaN  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "players.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "a505619c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GP        0.634354\n",
       "G         1.000000\n",
       "A         0.716138\n",
       "P         0.891679\n",
       "+/-       0.307385\n",
       "PIM       0.397279\n",
       "P/GP      0.705404\n",
       "EVG       0.948410\n",
       "EVP       0.871786\n",
       "PPG       0.835329\n",
       "PPP       0.753459\n",
       "SHG       0.365745\n",
       "SHP       0.373759\n",
       "OTG       0.410533\n",
       "GWG       0.712526\n",
       "S         0.852107\n",
       "S%        0.544502\n",
       "TOI/GP    0.342849\n",
       "FOW%      0.032035\n",
       "Name: G, dtype: float64"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "players.corr()['G']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "1c3c6096",
   "metadata": {},
   "outputs": [],
   "source": [
    "goals_for_against = pd.read_excel(\"/Users/jacksonlyons/Documents/Coursework/Spring '24/DSC-630/Final Project/Data/Goals_for_against.xlsx\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "54022b3e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Player           object\n",
       "Pos              object\n",
       "GP                int64\n",
       "G                 int64\n",
       "A                 int64\n",
       "P                 int64\n",
       "PP TOI/GP        object\n",
       "On-Ice PP GF     object\n",
       "On-Ice SH GA     object\n",
       "SH TOI/GP        object\n",
       "On-Ice SH GF     object\n",
       "On-Ice PP GA     object\n",
       "EV TOI/GP        object\n",
       "On-Ice EV GF     object\n",
       "On-Ice EV GA     object\n",
       "On-Ice EV GD     object\n",
       "On-Ice EV GF%    object\n",
       "dtype: object"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "goals_for_against.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "59974d8f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Player</th>\n",
       "      <th>Pos</th>\n",
       "      <th>GP</th>\n",
       "      <th>G</th>\n",
       "      <th>A</th>\n",
       "      <th>P</th>\n",
       "      <th>PP TOI/GP</th>\n",
       "      <th>On-Ice PP GF</th>\n",
       "      <th>On-Ice SH GA</th>\n",
       "      <th>SH TOI/GP</th>\n",
       "      <th>On-Ice SH GF</th>\n",
       "      <th>On-Ice PP GA</th>\n",
       "      <th>EV TOI/GP</th>\n",
       "      <th>On-Ice EV GF</th>\n",
       "      <th>On-Ice EV GA</th>\n",
       "      <th>On-Ice EV GD</th>\n",
       "      <th>On-Ice EV GF%</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Mark Friedman</td>\n",
       "      <td>D</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0:00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0:32</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>10:23</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Brock Boeser</td>\n",
       "      <td>R</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>8</td>\n",
       "      <td>3:08</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0:02</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>17:18</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Kevin Stenlund</td>\n",
       "      <td>C</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0:09</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2:17</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>10:52</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Niko Mikkola</td>\n",
       "      <td>D</td>\n",
       "      <td>27</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>0:01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1:30</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>14:50</td>\n",
       "      <td>18</td>\n",
       "      <td>15</td>\n",
       "      <td>3</td>\n",
       "      <td>54.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Trevor Moore</td>\n",
       "      <td>L</td>\n",
       "      <td>18</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "      <td>1:36</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1:01</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>15:32</td>\n",
       "      <td>14</td>\n",
       "      <td>11</td>\n",
       "      <td>3</td>\n",
       "      <td>56</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Player Pos  GP  G  A  P PP TOI/GP On-Ice PP GF On-Ice SH GA  \\\n",
       "0   Mark Friedman   D   6  1  0  1      0:00            0            0   \n",
       "1    Brock Boeser   R   8  5  3  8      3:08            3            0   \n",
       "2  Kevin Stenlund   C  13  1  1  2      0:09            0            0   \n",
       "3    Niko Mikkola   D  27  1  4  5      0:01            0            0   \n",
       "4    Trevor Moore   L  18  4  5  9      1:36            1            2   \n",
       "\n",
       "  SH TOI/GP On-Ice SH GF On-Ice PP GA EV TOI/GP On-Ice EV GF On-Ice EV GA  \\\n",
       "0      0:32            0            0     10:23            4            1   \n",
       "1      0:02            0            0     17:18            9            6   \n",
       "2      2:17            0            5     10:52            3            0   \n",
       "3      1:30            1            3     14:50           18           15   \n",
       "4      1:01            1            8     15:32           14           11   \n",
       "\n",
       "  On-Ice EV GD On-Ice EV GF%  \n",
       "0            3            80  \n",
       "1            3            60  \n",
       "2            3           100  \n",
       "3            3          54.6  \n",
       "4            3            56  "
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "goals_for_against.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "44512981",
   "metadata": {},
   "outputs": [],
   "source": [
    "goals_for_against['On-Ice PP GF']= goals_for_against['On-Ice PP GF'].replace('--', np.nan)\n",
    "goals_for_against['On-Ice PP GF'] = pd.to_numeric(goals_for_against['On-Ice PP GF'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "59eff91b",
   "metadata": {},
   "outputs": [],
   "source": [
    "goals_for_against['On-Ice SH GA']= goals_for_against['On-Ice SH GA'].replace('--', np.nan)\n",
    "goals_for_against['On-Ice SH GA'] = pd.to_numeric(goals_for_against['On-Ice SH GA'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "5e5c04d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "goals_for_against['On-Ice SH GF']= goals_for_against['On-Ice SH GF'].replace('--', np.nan)\n",
    "goals_for_against['On-Ice SH GF'] = pd.to_numeric(goals_for_against['On-Ice SH GF'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "a52f077e",
   "metadata": {},
   "outputs": [],
   "source": [
    "goals_for_against['On-Ice PP GA']= goals_for_against['On-Ice PP GA'].replace('--', np.nan)\n",
    "goals_for_against['On-Ice PP GA'] = pd.to_numeric(goals_for_against['On-Ice PP GA'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "1a8f2c70",
   "metadata": {},
   "outputs": [],
   "source": [
    "goals_for_against['On-Ice EV GF']= goals_for_against['On-Ice EV GF'].replace('--', np.nan)\n",
    "goals_for_against['On-Ice EV GF'] = pd.to_numeric(goals_for_against['On-Ice EV GF'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "46859324",
   "metadata": {},
   "outputs": [],
   "source": [
    "goals_for_against['On-Ice EV GD']= goals_for_against['On-Ice EV GD'].replace('--', np.nan)\n",
    "goals_for_against['On-Ice EV GD'] = pd.to_numeric(goals_for_against['On-Ice EV GD'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "1e3f45e6",
   "metadata": {},
   "outputs": [],
   "source": [
    "goals_for_against['On-Ice EV GF%']= goals_for_against['On-Ice EV GF%'].replace('--', np.nan)\n",
    "goals_for_against['On-Ice EV GF%'] = pd.to_numeric(goals_for_against['On-Ice EV GF%'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "050ff2e9",
   "metadata": {},
   "outputs": [],
   "source": [
    "goals_for_against['On-Ice EV GA']= goals_for_against['On-Ice EV GA'].replace('--', np.nan)\n",
    "goals_for_against['On-Ice EV GA'] = pd.to_numeric(goals_for_against['On-Ice EV GA'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "58a41672",
   "metadata": {},
   "outputs": [],
   "source": [
    "temp = goals_for_against['PP TOI/GP'].str.split(pat=\":\", expand=True)\n",
    "temp[0] = pd.to_numeric(temp[0])\n",
    "temp[1] = pd.to_numeric(temp[1])\n",
    "time = temp[0] + temp[1] / 60\n",
    "goals_for_against['PP TOI/GP'] = time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "e8c5aa76",
   "metadata": {},
   "outputs": [],
   "source": [
    "temp = goals_for_against['SH TOI/GP'].str.split(pat=\":\", expand=True)\n",
    "temp[0] = pd.to_numeric(temp[0])\n",
    "temp[1] = pd.to_numeric(temp[1])\n",
    "time = temp[0] + temp[1] / 60\n",
    "goals_for_against['SH TOI/GP'] = time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "ddf63844",
   "metadata": {},
   "outputs": [],
   "source": [
    "temp = goals_for_against['EV TOI/GP'].str.split(pat=\":\", expand=True)\n",
    "temp[0] = pd.to_numeric(temp[0])\n",
    "temp[1] = pd.to_numeric(temp[1])\n",
    "time = temp[0] + temp[1] / 60\n",
    "goals_for_against['EV TOI/GP'] = time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "d02a661d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Player            object\n",
       "Pos               object\n",
       "GP                 int64\n",
       "G                  int64\n",
       "A                  int64\n",
       "P                  int64\n",
       "PP TOI/GP        float64\n",
       "On-Ice PP GF     float64\n",
       "On-Ice SH GA     float64\n",
       "SH TOI/GP        float64\n",
       "On-Ice SH GF     float64\n",
       "On-Ice PP GA     float64\n",
       "EV TOI/GP        float64\n",
       "On-Ice EV GF     float64\n",
       "On-Ice EV GA     float64\n",
       "On-Ice EV GD     float64\n",
       "On-Ice EV GF%    float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "goals_for_against.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "5cf58f62",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Player</th>\n",
       "      <th>Pos</th>\n",
       "      <th>GP</th>\n",
       "      <th>G</th>\n",
       "      <th>A</th>\n",
       "      <th>P</th>\n",
       "      <th>PP TOI/GP</th>\n",
       "      <th>On-Ice PP GF</th>\n",
       "      <th>On-Ice SH GA</th>\n",
       "      <th>SH TOI/GP</th>\n",
       "      <th>On-Ice SH GF</th>\n",
       "      <th>On-Ice PP GA</th>\n",
       "      <th>EV TOI/GP</th>\n",
       "      <th>On-Ice EV GF</th>\n",
       "      <th>On-Ice EV GA</th>\n",
       "      <th>On-Ice EV GD</th>\n",
       "      <th>On-Ice EV GF%</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Mark Friedman</td>\n",
       "      <td>D</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.533333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10.383333</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>80.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Brock Boeser</td>\n",
       "      <td>R</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>8</td>\n",
       "      <td>3.133333</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.033333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>17.300000</td>\n",
       "      <td>9.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>60.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Kevin Stenlund</td>\n",
       "      <td>C</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0.150000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.283333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>10.866667</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Niko Mikkola</td>\n",
       "      <td>D</td>\n",
       "      <td>27</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>0.016667</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.500000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>14.833333</td>\n",
       "      <td>18.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>54.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Trevor Moore</td>\n",
       "      <td>L</td>\n",
       "      <td>18</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "      <td>1.600000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.016667</td>\n",
       "      <td>1.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>15.533333</td>\n",
       "      <td>14.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>56.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Player Pos  GP  G  A  P  PP TOI/GP  On-Ice PP GF  On-Ice SH GA  \\\n",
       "0   Mark Friedman   D   6  1  0  1   0.000000           0.0           0.0   \n",
       "1    Brock Boeser   R   8  5  3  8   3.133333           3.0           0.0   \n",
       "2  Kevin Stenlund   C  13  1  1  2   0.150000           0.0           0.0   \n",
       "3    Niko Mikkola   D  27  1  4  5   0.016667           0.0           0.0   \n",
       "4    Trevor Moore   L  18  4  5  9   1.600000           1.0           2.0   \n",
       "\n",
       "   SH TOI/GP  On-Ice SH GF  On-Ice PP GA  EV TOI/GP  On-Ice EV GF  \\\n",
       "0   0.533333           0.0           0.0  10.383333           4.0   \n",
       "1   0.033333           0.0           0.0  17.300000           9.0   \n",
       "2   2.283333           0.0           5.0  10.866667           3.0   \n",
       "3   1.500000           1.0           3.0  14.833333          18.0   \n",
       "4   1.016667           1.0           8.0  15.533333          14.0   \n",
       "\n",
       "   On-Ice EV GA  On-Ice EV GD  On-Ice EV GF%  \n",
       "0           1.0           3.0           80.0  \n",
       "1           6.0           3.0           60.0  \n",
       "2           0.0           3.0          100.0  \n",
       "3          15.0           3.0           54.6  \n",
       "4          11.0           3.0           56.0  "
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "goals_for_against.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "eb99b703",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GP               0.634354\n",
       "G                1.000000\n",
       "A                0.716138\n",
       "P                0.891679\n",
       "PP TOI/GP        0.529593\n",
       "On-Ice PP GF     0.785674\n",
       "On-Ice SH GA     0.532775\n",
       "SH TOI/GP       -0.036332\n",
       "On-Ice SH GF     0.286684\n",
       "On-Ice PP GA     0.145757\n",
       "EV TOI/GP        0.261692\n",
       "On-Ice EV GF     0.729597\n",
       "On-Ice EV GA     0.657138\n",
       "On-Ice EV GD     0.350402\n",
       "On-Ice EV GF%    0.225329\n",
       "Name: G, dtype: float64"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "goals_for_against.corr()['G']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "2beeb4c5",
   "metadata": {},
   "outputs": [],
   "source": [
    "regression = LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "7222730b",
   "metadata": {},
   "outputs": [],
   "source": [
    "features = summed_team_stats['Goal_Diff'].array.reshape(-1, 1)\n",
    "target = summed_team_stats['W']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "00cbd06d",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "9b7efee3",
   "metadata": {},
   "outputs": [],
   "source": [
    "wins_model = regression.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "17714256",
   "metadata": {},
   "outputs": [],
   "source": [
    "pred = wins_model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "eb1e76bf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.17436813])"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wins_model.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "4ff810b8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "123.18475396589668"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wins_model.intercept_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "fd100ff2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(summed_team_stats['Goal_Diff'], target,color='g')\n",
    "plt.plot(features, wins_model.predict(features),color='k')\n",
    "plt.xlabel(\"Goal Differential\")\n",
    "plt.ylabel(\"Total Wins (2021-2024 Seasons)\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "066f7a00",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8003073811124732"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "metrics.r2_score(pred, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "c300139d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "123.0"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "summed_team_stats['W'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "94bbbe7c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5.9834424464847915"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "math.sqrt(metrics.mean_squared_error(y_test, pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "9ed17c01",
   "metadata": {},
   "outputs": [],
   "source": [
    "features = goals_for_against.drop(columns=['G', 'A', 'P', 'Player', 'Pos'])\n",
    "target = goals_for_against['G']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "ab6f3529",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['GP', 'PP TOI/GP', 'On-Ice PP GF', 'On-Ice SH GA', 'SH TOI/GP',\n",
       "       'On-Ice SH GF', 'On-Ice PP GA', 'EV TOI/GP', 'On-Ice EV GF',\n",
       "       'On-Ice EV GA', 'On-Ice EV GD', 'On-Ice EV GF%'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "features.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "92d6c9f5",
   "metadata": {},
   "outputs": [],
   "source": [
    "tree_regressor = DecisionTreeRegressor()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "3b481544",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(features, target)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "664a0733",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.24198581, 0.64824946, 0.66451589, 0.62490145, 0.65898182,\n",
       "       0.43135372, 0.38381965, 0.26422831, 0.38368164, 0.73115472])"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cross_val_score(tree_regressor, features, target, cv=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "1cae8daf",
   "metadata": {},
   "outputs": [],
   "source": [
    "bagging_goals_model = BaggingRegressor(n_estimators=10, random_state=0).fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "620f3c88",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6404487697328654"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "player_goals_model.score(X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "94a057ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "pred = player_goals_model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "964b5176",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.2799776984631692"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "math.sqrt(metrics.mean_squared_error(pred, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "1abc57e5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Player', 'S/C', 'Pos', 'GP', 'G', 'A', 'P', '+/-', 'PIM', 'P/GP',\n",
       "       'EVG', 'EVP', 'PPG', 'PPP', 'SHG', 'SHP', 'OTG', 'GWG', 'S', 'S%',\n",
       "       'TOI/GP', 'FOW%'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "players.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "c3182e41",
   "metadata": {},
   "outputs": [],
   "source": [
    "features = players.drop(columns=['G', 'A', 'P', 'Player', 'Pos', 'S/C'])\n",
    "target = players['G']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "ccffe62d",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(features, target)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "5b1c2884",
   "metadata": {},
   "outputs": [],
   "source": [
    "player_goals_model = BaggingRegressor(n_estimators=10, random_state=0).fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "95af8a29",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7824653861686515"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "player_goals_model.score(X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "a795eebf",
   "metadata": {},
   "outputs": [],
   "source": [
    "combined_player_stats = pd.merge(goals_for_against, players, on='Player')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "3fb0a7e0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Player</th>\n",
       "      <th>Pos_x</th>\n",
       "      <th>GP_x</th>\n",
       "      <th>G_x</th>\n",
       "      <th>A_x</th>\n",
       "      <th>P_x</th>\n",
       "      <th>PP TOI/GP</th>\n",
       "      <th>On-Ice PP GF</th>\n",
       "      <th>On-Ice SH GA</th>\n",
       "      <th>SH TOI/GP</th>\n",
       "      <th>...</th>\n",
       "      <th>PPG</th>\n",
       "      <th>PPP</th>\n",
       "      <th>SHG</th>\n",
       "      <th>SHP</th>\n",
       "      <th>OTG</th>\n",
       "      <th>GWG</th>\n",
       "      <th>S</th>\n",
       "      <th>S%</th>\n",
       "      <th>TOI/GP</th>\n",
       "      <th>FOW%</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Mark Friedman</td>\n",
       "      <td>D</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.533333</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>14.3</td>\n",
       "      <td>10.916667</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Brock Boeser</td>\n",
       "      <td>R</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>8</td>\n",
       "      <td>3.133333</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.033333</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>18</td>\n",
       "      <td>27.8</td>\n",
       "      <td>20.466667</td>\n",
       "      <td>50.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Kevin Stenlund</td>\n",
       "      <td>C</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0.150000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.283333</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>6.7</td>\n",
       "      <td>13.300000</td>\n",
       "      <td>45.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Niko Mikkola</td>\n",
       "      <td>D</td>\n",
       "      <td>27</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>0.016667</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.500000</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>21</td>\n",
       "      <td>4.8</td>\n",
       "      <td>16.366667</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Trevor Moore</td>\n",
       "      <td>L</td>\n",
       "      <td>18</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "      <td>1.600000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.016667</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>56</td>\n",
       "      <td>7.1</td>\n",
       "      <td>18.150000</td>\n",
       "      <td>37.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 38 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           Player Pos_x  GP_x  G_x  A_x  P_x  PP TOI/GP  On-Ice PP GF  \\\n",
       "0   Mark Friedman     D     6    1    0    1   0.000000           0.0   \n",
       "1    Brock Boeser     R     8    5    3    8   3.133333           3.0   \n",
       "2  Kevin Stenlund     C    13    1    1    2   0.150000           0.0   \n",
       "3    Niko Mikkola     D    27    1    4    5   0.016667           0.0   \n",
       "4    Trevor Moore     L    18    4    5    9   1.600000           1.0   \n",
       "\n",
       "   On-Ice SH GA  SH TOI/GP  ...  PPG  PPP  SHG  SHP  OTG  GWG   S    S%  \\\n",
       "0           0.0   0.533333  ...    0    0    0    0    0    0   7  14.3   \n",
       "1           0.0   0.033333  ...    1    1    0    0    0    1  18  27.8   \n",
       "2           0.0   2.283333  ...    0    0    0    0    0    0  15   6.7   \n",
       "3           0.0   1.500000  ...    0    0    0    0    0    0  21   4.8   \n",
       "4           2.0   1.016667  ...    1    1    0    0    1    2  56   7.1   \n",
       "\n",
       "      TOI/GP  FOW%  \n",
       "0  10.916667   NaN  \n",
       "1  20.466667  50.0  \n",
       "2  13.300000  45.6  \n",
       "3  16.366667   NaN  \n",
       "4  18.150000  37.5  \n",
       "\n",
       "[5 rows x 38 columns]"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined_player_stats.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "577501e7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Player', 'Pos_x', 'GP_x', 'G_x', 'A_x', 'P_x', 'PP TOI/GP',\n",
       "       'On-Ice PP GF', 'On-Ice SH GA', 'SH TOI/GP', 'On-Ice SH GF',\n",
       "       'On-Ice PP GA', 'EV TOI/GP', 'On-Ice EV GF', 'On-Ice EV GA',\n",
       "       'On-Ice EV GD', 'On-Ice EV GF%', 'S/C', 'Pos_y', 'GP_y', 'G_y', 'A_y',\n",
       "       'P_y', '+/-', 'PIM', 'P/GP', 'EVG', 'EVP', 'PPG', 'PPP', 'SHG', 'SHP',\n",
       "       'OTG', 'GWG', 'S', 'S%', 'TOI/GP', 'FOW%'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined_player_stats.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "814e246a",
   "metadata": {},
   "outputs": [],
   "source": [
    "combined_player_stats = combined_player_stats.drop(columns=['Pos_y', 'GP_y', 'G_y', 'A_y', 'P_y'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "9b8a53a4",
   "metadata": {},
   "outputs": [],
   "source": [
    "combined_player_stats = combined_player_stats.rename(columns={'Pos_x': 'Pos', 'GP_x': 'GP', 'G_x': 'G', 'A_x': 'A', 'P_x': 'P'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "68c14181",
   "metadata": {},
   "outputs": [],
   "source": [
    "features = combined_player_stats.drop(columns=['G', 'A', 'P', 'Player', 'Pos', 'S/C'])\n",
    "target = combined_player_stats['G']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "9957aad1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['GP', 'PP TOI/GP', 'On-Ice PP GF', 'On-Ice SH GA', 'SH TOI/GP',\n",
       "       'On-Ice SH GF', 'On-Ice PP GA', 'EV TOI/GP', 'On-Ice EV GF',\n",
       "       'On-Ice EV GA', 'On-Ice EV GD', 'On-Ice EV GF%', '+/-', 'PIM', 'P/GP',\n",
       "       'EVG', 'EVP', 'PPG', 'PPP', 'SHG', 'SHP', 'OTG', 'GWG', 'S', 'S%',\n",
       "       'TOI/GP', 'FOW%'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "features.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "a2b210af",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(features, target)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "a1d0196d",
   "metadata": {},
   "outputs": [],
   "source": [
    "combined_player_goals_model = BaggingRegressor(n_estimators=10, random_state=0).fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "22f18759",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8431709983886336"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined_player_goals_model.score(X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "b8197e2d",
   "metadata": {},
   "outputs": [],
   "source": [
    "team_stats_2023 = pd.read_excel(\"/Users/jacksonlyons/Documents/Coursework/Spring '24/DSC-630/Final Project/Data/Team_Stats_2024.xlsx\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "8b8faecd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Team</th>\n",
       "      <th>Season</th>\n",
       "      <th>GP</th>\n",
       "      <th>W</th>\n",
       "      <th>L</th>\n",
       "      <th>T</th>\n",
       "      <th>OT</th>\n",
       "      <th>P</th>\n",
       "      <th>P%</th>\n",
       "      <th>RW</th>\n",
       "      <th>...</th>\n",
       "      <th>GA</th>\n",
       "      <th>GF/GP</th>\n",
       "      <th>GA/GP</th>\n",
       "      <th>PP%</th>\n",
       "      <th>PK%</th>\n",
       "      <th>Net PP%</th>\n",
       "      <th>Net PK%</th>\n",
       "      <th>Shots/GP</th>\n",
       "      <th>SA/GP</th>\n",
       "      <th>FOW%</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Boston Bruins</td>\n",
       "      <td>20222023</td>\n",
       "      <td>82</td>\n",
       "      <td>65</td>\n",
       "      <td>12</td>\n",
       "      <td>--</td>\n",
       "      <td>5</td>\n",
       "      <td>135</td>\n",
       "      <td>0.823</td>\n",
       "      <td>54</td>\n",
       "      <td>...</td>\n",
       "      <td>174</td>\n",
       "      <td>3.67</td>\n",
       "      <td>2.12</td>\n",
       "      <td>22.2</td>\n",
       "      <td>87.3</td>\n",
       "      <td>19.4</td>\n",
       "      <td>90.1</td>\n",
       "      <td>33.0</td>\n",
       "      <td>29.8</td>\n",
       "      <td>54.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Carolina Hurricanes</td>\n",
       "      <td>20222023</td>\n",
       "      <td>82</td>\n",
       "      <td>52</td>\n",
       "      <td>21</td>\n",
       "      <td>--</td>\n",
       "      <td>9</td>\n",
       "      <td>113</td>\n",
       "      <td>0.689</td>\n",
       "      <td>39</td>\n",
       "      <td>...</td>\n",
       "      <td>210</td>\n",
       "      <td>3.20</td>\n",
       "      <td>2.56</td>\n",
       "      <td>19.8</td>\n",
       "      <td>84.4</td>\n",
       "      <td>17.4</td>\n",
       "      <td>88.7</td>\n",
       "      <td>34.8</td>\n",
       "      <td>26.0</td>\n",
       "      <td>52.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>New Jersey Devils</td>\n",
       "      <td>20222023</td>\n",
       "      <td>82</td>\n",
       "      <td>52</td>\n",
       "      <td>22</td>\n",
       "      <td>--</td>\n",
       "      <td>8</td>\n",
       "      <td>112</td>\n",
       "      <td>0.683</td>\n",
       "      <td>39</td>\n",
       "      <td>...</td>\n",
       "      <td>222</td>\n",
       "      <td>3.52</td>\n",
       "      <td>2.71</td>\n",
       "      <td>21.9</td>\n",
       "      <td>82.6</td>\n",
       "      <td>18.3</td>\n",
       "      <td>86.5</td>\n",
       "      <td>34.4</td>\n",
       "      <td>28.2</td>\n",
       "      <td>51.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Vegas Golden Knights</td>\n",
       "      <td>20222023</td>\n",
       "      <td>82</td>\n",
       "      <td>51</td>\n",
       "      <td>22</td>\n",
       "      <td>--</td>\n",
       "      <td>9</td>\n",
       "      <td>111</td>\n",
       "      <td>0.677</td>\n",
       "      <td>38</td>\n",
       "      <td>...</td>\n",
       "      <td>225</td>\n",
       "      <td>3.26</td>\n",
       "      <td>2.74</td>\n",
       "      <td>20.3</td>\n",
       "      <td>77.4</td>\n",
       "      <td>18.4</td>\n",
       "      <td>82.6</td>\n",
       "      <td>31.5</td>\n",
       "      <td>30.9</td>\n",
       "      <td>52.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Toronto Maple Leafs</td>\n",
       "      <td>20222023</td>\n",
       "      <td>82</td>\n",
       "      <td>50</td>\n",
       "      <td>21</td>\n",
       "      <td>--</td>\n",
       "      <td>11</td>\n",
       "      <td>111</td>\n",
       "      <td>0.677</td>\n",
       "      <td>42</td>\n",
       "      <td>...</td>\n",
       "      <td>220</td>\n",
       "      <td>3.39</td>\n",
       "      <td>2.68</td>\n",
       "      <td>26.0</td>\n",
       "      <td>81.9</td>\n",
       "      <td>22.8</td>\n",
       "      <td>85.1</td>\n",
       "      <td>32.0</td>\n",
       "      <td>29.5</td>\n",
       "      <td>53.1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Team    Season  GP   W   L   T  OT    P     P%  RW  ...  \\\n",
       "0         Boston Bruins  20222023  82  65  12  --   5  135  0.823  54  ...   \n",
       "1   Carolina Hurricanes  20222023  82  52  21  --   9  113  0.689  39  ...   \n",
       "2     New Jersey Devils  20222023  82  52  22  --   8  112  0.683  39  ...   \n",
       "3  Vegas Golden Knights  20222023  82  51  22  --   9  111  0.677  38  ...   \n",
       "4   Toronto Maple Leafs  20222023  82  50  21  --  11  111  0.677  42  ...   \n",
       "\n",
       "    GA  GF/GP  GA/GP   PP%   PK%  Net PP%  Net PK%  Shots/GP  SA/GP  FOW%  \n",
       "0  174   3.67   2.12  22.2  87.3     19.4     90.1      33.0   29.8  54.5  \n",
       "1  210   3.20   2.56  19.8  84.4     17.4     88.7      34.8   26.0  52.9  \n",
       "2  222   3.52   2.71  21.9  82.6     18.3     86.5      34.4   28.2  51.3  \n",
       "3  225   3.26   2.74  20.3  77.4     18.4     82.6      31.5   30.9  52.3  \n",
       "4  220   3.39   2.68  26.0  81.9     22.8     85.1      32.0   29.5  53.1  \n",
       "\n",
       "[5 rows x 23 columns]"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "team_stats_2023.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "5dfa23f7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Team         object\n",
       "Season        int64\n",
       "GP            int64\n",
       "W             int64\n",
       "L             int64\n",
       "T            object\n",
       "OT            int64\n",
       "P             int64\n",
       "P%          float64\n",
       "RW            int64\n",
       "ROW           int64\n",
       "S/O Win       int64\n",
       "GF            int64\n",
       "GA            int64\n",
       "GF/GP       float64\n",
       "GA/GP       float64\n",
       "PP%         float64\n",
       "PK%         float64\n",
       "Net PP%     float64\n",
       "Net PK%     float64\n",
       "Shots/GP    float64\n",
       "SA/GP       float64\n",
       "FOW%        float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "team_stats_2023.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "ab5b0ed2",
   "metadata": {},
   "outputs": [],
   "source": [
    "team_stats_2023 = team_stats_2023.drop(columns={'T', 'Season'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "3d2b17d2",
   "metadata": {},
   "outputs": [],
   "source": [
    "team_stats_2023[\"Goal_Diff\"] = team_stats_2023['GF'] - team_stats_2023['GA']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "f701fccf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>GP</th>\n",
       "      <th>W</th>\n",
       "      <th>L</th>\n",
       "      <th>OT</th>\n",
       "      <th>P</th>\n",
       "      <th>P%</th>\n",
       "      <th>RW</th>\n",
       "      <th>ROW</th>\n",
       "      <th>S/O Win</th>\n",
       "      <th>GF</th>\n",
       "      <th>...</th>\n",
       "      <th>GF/GP</th>\n",
       "      <th>GA/GP</th>\n",
       "      <th>PP%</th>\n",
       "      <th>PK%</th>\n",
       "      <th>Net PP%</th>\n",
       "      <th>Net PK%</th>\n",
       "      <th>Shots/GP</th>\n",
       "      <th>SA/GP</th>\n",
       "      <th>FOW%</th>\n",
       "      <th>Goal_Diff</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>GP</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>W</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.948076</td>\n",
       "      <td>-0.358797</td>\n",
       "      <td>0.987812</td>\n",
       "      <td>0.987828</td>\n",
       "      <td>0.963194</td>\n",
       "      <td>0.981255</td>\n",
       "      <td>0.227028</td>\n",
       "      <td>0.780158</td>\n",
       "      <td>...</td>\n",
       "      <td>0.781114</td>\n",
       "      <td>-0.884863</td>\n",
       "      <td>0.583048</td>\n",
       "      <td>0.535827</td>\n",
       "      <td>0.650489</td>\n",
       "      <td>0.645522</td>\n",
       "      <td>0.617080</td>\n",
       "      <td>-0.663157</td>\n",
       "      <td>0.400750</td>\n",
       "      <td>0.963545</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>L</th>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.948076</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.043300</td>\n",
       "      <td>-0.986025</td>\n",
       "      <td>-0.986004</td>\n",
       "      <td>-0.940205</td>\n",
       "      <td>-0.931885</td>\n",
       "      <td>-0.207253</td>\n",
       "      <td>-0.761998</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.763368</td>\n",
       "      <td>0.902716</td>\n",
       "      <td>-0.600859</td>\n",
       "      <td>-0.611283</td>\n",
       "      <td>-0.677299</td>\n",
       "      <td>-0.714399</td>\n",
       "      <td>-0.663990</td>\n",
       "      <td>0.711795</td>\n",
       "      <td>-0.422255</td>\n",
       "      <td>-0.966306</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>OT</th>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.358797</td>\n",
       "      <td>0.043300</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.209137</td>\n",
       "      <td>-0.209247</td>\n",
       "      <td>-0.266279</td>\n",
       "      <td>-0.347433</td>\n",
       "      <td>-0.104896</td>\n",
       "      <td>-0.214328</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.213310</td>\n",
       "      <td>0.130247</td>\n",
       "      <td>-0.068071</td>\n",
       "      <td>0.110855</td>\n",
       "      <td>-0.055581</td>\n",
       "      <td>0.068904</td>\n",
       "      <td>0.010305</td>\n",
       "      <td>-0.005866</td>\n",
       "      <td>-0.019604</td>\n",
       "      <td>-0.190779</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>P</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0.987812</td>\n",
       "      <td>-0.986025</td>\n",
       "      <td>-0.209137</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.999998</td>\n",
       "      <td>0.964680</td>\n",
       "      <td>0.970069</td>\n",
       "      <td>0.220352</td>\n",
       "      <td>0.781587</td>\n",
       "      <td>...</td>\n",
       "      <td>0.782758</td>\n",
       "      <td>-0.905301</td>\n",
       "      <td>0.599475</td>\n",
       "      <td>0.579841</td>\n",
       "      <td>0.672212</td>\n",
       "      <td>0.687766</td>\n",
       "      <td>0.648198</td>\n",
       "      <td>-0.695730</td>\n",
       "      <td>0.416574</td>\n",
       "      <td>0.977638</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>P%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0.987828</td>\n",
       "      <td>-0.986004</td>\n",
       "      <td>-0.209247</td>\n",
       "      <td>0.999998</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.964673</td>\n",
       "      <td>0.970098</td>\n",
       "      <td>0.220284</td>\n",
       "      <td>0.781909</td>\n",
       "      <td>...</td>\n",
       "      <td>0.783079</td>\n",
       "      <td>-0.905069</td>\n",
       "      <td>0.599924</td>\n",
       "      <td>0.579587</td>\n",
       "      <td>0.672689</td>\n",
       "      <td>0.687463</td>\n",
       "      <td>0.648044</td>\n",
       "      <td>-0.695315</td>\n",
       "      <td>0.416672</td>\n",
       "      <td>0.977643</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RW</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0.963194</td>\n",
       "      <td>-0.940205</td>\n",
       "      <td>-0.266279</td>\n",
       "      <td>0.964680</td>\n",
       "      <td>0.964673</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.978817</td>\n",
       "      <td>0.048476</td>\n",
       "      <td>0.809454</td>\n",
       "      <td>...</td>\n",
       "      <td>0.810262</td>\n",
       "      <td>-0.879036</td>\n",
       "      <td>0.624311</td>\n",
       "      <td>0.571893</td>\n",
       "      <td>0.674162</td>\n",
       "      <td>0.670853</td>\n",
       "      <td>0.646276</td>\n",
       "      <td>-0.685615</td>\n",
       "      <td>0.435381</td>\n",
       "      <td>0.974135</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ROW</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0.981255</td>\n",
       "      <td>-0.931885</td>\n",
       "      <td>-0.347433</td>\n",
       "      <td>0.970069</td>\n",
       "      <td>0.970098</td>\n",
       "      <td>0.978817</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.035088</td>\n",
       "      <td>0.813587</td>\n",
       "      <td>...</td>\n",
       "      <td>0.814412</td>\n",
       "      <td>-0.868145</td>\n",
       "      <td>0.594579</td>\n",
       "      <td>0.558794</td>\n",
       "      <td>0.646136</td>\n",
       "      <td>0.656316</td>\n",
       "      <td>0.652148</td>\n",
       "      <td>-0.675679</td>\n",
       "      <td>0.399198</td>\n",
       "      <td>0.968978</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>S/O Win</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0.227028</td>\n",
       "      <td>-0.207253</td>\n",
       "      <td>-0.104896</td>\n",
       "      <td>0.220352</td>\n",
       "      <td>0.220284</td>\n",
       "      <td>0.048476</td>\n",
       "      <td>0.035088</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.065718</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.064930</td>\n",
       "      <td>-0.201549</td>\n",
       "      <td>0.018863</td>\n",
       "      <td>-0.045172</td>\n",
       "      <td>0.108056</td>\n",
       "      <td>0.030853</td>\n",
       "      <td>-0.095577</td>\n",
       "      <td>-0.024451</td>\n",
       "      <td>0.060864</td>\n",
       "      <td>0.100019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GF</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0.780158</td>\n",
       "      <td>-0.761998</td>\n",
       "      <td>-0.214328</td>\n",
       "      <td>0.781587</td>\n",
       "      <td>0.781909</td>\n",
       "      <td>0.809454</td>\n",
       "      <td>0.813587</td>\n",
       "      <td>-0.065718</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.999970</td>\n",
       "      <td>-0.510210</td>\n",
       "      <td>0.818886</td>\n",
       "      <td>0.225862</td>\n",
       "      <td>0.788210</td>\n",
       "      <td>0.349079</td>\n",
       "      <td>0.688334</td>\n",
       "      <td>-0.570165</td>\n",
       "      <td>0.218367</td>\n",
       "      <td>0.825804</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GA</th>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.884232</td>\n",
       "      <td>0.902108</td>\n",
       "      <td>0.130047</td>\n",
       "      <td>-0.904673</td>\n",
       "      <td>-0.904440</td>\n",
       "      <td>-0.878362</td>\n",
       "      <td>-0.867380</td>\n",
       "      <td>-0.202141</td>\n",
       "      <td>-0.508560</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.510377</td>\n",
       "      <td>0.999984</td>\n",
       "      <td>-0.349279</td>\n",
       "      <td>-0.781945</td>\n",
       "      <td>-0.458883</td>\n",
       "      <td>-0.843863</td>\n",
       "      <td>-0.511106</td>\n",
       "      <td>0.688389</td>\n",
       "      <td>-0.474971</td>\n",
       "      <td>-0.905553</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GF/GP</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0.781114</td>\n",
       "      <td>-0.763368</td>\n",
       "      <td>-0.213310</td>\n",
       "      <td>0.782758</td>\n",
       "      <td>0.783079</td>\n",
       "      <td>0.810262</td>\n",
       "      <td>0.814412</td>\n",
       "      <td>-0.064930</td>\n",
       "      <td>0.999970</td>\n",
       "      <td>...</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.512045</td>\n",
       "      <td>0.818681</td>\n",
       "      <td>0.228538</td>\n",
       "      <td>0.788560</td>\n",
       "      <td>0.351607</td>\n",
       "      <td>0.690028</td>\n",
       "      <td>-0.572251</td>\n",
       "      <td>0.221298</td>\n",
       "      <td>0.826979</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GA/GP</th>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.884863</td>\n",
       "      <td>0.902716</td>\n",
       "      <td>0.130247</td>\n",
       "      <td>-0.905301</td>\n",
       "      <td>-0.905069</td>\n",
       "      <td>-0.879036</td>\n",
       "      <td>-0.868145</td>\n",
       "      <td>-0.201549</td>\n",
       "      <td>-0.510210</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.512045</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.351203</td>\n",
       "      <td>-0.782320</td>\n",
       "      <td>-0.460364</td>\n",
       "      <td>-0.844488</td>\n",
       "      <td>-0.511086</td>\n",
       "      <td>0.689618</td>\n",
       "      <td>-0.474822</td>\n",
       "      <td>-0.906356</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PP%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0.583048</td>\n",
       "      <td>-0.600859</td>\n",
       "      <td>-0.068071</td>\n",
       "      <td>0.599475</td>\n",
       "      <td>0.599924</td>\n",
       "      <td>0.624311</td>\n",
       "      <td>0.594579</td>\n",
       "      <td>0.018863</td>\n",
       "      <td>0.818886</td>\n",
       "      <td>...</td>\n",
       "      <td>0.818681</td>\n",
       "      <td>-0.351203</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.161023</td>\n",
       "      <td>0.957534</td>\n",
       "      <td>0.282755</td>\n",
       "      <td>0.539927</td>\n",
       "      <td>-0.361903</td>\n",
       "      <td>0.261324</td>\n",
       "      <td>0.632242</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PK%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0.535827</td>\n",
       "      <td>-0.611283</td>\n",
       "      <td>0.110855</td>\n",
       "      <td>0.579841</td>\n",
       "      <td>0.579587</td>\n",
       "      <td>0.571893</td>\n",
       "      <td>0.558794</td>\n",
       "      <td>-0.045172</td>\n",
       "      <td>0.225862</td>\n",
       "      <td>...</td>\n",
       "      <td>0.228538</td>\n",
       "      <td>-0.782320</td>\n",
       "      <td>0.161023</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.226967</td>\n",
       "      <td>0.948346</td>\n",
       "      <td>0.440251</td>\n",
       "      <td>-0.531986</td>\n",
       "      <td>0.588572</td>\n",
       "      <td>0.623444</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Net PP%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0.650489</td>\n",
       "      <td>-0.677299</td>\n",
       "      <td>-0.055581</td>\n",
       "      <td>0.672212</td>\n",
       "      <td>0.672689</td>\n",
       "      <td>0.674162</td>\n",
       "      <td>0.646136</td>\n",
       "      <td>0.108056</td>\n",
       "      <td>0.788210</td>\n",
       "      <td>...</td>\n",
       "      <td>0.788560</td>\n",
       "      <td>-0.460364</td>\n",
       "      <td>0.957534</td>\n",
       "      <td>0.226967</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.346555</td>\n",
       "      <td>0.578536</td>\n",
       "      <td>-0.350387</td>\n",
       "      <td>0.248967</td>\n",
       "      <td>0.688916</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Net PK%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0.645522</td>\n",
       "      <td>-0.714399</td>\n",
       "      <td>0.068904</td>\n",
       "      <td>0.687766</td>\n",
       "      <td>0.687463</td>\n",
       "      <td>0.670853</td>\n",
       "      <td>0.656316</td>\n",
       "      <td>0.030853</td>\n",
       "      <td>0.349079</td>\n",
       "      <td>...</td>\n",
       "      <td>0.351607</td>\n",
       "      <td>-0.844488</td>\n",
       "      <td>0.282755</td>\n",
       "      <td>0.948346</td>\n",
       "      <td>0.346555</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.485092</td>\n",
       "      <td>-0.627561</td>\n",
       "      <td>0.594040</td>\n",
       "      <td>0.724709</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Shots/GP</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0.617080</td>\n",
       "      <td>-0.663990</td>\n",
       "      <td>0.010305</td>\n",
       "      <td>0.648198</td>\n",
       "      <td>0.648044</td>\n",
       "      <td>0.646276</td>\n",
       "      <td>0.652148</td>\n",
       "      <td>-0.095577</td>\n",
       "      <td>0.688334</td>\n",
       "      <td>...</td>\n",
       "      <td>0.690028</td>\n",
       "      <td>-0.511086</td>\n",
       "      <td>0.539927</td>\n",
       "      <td>0.440251</td>\n",
       "      <td>0.578536</td>\n",
       "      <td>0.485092</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.553292</td>\n",
       "      <td>0.324021</td>\n",
       "      <td>0.673912</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SA/GP</th>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.663157</td>\n",
       "      <td>0.711795</td>\n",
       "      <td>-0.005866</td>\n",
       "      <td>-0.695730</td>\n",
       "      <td>-0.695315</td>\n",
       "      <td>-0.685615</td>\n",
       "      <td>-0.675679</td>\n",
       "      <td>-0.024451</td>\n",
       "      <td>-0.570165</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.572251</td>\n",
       "      <td>0.689618</td>\n",
       "      <td>-0.361903</td>\n",
       "      <td>-0.531986</td>\n",
       "      <td>-0.350387</td>\n",
       "      <td>-0.627561</td>\n",
       "      <td>-0.553292</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.335582</td>\n",
       "      <td>-0.731806</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FOW%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0.400750</td>\n",
       "      <td>-0.422255</td>\n",
       "      <td>-0.019604</td>\n",
       "      <td>0.416574</td>\n",
       "      <td>0.416672</td>\n",
       "      <td>0.435381</td>\n",
       "      <td>0.399198</td>\n",
       "      <td>0.060864</td>\n",
       "      <td>0.218367</td>\n",
       "      <td>...</td>\n",
       "      <td>0.221298</td>\n",
       "      <td>-0.474822</td>\n",
       "      <td>0.261324</td>\n",
       "      <td>0.588572</td>\n",
       "      <td>0.248967</td>\n",
       "      <td>0.594040</td>\n",
       "      <td>0.324021</td>\n",
       "      <td>-0.335582</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.418689</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Goal_Diff</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0.963545</td>\n",
       "      <td>-0.966306</td>\n",
       "      <td>-0.190779</td>\n",
       "      <td>0.977638</td>\n",
       "      <td>0.977643</td>\n",
       "      <td>0.974135</td>\n",
       "      <td>0.968978</td>\n",
       "      <td>0.100019</td>\n",
       "      <td>0.825804</td>\n",
       "      <td>...</td>\n",
       "      <td>0.826979</td>\n",
       "      <td>-0.906356</td>\n",
       "      <td>0.632242</td>\n",
       "      <td>0.623444</td>\n",
       "      <td>0.688916</td>\n",
       "      <td>0.724709</td>\n",
       "      <td>0.673912</td>\n",
       "      <td>-0.731806</td>\n",
       "      <td>0.418689</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>21 rows Ã— 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           GP         W         L        OT         P        P%        RW  \\\n",
       "GP        NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
       "W         NaN  1.000000 -0.948076 -0.358797  0.987812  0.987828  0.963194   \n",
       "L         NaN -0.948076  1.000000  0.043300 -0.986025 -0.986004 -0.940205   \n",
       "OT        NaN -0.358797  0.043300  1.000000 -0.209137 -0.209247 -0.266279   \n",
       "P         NaN  0.987812 -0.986025 -0.209137  1.000000  0.999998  0.964680   \n",
       "P%        NaN  0.987828 -0.986004 -0.209247  0.999998  1.000000  0.964673   \n",
       "RW        NaN  0.963194 -0.940205 -0.266279  0.964680  0.964673  1.000000   \n",
       "ROW       NaN  0.981255 -0.931885 -0.347433  0.970069  0.970098  0.978817   \n",
       "S/O Win   NaN  0.227028 -0.207253 -0.104896  0.220352  0.220284  0.048476   \n",
       "GF        NaN  0.780158 -0.761998 -0.214328  0.781587  0.781909  0.809454   \n",
       "GA        NaN -0.884232  0.902108  0.130047 -0.904673 -0.904440 -0.878362   \n",
       "GF/GP     NaN  0.781114 -0.763368 -0.213310  0.782758  0.783079  0.810262   \n",
       "GA/GP     NaN -0.884863  0.902716  0.130247 -0.905301 -0.905069 -0.879036   \n",
       "PP%       NaN  0.583048 -0.600859 -0.068071  0.599475  0.599924  0.624311   \n",
       "PK%       NaN  0.535827 -0.611283  0.110855  0.579841  0.579587  0.571893   \n",
       "Net PP%   NaN  0.650489 -0.677299 -0.055581  0.672212  0.672689  0.674162   \n",
       "Net PK%   NaN  0.645522 -0.714399  0.068904  0.687766  0.687463  0.670853   \n",
       "Shots/GP  NaN  0.617080 -0.663990  0.010305  0.648198  0.648044  0.646276   \n",
       "SA/GP     NaN -0.663157  0.711795 -0.005866 -0.695730 -0.695315 -0.685615   \n",
       "FOW%      NaN  0.400750 -0.422255 -0.019604  0.416574  0.416672  0.435381   \n",
       "Goal_Diff NaN  0.963545 -0.966306 -0.190779  0.977638  0.977643  0.974135   \n",
       "\n",
       "                ROW   S/O Win        GF  ...     GF/GP     GA/GP       PP%  \\\n",
       "GP              NaN       NaN       NaN  ...       NaN       NaN       NaN   \n",
       "W          0.981255  0.227028  0.780158  ...  0.781114 -0.884863  0.583048   \n",
       "L         -0.931885 -0.207253 -0.761998  ... -0.763368  0.902716 -0.600859   \n",
       "OT        -0.347433 -0.104896 -0.214328  ... -0.213310  0.130247 -0.068071   \n",
       "P          0.970069  0.220352  0.781587  ...  0.782758 -0.905301  0.599475   \n",
       "P%         0.970098  0.220284  0.781909  ...  0.783079 -0.905069  0.599924   \n",
       "RW         0.978817  0.048476  0.809454  ...  0.810262 -0.879036  0.624311   \n",
       "ROW        1.000000  0.035088  0.813587  ...  0.814412 -0.868145  0.594579   \n",
       "S/O Win    0.035088  1.000000 -0.065718  ... -0.064930 -0.201549  0.018863   \n",
       "GF         0.813587 -0.065718  1.000000  ...  0.999970 -0.510210  0.818886   \n",
       "GA        -0.867380 -0.202141 -0.508560  ... -0.510377  0.999984 -0.349279   \n",
       "GF/GP      0.814412 -0.064930  0.999970  ...  1.000000 -0.512045  0.818681   \n",
       "GA/GP     -0.868145 -0.201549 -0.510210  ... -0.512045  1.000000 -0.351203   \n",
       "PP%        0.594579  0.018863  0.818886  ...  0.818681 -0.351203  1.000000   \n",
       "PK%        0.558794 -0.045172  0.225862  ...  0.228538 -0.782320  0.161023   \n",
       "Net PP%    0.646136  0.108056  0.788210  ...  0.788560 -0.460364  0.957534   \n",
       "Net PK%    0.656316  0.030853  0.349079  ...  0.351607 -0.844488  0.282755   \n",
       "Shots/GP   0.652148 -0.095577  0.688334  ...  0.690028 -0.511086  0.539927   \n",
       "SA/GP     -0.675679 -0.024451 -0.570165  ... -0.572251  0.689618 -0.361903   \n",
       "FOW%       0.399198  0.060864  0.218367  ...  0.221298 -0.474822  0.261324   \n",
       "Goal_Diff  0.968978  0.100019  0.825804  ...  0.826979 -0.906356  0.632242   \n",
       "\n",
       "                PK%   Net PP%   Net PK%  Shots/GP     SA/GP      FOW%  \\\n",
       "GP              NaN       NaN       NaN       NaN       NaN       NaN   \n",
       "W          0.535827  0.650489  0.645522  0.617080 -0.663157  0.400750   \n",
       "L         -0.611283 -0.677299 -0.714399 -0.663990  0.711795 -0.422255   \n",
       "OT         0.110855 -0.055581  0.068904  0.010305 -0.005866 -0.019604   \n",
       "P          0.579841  0.672212  0.687766  0.648198 -0.695730  0.416574   \n",
       "P%         0.579587  0.672689  0.687463  0.648044 -0.695315  0.416672   \n",
       "RW         0.571893  0.674162  0.670853  0.646276 -0.685615  0.435381   \n",
       "ROW        0.558794  0.646136  0.656316  0.652148 -0.675679  0.399198   \n",
       "S/O Win   -0.045172  0.108056  0.030853 -0.095577 -0.024451  0.060864   \n",
       "GF         0.225862  0.788210  0.349079  0.688334 -0.570165  0.218367   \n",
       "GA        -0.781945 -0.458883 -0.843863 -0.511106  0.688389 -0.474971   \n",
       "GF/GP      0.228538  0.788560  0.351607  0.690028 -0.572251  0.221298   \n",
       "GA/GP     -0.782320 -0.460364 -0.844488 -0.511086  0.689618 -0.474822   \n",
       "PP%        0.161023  0.957534  0.282755  0.539927 -0.361903  0.261324   \n",
       "PK%        1.000000  0.226967  0.948346  0.440251 -0.531986  0.588572   \n",
       "Net PP%    0.226967  1.000000  0.346555  0.578536 -0.350387  0.248967   \n",
       "Net PK%    0.948346  0.346555  1.000000  0.485092 -0.627561  0.594040   \n",
       "Shots/GP   0.440251  0.578536  0.485092  1.000000 -0.553292  0.324021   \n",
       "SA/GP     -0.531986 -0.350387 -0.627561 -0.553292  1.000000 -0.335582   \n",
       "FOW%       0.588572  0.248967  0.594040  0.324021 -0.335582  1.000000   \n",
       "Goal_Diff  0.623444  0.688916  0.724709  0.673912 -0.731806  0.418689   \n",
       "\n",
       "           Goal_Diff  \n",
       "GP               NaN  \n",
       "W           0.963545  \n",
       "L          -0.966306  \n",
       "OT         -0.190779  \n",
       "P           0.977638  \n",
       "P%          0.977643  \n",
       "RW          0.974135  \n",
       "ROW         0.968978  \n",
       "S/O Win     0.100019  \n",
       "GF          0.825804  \n",
       "GA         -0.905553  \n",
       "GF/GP       0.826979  \n",
       "GA/GP      -0.906356  \n",
       "PP%         0.632242  \n",
       "PK%         0.623444  \n",
       "Net PP%     0.688916  \n",
       "Net PK%     0.724709  \n",
       "Shots/GP    0.673912  \n",
       "SA/GP      -0.731806  \n",
       "FOW%        0.418689  \n",
       "Goal_Diff   1.000000  \n",
       "\n",
       "[21 rows x 21 columns]"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "team_stats_2023.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "83689d5a",
   "metadata": {},
   "outputs": [],
   "source": [
    "regression = LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "a3cb382f",
   "metadata": {},
   "outputs": [],
   "source": [
    "features = team_stats_2023['Goal_Diff'].array.reshape(-1, 1)\n",
    "target = team_stats_2023['W']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "8c4eda81",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "e0ed55b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "wins_model = regression.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "0b021d8d",
   "metadata": {},
   "outputs": [],
   "source": [
    "pred = wins_model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "0ecc1bee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.16459877])"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wins_model.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "5bb86acf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "41.3629222793318"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wins_model.intercept_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "310dc5a1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8818108602802351"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "metrics.r2_score(pred, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "93745b82",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.1840891329661103"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "math.sqrt(metrics.mean_squared_error(y_test, pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "f836aa01",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(team_stats_2023['Goal_Diff'], target,color='g')\n",
    "plt.plot(features, wins_model.predict(features),color='k')\n",
    "plt.xlabel(\"Goal Differential\")\n",
    "plt.ylabel(\"Total Wins (2022-2023 Season)\")\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
