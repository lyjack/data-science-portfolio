{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e29c8969",
   "metadata": {},
   "source": [
    "This paper is an analysis on the Federal Reserves FRED data as well as S&P 500 closing values on a monthly basis. The central idea of this analysis is to see how different variables interact and whether they can be used to predict eachother. The main variables being investigated in this research is the chance of a recession given by the Sahm Rule Recession Indicator, the unemployment rate, 3 Month T-Bill Rates, 1 Year T-Bill Rates, and the closing values of the S&P 500. All of the data was collected from the FRED website as well as Yahoo Finance. The paper will be divided into three parts. The first part is dedicated to the importing and cleaning of our data. The second section is focused on exploritory data analysis. The final part is using statistical models and functions to analyze our data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4795e5e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import statsmodels.formula.api as smf\n",
    "import matplotlib.pyplot as plt\n",
    "import statistics "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4e7e1331",
   "metadata": {},
   "outputs": [],
   "source": [
    "recession = pd.read_csv(\"Recession.csv\")\n",
    "unemployment = pd.read_csv(\"Unemployment.csv\")\n",
    "TBill_3_Month = pd.read_csv(\"3MonthTBill.csv\")\n",
    "TBill_1_Year = pd.read_csv(\"1YearTBill.csv\")\n",
    "sp500 = pd.read_csv(\"S&P500.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5e8888ca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DATE             object\n",
       "SAHMREALTIME    float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "recession.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8db4f885",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DATE            datetime64[ns]\n",
       "SAHMREALTIME           float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "recession['DATE'] = pd.to_datetime(recession['DATE'])\n",
    "recession.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "832cb85e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DATE       object\n",
       "UNRATE    float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "unemployment.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e768d343",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DATE      datetime64[ns]\n",
       "UNRATE           float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "unemployment['DATE'] = pd.to_datetime(unemployment['DATE'])\n",
    "unemployment.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "727cb533",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DATE     datetime64[ns]\n",
       "TB3MS           float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "TBill_3_Month['DATE'] = pd.to_datetime(TBill_3_Month['DATE'])\n",
    "TBill_3_Month.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b9ed4f4",
   "metadata": {},
   "source": [
    "There are multiple entries that don't have values. These are represented as . in the data set. In order to convert the object to a float value, we need to change these to numpy NAN values so pandas can conver the type."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "fa4a7283",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DATE     object\n",
       "TB1YR    object\n",
       "dtype: object"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "TBill_1_Year.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "00a33dc9",
   "metadata": {},
   "outputs": [],
   "source": [
    "TBill_1_Year['TB1YR'] = TBill_1_Year['TB1YR'].replace(['.'], np.NAN)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "883c2840",
   "metadata": {},
   "source": [
    "Now we can convert the types to the correct types for further analysis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "bbb95c2d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DATE     datetime64[ns]\n",
       "TB1YR           float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "TBill_1_Year['DATE'] = pd.to_datetime(TBill_1_Year['DATE'])\n",
    "TBill_1_Year['TB1YR'] = TBill_1_Year['TB1YR'].astype(float)\n",
    "TBill_1_Year.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d3db2be",
   "metadata": {},
   "source": [
    "Now we will check the types for the sp500 data set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "5acef8ca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DATE      object\n",
       "SP500    float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sp500.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a57b0b65",
   "metadata": {},
   "source": [
    "We can see that the date has an object type, we will need to conver this to a datetime type."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d7c41f7f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DATE     datetime64[ns]\n",
       "SP500           float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sp500['DATE'] = pd.to_datetime(sp500['DATE'])\n",
    "sp500.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9b65436c",
   "metadata": {},
   "source": [
    "Now we will merge all of our different data frames into a single data frame. We will use the pandas function merge to accomplish this."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "66420846",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DATE</th>\n",
       "      <th>SAHMREALTIME</th>\n",
       "      <th>UNRATE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>905</th>\n",
       "      <td>1959-08-01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>906</th>\n",
       "      <td>1959-09-01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>907</th>\n",
       "      <td>1959-10-01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>908</th>\n",
       "      <td>1959-11-01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>909</th>\n",
       "      <td>2023-10-01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          DATE  SAHMREALTIME  UNRATE\n",
       "905 1959-08-01           NaN     5.2\n",
       "906 1959-09-01           NaN     5.5\n",
       "907 1959-10-01           NaN     5.7\n",
       "908 1959-11-01           NaN     5.8\n",
       "909 2023-10-01           NaN     3.9"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.merge(recession, unemployment, on='DATE', how='outer')\n",
    "df.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "408428c3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DATE</th>\n",
       "      <th>SAHMREALTIME</th>\n",
       "      <th>UNRATE</th>\n",
       "      <th>TB3MS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>910</th>\n",
       "      <td>1934-01-01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>911</th>\n",
       "      <td>1934-02-01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>912</th>\n",
       "      <td>1934-03-01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>913</th>\n",
       "      <td>1934-04-01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>914</th>\n",
       "      <td>1934-05-01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>762</th>\n",
       "      <td>2023-06-01</td>\n",
       "      <td>0.07</td>\n",
       "      <td>3.6</td>\n",
       "      <td>5.16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>763</th>\n",
       "      <td>2023-07-01</td>\n",
       "      <td>0.10</td>\n",
       "      <td>3.5</td>\n",
       "      <td>5.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>764</th>\n",
       "      <td>2023-08-01</td>\n",
       "      <td>0.13</td>\n",
       "      <td>3.8</td>\n",
       "      <td>5.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>765</th>\n",
       "      <td>2023-09-01</td>\n",
       "      <td>0.20</td>\n",
       "      <td>3.8</td>\n",
       "      <td>5.32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>909</th>\n",
       "      <td>2023-10-01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.9</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1078 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          DATE  SAHMREALTIME  UNRATE  TB3MS\n",
       "910 1934-01-01           NaN     NaN   0.72\n",
       "911 1934-02-01           NaN     NaN   0.62\n",
       "912 1934-03-01           NaN     NaN   0.24\n",
       "913 1934-04-01           NaN     NaN   0.15\n",
       "914 1934-05-01           NaN     NaN   0.16\n",
       "..         ...           ...     ...    ...\n",
       "762 2023-06-01          0.07     3.6   5.16\n",
       "763 2023-07-01          0.10     3.5   5.25\n",
       "764 2023-08-01          0.13     3.8   5.30\n",
       "765 2023-09-01          0.20     3.8   5.32\n",
       "909 2023-10-01           NaN     3.9    NaN\n",
       "\n",
       "[1078 rows x 4 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.merge(df, TBill_3_Month, on = 'DATE', how = 'outer')\n",
    "df.sort_values('DATE')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "08be921d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DATE</th>\n",
       "      <th>SAHMREALTIME</th>\n",
       "      <th>UNRATE</th>\n",
       "      <th>TB3MS</th>\n",
       "      <th>TB1YR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>910</th>\n",
       "      <td>1934-01-01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.72</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>911</th>\n",
       "      <td>1934-02-01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.62</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>912</th>\n",
       "      <td>1934-03-01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.24</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>913</th>\n",
       "      <td>1934-04-01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.15</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>914</th>\n",
       "      <td>1934-05-01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.16</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>762</th>\n",
       "      <td>2023-06-01</td>\n",
       "      <td>0.07</td>\n",
       "      <td>3.6</td>\n",
       "      <td>5.16</td>\n",
       "      <td>4.98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>763</th>\n",
       "      <td>2023-07-01</td>\n",
       "      <td>0.10</td>\n",
       "      <td>3.5</td>\n",
       "      <td>5.25</td>\n",
       "      <td>5.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>764</th>\n",
       "      <td>2023-08-01</td>\n",
       "      <td>0.13</td>\n",
       "      <td>3.8</td>\n",
       "      <td>5.30</td>\n",
       "      <td>5.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>765</th>\n",
       "      <td>2023-09-01</td>\n",
       "      <td>0.20</td>\n",
       "      <td>3.8</td>\n",
       "      <td>5.32</td>\n",
       "      <td>5.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>909</th>\n",
       "      <td>2023-10-01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.9</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1078 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          DATE  SAHMREALTIME  UNRATE  TB3MS  TB1YR\n",
       "910 1934-01-01           NaN     NaN   0.72    NaN\n",
       "911 1934-02-01           NaN     NaN   0.62    NaN\n",
       "912 1934-03-01           NaN     NaN   0.24    NaN\n",
       "913 1934-04-01           NaN     NaN   0.15    NaN\n",
       "914 1934-05-01           NaN     NaN   0.16    NaN\n",
       "..         ...           ...     ...    ...    ...\n",
       "762 2023-06-01          0.07     3.6   5.16   4.98\n",
       "763 2023-07-01          0.10     3.5   5.25   5.10\n",
       "764 2023-08-01          0.13     3.8   5.30   5.09\n",
       "765 2023-09-01          0.20     3.8   5.32   5.15\n",
       "909 2023-10-01           NaN     3.9    NaN    NaN\n",
       "\n",
       "[1078 rows x 5 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.merge(df, TBill_1_Year, on = 'DATE', how = 'outer')\n",
    "df.sort_values('DATE')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "2943e6cc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DATE</th>\n",
       "      <th>SAHMREALTIME</th>\n",
       "      <th>UNRATE</th>\n",
       "      <th>TB3MS</th>\n",
       "      <th>TB1YR</th>\n",
       "      <th>SP500</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>910</th>\n",
       "      <td>1934-01-01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.72</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>911</th>\n",
       "      <td>1934-02-01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.62</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>912</th>\n",
       "      <td>1934-03-01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.24</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>913</th>\n",
       "      <td>1934-04-01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.15</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>914</th>\n",
       "      <td>1934-05-01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.16</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1080</th>\n",
       "      <td>2023-08-31</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4288.05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>765</th>\n",
       "      <td>2023-09-01</td>\n",
       "      <td>0.2</td>\n",
       "      <td>3.8</td>\n",
       "      <td>5.32</td>\n",
       "      <td>5.15</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1079</th>\n",
       "      <td>2023-09-30</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4193.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>909</th>\n",
       "      <td>2023-10-01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.9</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1078</th>\n",
       "      <td>2023-10-31</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4411.55</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1292 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           DATE  SAHMREALTIME  UNRATE  TB3MS  TB1YR    SP500\n",
       "910  1934-01-01           NaN     NaN   0.72    NaN      NaN\n",
       "911  1934-02-01           NaN     NaN   0.62    NaN      NaN\n",
       "912  1934-03-01           NaN     NaN   0.24    NaN      NaN\n",
       "913  1934-04-01           NaN     NaN   0.15    NaN      NaN\n",
       "914  1934-05-01           NaN     NaN   0.16    NaN      NaN\n",
       "...         ...           ...     ...    ...    ...      ...\n",
       "1080 2023-08-31           NaN     NaN    NaN    NaN  4288.05\n",
       "765  2023-09-01           0.2     3.8   5.32   5.15      NaN\n",
       "1079 2023-09-30           NaN     NaN    NaN    NaN  4193.80\n",
       "909  2023-10-01           NaN     3.9    NaN    NaN      NaN\n",
       "1078 2023-10-31           NaN     NaN    NaN    NaN  4411.55\n",
       "\n",
       "[1292 rows x 6 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.merge(df, sp500, on = 'DATE', how = 'outer')\n",
    "df.sort_values('DATE')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f6a629dc",
   "metadata": {},
   "source": [
    "Now we are going to rename all of the columns into more use friendly names as well as remove any rows that have NA values to help us with further analysis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "3530561a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>recession</th>\n",
       "      <th>unemployment</th>\n",
       "      <th>tb3ms</th>\n",
       "      <th>tb1yr</th>\n",
       "      <th>SP500</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>409</th>\n",
       "      <td>1994-01-01</td>\n",
       "      <td>0.00</td>\n",
       "      <td>6.6</td>\n",
       "      <td>2.98</td>\n",
       "      <td>3.39</td>\n",
       "      <td>481.61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>410</th>\n",
       "      <td>1994-02-01</td>\n",
       "      <td>0.00</td>\n",
       "      <td>6.6</td>\n",
       "      <td>3.25</td>\n",
       "      <td>3.69</td>\n",
       "      <td>467.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>411</th>\n",
       "      <td>1994-03-01</td>\n",
       "      <td>0.03</td>\n",
       "      <td>6.5</td>\n",
       "      <td>3.50</td>\n",
       "      <td>4.11</td>\n",
       "      <td>445.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>412</th>\n",
       "      <td>1994-04-01</td>\n",
       "      <td>-0.07</td>\n",
       "      <td>6.4</td>\n",
       "      <td>3.68</td>\n",
       "      <td>4.57</td>\n",
       "      <td>450.91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>419</th>\n",
       "      <td>1994-11-01</td>\n",
       "      <td>-0.17</td>\n",
       "      <td>5.6</td>\n",
       "      <td>5.29</td>\n",
       "      <td>6.13</td>\n",
       "      <td>453.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>747</th>\n",
       "      <td>2022-03-01</td>\n",
       "      <td>-0.10</td>\n",
       "      <td>3.6</td>\n",
       "      <td>0.44</td>\n",
       "      <td>1.28</td>\n",
       "      <td>4530.41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>756</th>\n",
       "      <td>2022-12-01</td>\n",
       "      <td>0.03</td>\n",
       "      <td>3.5</td>\n",
       "      <td>4.25</td>\n",
       "      <td>4.47</td>\n",
       "      <td>3839.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>757</th>\n",
       "      <td>2023-01-01</td>\n",
       "      <td>-0.07</td>\n",
       "      <td>3.4</td>\n",
       "      <td>4.54</td>\n",
       "      <td>4.49</td>\n",
       "      <td>4076.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>758</th>\n",
       "      <td>2023-02-01</td>\n",
       "      <td>0.00</td>\n",
       "      <td>3.6</td>\n",
       "      <td>4.65</td>\n",
       "      <td>4.70</td>\n",
       "      <td>3970.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>759</th>\n",
       "      <td>2023-03-01</td>\n",
       "      <td>0.00</td>\n",
       "      <td>3.5</td>\n",
       "      <td>4.69</td>\n",
       "      <td>4.47</td>\n",
       "      <td>4109.31</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>108 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          date  recession  unemployment  tb3ms  tb1yr    SP500\n",
       "409 1994-01-01       0.00           6.6   2.98   3.39   481.61\n",
       "410 1994-02-01       0.00           6.6   3.25   3.69   467.14\n",
       "411 1994-03-01       0.03           6.5   3.50   4.11   445.77\n",
       "412 1994-04-01      -0.07           6.4   3.68   4.57   450.91\n",
       "419 1994-11-01      -0.17           5.6   5.29   6.13   453.69\n",
       "..         ...        ...           ...    ...    ...      ...\n",
       "747 2022-03-01      -0.10           3.6   0.44   1.28  4530.41\n",
       "756 2022-12-01       0.03           3.5   4.25   4.47  3839.50\n",
       "757 2023-01-01      -0.07           3.4   4.54   4.49  4076.60\n",
       "758 2023-02-01       0.00           3.6   4.65   4.70  3970.15\n",
       "759 2023-03-01       0.00           3.5   4.69   4.47  4109.31\n",
       "\n",
       "[108 rows x 6 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.rename(columns={'DATE': 'date', 'SAHMREALTIME':'recession', 'UNRATE': 'unemployment', \n",
    "                  'TB3MS': 'tb3ms', 'TB1YR': 'tb1yr'}\n",
    "          , inplace=True)\n",
    "df.dropna(inplace=True)\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2571b553",
   "metadata": {},
   "source": [
    "After removing all NA values, we are left with data from 1994-2023. Now we have a single data frame with all the relevant FRED data. We can start to do some EDA to look at each of our variables as well as the relationships between them"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "5f0a1463",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df.recession)\n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "170c08bc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.3087962962962963, 0.0, 0.8587011682970698)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "statistics.mean(df.recession), statistics.mode(df.recession), statistics.stdev(df.recession)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "05051392",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df.unemployment)\n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "4e2bacb0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5.544444444444444, 5.6, 1.7349800469284584)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "statistics.mean(df.unemployment), statistics.mode(df.unemployment), statistics.stdev(df.unemployment)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "b131e09f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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5QbdzrJsyFpExNq1a2PVqlUDtz/88MP45z//GZMnT/7I889Ub29vVFdXR2dnZ0ycOHHEHvds4hqdHtfp1FyjU3ONTs01OrViukZZlkVfX19UVVWd8twRj48LL7wwzjnnnCG7HN3d3UN2QyIi8vl85PP5QWuf/exnR3qsARMnTiz4P6Bi5xqdHtfp1FyjU3ONTs01OrViuUan2vE4acRfcDp27NiYNWtWtLa2DlpvbW2N+vr6kX46AKDEjMofu6xatSpuv/32qKurizlz5sTWrVvj8OHDsWzZstF4OgCghIxKfNx6663x7rvvxs9+9rN4++23Y/r06fHHP/4xPv/5z4/G052WfD4f995775A/4uH/c41Oj+t0aq7RqblGp+YanVqpXqNcdjrviQEAGCG+2wUASEp8AABJiQ8AICnxAQAk9amJjwceeCBqampi3LhxMWvWrHjhhRcKPVJR2b17dyxatCiqqqoil8vF448/XuiRikpLS0tcc801UVZWFlOmTIlbbrklXn311UKPVXS2bNkSM2bMGPjAozlz5sTTTz9d6LGKVktLS+RyuWhsbCz0KEWlqakpcrncoKOysrLQYxWdv//97/Gd73wnJk+eHBMmTIgvf/nLsX///kKPdVo+FfHxyCOPRGNjY6xbty5eeumluP7662PBggVx+PDhQo9WNI4ePRozZ86MzZs3F3qUotTW1hYrVqyIvXv3Rmtra3zwwQfR0NAQR48eLfRoRWXatGmxfv362LdvX+zbty9uuOGGuPnmm+PgwYOFHq3otLe3x9atW2PGjBmFHqUofelLX4q333574Dhw4EChRyoqR44ciWuvvTbOPffcePrpp+OVV16JX/7yl6P6CeEjKvsU+OpXv5otW7Zs0Nrll1+erVmzpkATFbeIyB577LFCj1HUuru7s4jI2traCj1K0bvggguyX//614Ueo6j09fVltbW1WWtrazZ37tzsrrvuKvRIReXee+/NZs6cWegxitrdd9+dXXfddYUe44yd9Tsfx48fj/3790dDQ8Og9YaGhtizZ0+BpqLU9fT0RETEpEmTCjxJ8Tpx4kTs2LEjjh49GnPmzCn0OEVlxYoVsXDhwrjpppsKPUrReu2116Kqqipqamri29/+drzxxhuFHqmoPPnkk1FXVxff/OY3Y8qUKXH11VfHgw8+WOixTttZHx/vvPNOnDhxYsiX2lVUVAz58js4HVmWxapVq+K6666L6dOnF3qconPgwIE4//zzI5/Px7Jly+Kxxx6LK6+8stBjFY0dO3bEiy++GC0tLYUepWjNnj07Hn744XjmmWfiwQcfjK6urqivr49333230KMVjTfeeCO2bNkStbW18cwzz8SyZcvixz/+cTz88MOFHu20jMrHqxejXC436HaWZUPW4HSsXLkyXn755fjTn/5U6FGK0mWXXRYdHR3xr3/9K37/+9/H0qVLo62tTYBERGdnZ9x1112xa9euGDduXKHHKVoLFiwY+Ourrroq5syZE1/84hdj27ZtsWrVqgJOVjw+/PDDqKuri+bm5oiIuPrqq+PgwYOxZcuW+O53v1vg6U7trN/5uPDCC+Occ84ZssvR3d09ZDcETuXOO++MJ598Mp577rmYNm1aoccpSmPHjo1LLrkk6urqoqWlJWbOnBn3339/occqCvv374/u7u6YNWtWjBkzJsaMGRNtbW3xq1/9KsaMGRMnTpwo9IhF6bzzzourrroqXnvttUKPUjSmTp06JOivuOKKknkjxVkfH2PHjo1Zs2ZFa2vroPXW1taor68v0FSUmizLYuXKlfHoo4/Gs88+GzU1NYUeqWRkWRb9/f2FHqMo3HjjjXHgwIHo6OgYOOrq6uK2226Ljo6OOOeccwo9YlHq7++Pv/zlLzF16tRCj1I0rr322iFv9//rX/9a0C9wHY5PxR+7rFq1Km6//faoq6uLOXPmxNatW+Pw4cOxbNmyQo9WNN577714/fXXB24fOnQoOjo6YtKkSXHRRRcVcLLisGLFiti+fXs88cQTUVZWNrCTVl5eHuPHjy/wdMXjnnvuiQULFkR1dXX09fXFjh074vnnn4+dO3cWerSiUFZWNuR1Quedd15MnjzZ64f+w09/+tNYtGhRXHTRRdHd3R0///nPo7e3N5YuXVro0YrGT37yk6ivr4/m5ub41re+FX/+859j69atsXXr1kKPdnoK+2abdP7v//4v+/znP5+NHTs2+8pXvuItkv/lueeeyyJiyLF06dJCj1YUPuraRET20EMPFXq0ovL9739/4L+zz33uc9mNN96Y7dq1q9BjFTVvtR3q1ltvzaZOnZqde+65WVVVVbZ48eLs4MGDhR6r6PzhD3/Ipk+fnuXz+ezyyy/Ptm7dWuiRTlsuy7KsQN0DAHwKnfWv+QAAiov4AACSEh8AQFLiAwBISnwAAEmJDwAgKfEBACQlPgCApMQHAJCU+AAAkhIfAEBS4gMASOr/ASJXyhugCcmAAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df.tb3ms)\n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "5137669d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2.556111111111111, 0.03, 2.3003322934819956)"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "statistics.mean(df.tb3ms), statistics.mode(df.tb3ms), statistics.stdev(df.tb3ms)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "56592554",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df.tb1yr)\n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "f12b8477",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2.7225925925925925, 0.11, 2.2917345878729125)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "statistics.mean(df.tb1yr), statistics.mode(df.tb1yr), statistics.stdev(df.tb1yr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "391ba5cb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df.SP500)\n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "fb62cbfd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1717.7586111111111, 481.61, 1095.3969751019667)"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "statistics.mean(df.SP500), statistics.mode(df.SP500), statistics.stdev(df.SP500)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f04c4e5",
   "metadata": {},
   "source": [
    "Next, we are going to look at some scatterplots comparing our variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "7b9a4ba1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig1, ax = plt.subplots()\n",
    "ax.scatter(df.recession, df.SP500, linewidth=2.0)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "390d28ab",
   "metadata": {},
   "source": [
    "There does not to be any apparent relationship between the two values when looking at the scatterplot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "08c1916d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig1, ax = plt.subplots()\n",
    "ax.scatter(df.unemployment, df.SP500, linewidth=2.0)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "65f0f56d",
   "metadata": {},
   "source": [
    "There does appear to be a relationship between the two values, but it does not appear to be linear."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "d2974077",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig1, ax = plt.subplots()\n",
    "ax.scatter(df.tb1yr, df.SP500, linewidth=2.0)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e1dd8a0b",
   "metadata": {},
   "source": [
    "Again, there is not a strong relationship between the two variables, but there does appear to be a non-linear relationship"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0ae7567",
   "metadata": {},
   "source": [
    "One question we have about our data is the relationship between our recession data as well as our unemployment data. Common thinking would lead us to believe that unemployment will be greater when there is a greater chance of a recession. In order to see if this is true, we are going to split our data into two different data frames. The first is going to be our data when our recession value is greater than the mean recession value. Our second data frame will be data when our recession value is less than the mean. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "260c1ceb",
   "metadata": {},
   "outputs": [],
   "source": [
    "recession_mean = statistics.mean(df.recession)\n",
    "unemployment_high_recession = df.loc[df['recession'] > recession_mean]\n",
    "unemployment_low_recession = df.loc[df['recession'] <= recession_mean]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "e0ccb000",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: empiricaldist in /Users/jacksonlyons/anaconda3/lib/python3.11/site-packages (0.7.1)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install empiricaldist"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "75146ff7",
   "metadata": {},
   "source": [
    "Now that we have our two data frames, we will construct two PMFs for each of them and graph both to visual see how they compare."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "b0d0a5a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "from empiricaldist import Pmf\n",
    "high_pmf = Pmf.from_seq(unemployment_high_recession.unemployment)\n",
    "low_pmf = Pmf.from_seq(unemployment_low_recession.unemployment)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "ff53550f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.bar(high_pmf.qs, high_pmf.ps, label='high recession')\n",
    "plt.bar(low_pmf.qs, low_pmf.ps, label='low recession')\n",
    "plt.legend(loc='upper right')\n",
    "plt.xlabel(\"Unemployment Rate\")\n",
    "plt.ylabel(\"Probability\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "46834b11",
   "metadata": {},
   "source": [
    "We also want to look at a CDF of the recession variable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "5140bad2",
   "metadata": {},
   "outputs": [],
   "source": [
    "from empiricaldist import Cdf\n",
    "recession_cdf = Cdf.from_seq(df.recession)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "6ab75cf6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.bar(recession_cdf.qs, recession_cdf.ps)\n",
    "plt.xlabel(\"Recession Chance\")\n",
    "plt.ylabel(\"CDF\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "13dc2f40",
   "metadata": {},
   "source": [
    "We can see a gap around 1, this is because there is no values for the variable around 1 as we saw in the histogram."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16f5135f",
   "metadata": {},
   "source": [
    "Now we are going to look a linear regression model of S&P500 values. Often in financial news, we hear about the impacts of unemployment as well as interest rates on the valuation of companies. Our model is looking to see how these two values can be used to predict the closing value of the S&P 500. Therefore, our model has two predictor variables, unemployment and tb1yr, where the tb1yr is our proxy for the interest rate."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "45d8bb41",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>          <td>SP500</td>      <th>  R-squared:         </th> <td>   0.642</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.635</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   94.15</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Sat, 18 Nov 2023</td> <th>  Prob (F-statistic):</th> <td>3.80e-24</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>17:27:08</td>     <th>  Log-Likelihood:    </th> <td> -853.15</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   108</td>      <th>  AIC:               </th> <td>   1712.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   105</td>      <th>  BIC:               </th> <td>   1720.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     2</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "        <td></td>          <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>    <td> 5526.6809</td> <td>  296.288</td> <td>   18.653</td> <td> 0.000</td> <td> 4939.196</td> <td> 6114.165</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>unemployment</th> <td> -496.5150</td> <td>   42.499</td> <td>  -11.683</td> <td> 0.000</td> <td> -580.782</td> <td> -412.248</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>tb1yr</th>        <td> -387.8739</td> <td>   32.174</td> <td>  -12.055</td> <td> 0.000</td> <td> -451.669</td> <td> -324.078</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>33.412</td> <th>  Durbin-Watson:     </th> <td>   0.178</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td>  53.360</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 1.431</td> <th>  Prob(JB):          </th> <td>2.59e-12</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 4.914</td> <th>  Cond. No.          </th> <td>    30.1</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/latex": [
       "\\begin{center}\n",
       "\\begin{tabular}{lclc}\n",
       "\\toprule\n",
       "\\textbf{Dep. Variable:}    &      SP500       & \\textbf{  R-squared:         } &     0.642   \\\\\n",
       "\\textbf{Model:}            &       OLS        & \\textbf{  Adj. R-squared:    } &     0.635   \\\\\n",
       "\\textbf{Method:}           &  Least Squares   & \\textbf{  F-statistic:       } &     94.15   \\\\\n",
       "\\textbf{Date:}             & Sat, 18 Nov 2023 & \\textbf{  Prob (F-statistic):} &  3.80e-24   \\\\\n",
       "\\textbf{Time:}             &     17:27:08     & \\textbf{  Log-Likelihood:    } &   -853.15   \\\\\n",
       "\\textbf{No. Observations:} &         108      & \\textbf{  AIC:               } &     1712.   \\\\\n",
       "\\textbf{Df Residuals:}     &         105      & \\textbf{  BIC:               } &     1720.   \\\\\n",
       "\\textbf{Df Model:}         &           2      & \\textbf{                     } &             \\\\\n",
       "\\textbf{Covariance Type:}  &    nonrobust     & \\textbf{                     } &             \\\\\n",
       "\\bottomrule\n",
       "\\end{tabular}\n",
       "\\begin{tabular}{lcccccc}\n",
       "                      & \\textbf{coef} & \\textbf{std err} & \\textbf{t} & \\textbf{P$> |$t$|$} & \\textbf{[0.025} & \\textbf{0.975]}  \\\\\n",
       "\\midrule\n",
       "\\textbf{Intercept}    &    5526.6809  &      296.288     &    18.653  &         0.000        &     4939.196    &     6114.165     \\\\\n",
       "\\textbf{unemployment} &    -496.5150  &       42.499     &   -11.683  &         0.000        &     -580.782    &     -412.248     \\\\\n",
       "\\textbf{tb1yr}        &    -387.8739  &       32.174     &   -12.055  &         0.000        &     -451.669    &     -324.078     \\\\\n",
       "\\bottomrule\n",
       "\\end{tabular}\n",
       "\\begin{tabular}{lclc}\n",
       "\\textbf{Omnibus:}       & 33.412 & \\textbf{  Durbin-Watson:     } &    0.178  \\\\\n",
       "\\textbf{Prob(Omnibus):} &  0.000 & \\textbf{  Jarque-Bera (JB):  } &   53.360  \\\\\n",
       "\\textbf{Skew:}          &  1.431 & \\textbf{  Prob(JB):          } & 2.59e-12  \\\\\n",
       "\\textbf{Kurtosis:}      &  4.914 & \\textbf{  Cond. No.          } &     30.1  \\\\\n",
       "\\bottomrule\n",
       "\\end{tabular}\n",
       "%\\caption{OLS Regression Results}\n",
       "\\end{center}\n",
       "\n",
       "Notes: \\newline\n",
       " [1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                  SP500   R-squared:                       0.642\n",
       "Model:                            OLS   Adj. R-squared:                  0.635\n",
       "Method:                 Least Squares   F-statistic:                     94.15\n",
       "Date:                Sat, 18 Nov 2023   Prob (F-statistic):           3.80e-24\n",
       "Time:                        17:27:08   Log-Likelihood:                -853.15\n",
       "No. Observations:                 108   AIC:                             1712.\n",
       "Df Residuals:                     105   BIC:                             1720.\n",
       "Df Model:                           2                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "================================================================================\n",
       "                   coef    std err          t      P>|t|      [0.025      0.975]\n",
       "--------------------------------------------------------------------------------\n",
       "Intercept     5526.6809    296.288     18.653      0.000    4939.196    6114.165\n",
       "unemployment  -496.5150     42.499    -11.683      0.000    -580.782    -412.248\n",
       "tb1yr         -387.8739     32.174    -12.055      0.000    -451.669    -324.078\n",
       "==============================================================================\n",
       "Omnibus:                       33.412   Durbin-Watson:                   0.178\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               53.360\n",
       "Skew:                           1.431   Prob(JB):                     2.59e-12\n",
       "Kurtosis:                       4.914   Cond. No.                         30.1\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "formula = 'SP500 ~ unemployment + tb1yr'\n",
    "model = smf.ols(formula, data = df)\n",
    "results = model.fit()\n",
    "results.summary() "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "55d53393",
   "metadata": {},
   "source": [
    "Looking at the results of our linear model, we can see our two predictors are very useful in predicting the value of the S&P500. We achieved an R-squared of 0.642. The coefficients of -496.515 for unemployment and -387.8739 for 1 Year T-Bills both make sense with our understanding of the financial markets. As unemployment and interest rates increase, we see a decrease in equities. Both of these coefficients are statstically siginficant as well with p-values ~0.000"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e019c78b",
   "metadata": {},
   "source": [
    "# Conclusion\n",
    "\n",
    "The goal of this paper was to analyze the relationships between multiple critical economic indicators. We started by importing and cleaning all of our data before diving into the exploratory data analysis. From this, we plotted each of our variables as histograms to analyze for any outliers and apparent patterns. Next, we looked at a couple scatterplots invistigating the relationships between our variables. In all of the plots, we didn't see an apparent relationhsip between any of our variables, but in our regression analysis, we saw a good R-squared value with unemployment and tb1yr predicting SP500. Finally, we looked a pdf of unemployment under high recession chances and under low recession as well as a cdf of recession."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
