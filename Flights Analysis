{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a67c1313",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from bs4 import BeautifulSoup\n",
    "import json\n",
    "import requests"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fde5b22c",
   "metadata": {},
   "source": [
    "## Project Milestone 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7565e78c",
   "metadata": {},
   "outputs": [],
   "source": [
    "flights = pd.read_csv(\"/Users/jacksonlyons/Documents/Coursework/Winter '23/DSC 540/Final Project/Data/DOT_Flights.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2810b705",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DEPARTURES_SCHEDULED</th>\n",
       "      <th>DEPARTURES_PERFORMED</th>\n",
       "      <th>SEATS</th>\n",
       "      <th>PASSENGERS</th>\n",
       "      <th>FREIGHT</th>\n",
       "      <th>MAIL</th>\n",
       "      <th>DISTANCE</th>\n",
       "      <th>RAMP_TO_RAMP</th>\n",
       "      <th>AIR_TIME</th>\n",
       "      <th>UNIQUE_CARRIER</th>\n",
       "      <th>...</th>\n",
       "      <th>ORIGIN</th>\n",
       "      <th>ORIGIN_CITY_NAME</th>\n",
       "      <th>ORIGIN_STATE_ABR</th>\n",
       "      <th>ORIGIN_STATE_FIPS</th>\n",
       "      <th>DEST_AIRPORT_ID</th>\n",
       "      <th>DEST_CITY_MARKET_ID</th>\n",
       "      <th>DEST</th>\n",
       "      <th>DEST_CITY_NAME</th>\n",
       "      <th>DEST_STATE_ABR</th>\n",
       "      <th>DEST_STATE_FIPS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>M6</td>\n",
       "      <td>...</td>\n",
       "      <td>PHL</td>\n",
       "      <td>Philadelphia, PA</td>\n",
       "      <td>PA</td>\n",
       "      <td>42</td>\n",
       "      <td>14100</td>\n",
       "      <td>34100</td>\n",
       "      <td>PHL</td>\n",
       "      <td>Philadelphia, PA</td>\n",
       "      <td>PA</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>DL</td>\n",
       "      <td>...</td>\n",
       "      <td>BED</td>\n",
       "      <td>Bedford, MA</td>\n",
       "      <td>MA</td>\n",
       "      <td>25</td>\n",
       "      <td>10721</td>\n",
       "      <td>30721</td>\n",
       "      <td>BOS</td>\n",
       "      <td>Boston, MA</td>\n",
       "      <td>MA</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>DL</td>\n",
       "      <td>...</td>\n",
       "      <td>LGB</td>\n",
       "      <td>Long Beach, CA</td>\n",
       "      <td>CA</td>\n",
       "      <td>6</td>\n",
       "      <td>12892</td>\n",
       "      <td>32575</td>\n",
       "      <td>LAX</td>\n",
       "      <td>Los Angeles, CA</td>\n",
       "      <td>CA</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NEW</td>\n",
       "      <td>...</td>\n",
       "      <td>BID</td>\n",
       "      <td>Block Island, RI</td>\n",
       "      <td>RI</td>\n",
       "      <td>44</td>\n",
       "      <td>15855</td>\n",
       "      <td>35855</td>\n",
       "      <td>WST</td>\n",
       "      <td>Westerly, RI</td>\n",
       "      <td>RI</td>\n",
       "      <td>44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NEW</td>\n",
       "      <td>...</td>\n",
       "      <td>BID</td>\n",
       "      <td>Block Island, RI</td>\n",
       "      <td>RI</td>\n",
       "      <td>44</td>\n",
       "      <td>15855</td>\n",
       "      <td>35855</td>\n",
       "      <td>WST</td>\n",
       "      <td>Westerly, RI</td>\n",
       "      <td>RI</td>\n",
       "      <td>44</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   DEPARTURES_SCHEDULED  DEPARTURES_PERFORMED  SEATS  PASSENGERS  FREIGHT  \\\n",
       "0                   0.0                   0.0    0.0         0.0      0.0   \n",
       "1                   0.0                   0.0    0.0         0.0      0.0   \n",
       "2                   0.0                   0.0    0.0         0.0      0.0   \n",
       "3                   0.0                   0.0    0.0         0.0      0.0   \n",
       "4                   0.0                   0.0    0.0         0.0      0.0   \n",
       "\n",
       "   MAIL  DISTANCE  RAMP_TO_RAMP  AIR_TIME UNIQUE_CARRIER  ... ORIGIN  \\\n",
       "0   0.0       0.0           0.0       0.0             M6  ...    PHL   \n",
       "1   0.0      16.0           0.0       0.0             DL  ...    BED   \n",
       "2   0.0      17.0           0.0       0.0             DL  ...    LGB   \n",
       "3   0.0      17.0           0.0       0.0            NEW  ...    BID   \n",
       "4   0.0      17.0           0.0       0.0            NEW  ...    BID   \n",
       "\n",
       "   ORIGIN_CITY_NAME  ORIGIN_STATE_ABR ORIGIN_STATE_FIPS DEST_AIRPORT_ID  \\\n",
       "0  Philadelphia, PA                PA                42           14100   \n",
       "1       Bedford, MA                MA                25           10721   \n",
       "2    Long Beach, CA                CA                 6           12892   \n",
       "3  Block Island, RI                RI                44           15855   \n",
       "4  Block Island, RI                RI                44           15855   \n",
       "\n",
       "  DEST_CITY_MARKET_ID  DEST    DEST_CITY_NAME  DEST_STATE_ABR DEST_STATE_FIPS  \n",
       "0               34100   PHL  Philadelphia, PA              PA              42  \n",
       "1               30721   BOS        Boston, MA              MA              25  \n",
       "2               32575   LAX   Los Angeles, CA              CA               6  \n",
       "3               35855   WST      Westerly, RI              RI              44  \n",
       "4               35855   WST      Westerly, RI              RI              44  \n",
       "\n",
       "[5 rows x 23 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "flights.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9ee520c",
   "metadata": {},
   "source": [
    "### Replace Headers"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "81f00d48",
   "metadata": {},
   "source": [
    "I want to change all of the column names to lower case to better match the python standard."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "26985d0c",
   "metadata": {},
   "outputs": [],
   "source": [
    "flights.columns = [x.lower() for x in flights.columns]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d4468281",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['departures_scheduled', 'departures_performed', 'seats', 'passengers',\n",
       "       'freight', 'mail', 'distance', 'ramp_to_ramp', 'air_time',\n",
       "       'unique_carrier', 'unique_carrier_name', 'origin_airport_id',\n",
       "       'origin_city_market_id', 'origin', 'origin_city_name',\n",
       "       'origin_state_abr', 'origin_state_fips', 'dest_airport_id',\n",
       "       'dest_city_market_id', 'dest', 'dest_city_name', 'dest_state_abr',\n",
       "       'dest_state_fips'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "flights.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a978f5d",
   "metadata": {},
   "source": [
    "When looking at the table above, we can see entries where the number of passengers, freight, mail, and departures are equal to zero. These entries are not providing us wtih any information, so we can go ahead and remove entries that have all of these equal to zero."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5b0a6f1c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(350987, 23)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "flights.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fda31108",
   "metadata": {},
   "source": [
    "### Removing Unecessary Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6809f90a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>departures_scheduled</th>\n",
       "      <th>departures_performed</th>\n",
       "      <th>seats</th>\n",
       "      <th>passengers</th>\n",
       "      <th>freight</th>\n",
       "      <th>mail</th>\n",
       "      <th>distance</th>\n",
       "      <th>ramp_to_ramp</th>\n",
       "      <th>air_time</th>\n",
       "      <th>unique_carrier</th>\n",
       "      <th>...</th>\n",
       "      <th>origin</th>\n",
       "      <th>origin_city_name</th>\n",
       "      <th>origin_state_abr</th>\n",
       "      <th>origin_state_fips</th>\n",
       "      <th>dest_airport_id</th>\n",
       "      <th>dest_city_market_id</th>\n",
       "      <th>dest</th>\n",
       "      <th>dest_city_name</th>\n",
       "      <th>dest_state_abr</th>\n",
       "      <th>dest_state_fips</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2440</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>277.0</td>\n",
       "      <td>72.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>L2</td>\n",
       "      <td>...</td>\n",
       "      <td>ANC</td>\n",
       "      <td>Anchorage, AK</td>\n",
       "      <td>AK</td>\n",
       "      <td>2</td>\n",
       "      <td>11813</td>\n",
       "      <td>31813</td>\n",
       "      <td>FVQ</td>\n",
       "      <td>Donlin Creek Mine, AK</td>\n",
       "      <td>AK</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2441</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>295.0</td>\n",
       "      <td>82.0</td>\n",
       "      <td>77.0</td>\n",
       "      <td>KO</td>\n",
       "      <td>...</td>\n",
       "      <td>AKN</td>\n",
       "      <td>King Salmon, AK</td>\n",
       "      <td>AK</td>\n",
       "      <td>2</td>\n",
       "      <td>14816</td>\n",
       "      <td>34816</td>\n",
       "      <td>SHX</td>\n",
       "      <td>Shageluk, AK</td>\n",
       "      <td>AK</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2442</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>626.0</td>\n",
       "      <td>126.0</td>\n",
       "      <td>114.0</td>\n",
       "      <td>L2</td>\n",
       "      <td>...</td>\n",
       "      <td>ANC</td>\n",
       "      <td>Anchorage, AK</td>\n",
       "      <td>AK</td>\n",
       "      <td>2</td>\n",
       "      <td>14709</td>\n",
       "      <td>30073</td>\n",
       "      <td>SCC</td>\n",
       "      <td>Deadhorse, AK</td>\n",
       "      <td>AK</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2443</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>5Y</td>\n",
       "      <td>...</td>\n",
       "      <td>RFD</td>\n",
       "      <td>Rockford, IL</td>\n",
       "      <td>IL</td>\n",
       "      <td>17</td>\n",
       "      <td>14512</td>\n",
       "      <td>34512</td>\n",
       "      <td>RFD</td>\n",
       "      <td>Rockford, IL</td>\n",
       "      <td>IL</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2444</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>261.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>KO</td>\n",
       "      <td>...</td>\n",
       "      <td>DUT</td>\n",
       "      <td>Unalaska, AK</td>\n",
       "      <td>AK</td>\n",
       "      <td>2</td>\n",
       "      <td>14738</td>\n",
       "      <td>34738</td>\n",
       "      <td>SDP</td>\n",
       "      <td>Sandpoint, AK</td>\n",
       "      <td>AK</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      departures_scheduled  departures_performed  seats  passengers  freight  \\\n",
       "2440                   0.0                   1.0    0.0         0.0      1.0   \n",
       "2441                   0.0                   1.0    0.0         0.0      1.0   \n",
       "2442                   0.0                   1.0    0.0         0.0      1.0   \n",
       "2443                   0.0                   1.0    0.0         0.0      2.0   \n",
       "2444                   0.0                   1.0    0.0         0.0      2.0   \n",
       "\n",
       "      mail  distance  ramp_to_ramp  air_time unique_carrier  ... origin  \\\n",
       "2440   0.0     277.0          72.0      66.0             L2  ...    ANC   \n",
       "2441   0.0     295.0          82.0      77.0             KO  ...    AKN   \n",
       "2442   0.0     626.0         126.0     114.0             L2  ...    ANC   \n",
       "2443   0.0       0.0          48.0      38.0             5Y  ...    RFD   \n",
       "2444   0.0     261.0          66.0      56.0             KO  ...    DUT   \n",
       "\n",
       "      origin_city_name  origin_state_abr origin_state_fips dest_airport_id  \\\n",
       "2440     Anchorage, AK                AK                 2           11813   \n",
       "2441   King Salmon, AK                AK                 2           14816   \n",
       "2442     Anchorage, AK                AK                 2           14709   \n",
       "2443      Rockford, IL                IL                17           14512   \n",
       "2444      Unalaska, AK                AK                 2           14738   \n",
       "\n",
       "     dest_city_market_id  dest         dest_city_name  dest_state_abr  \\\n",
       "2440               31813   FVQ  Donlin Creek Mine, AK              AK   \n",
       "2441               34816   SHX           Shageluk, AK              AK   \n",
       "2442               30073   SCC          Deadhorse, AK              AK   \n",
       "2443               34512   RFD           Rockford, IL              IL   \n",
       "2444               34738   SDP          Sandpoint, AK              AK   \n",
       "\n",
       "     dest_state_fips  \n",
       "2440               2  \n",
       "2441               2  \n",
       "2442               2  \n",
       "2443              17  \n",
       "2444               2  \n",
       "\n",
       "[5 rows x 23 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "flights = flights[(flights[\"passengers\"] != 0) | (flights[\"freight\"] != 0)]\n",
    "flights.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "0a4a0b45",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(325467, 23)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "flights.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e257c49",
   "metadata": {},
   "source": [
    "Next, we want to check to see if we have any null values in our dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "180a9448",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "departures_scheduled     0\n",
       "departures_performed     0\n",
       "seats                    0\n",
       "passengers               0\n",
       "freight                  0\n",
       "mail                     0\n",
       "distance                 0\n",
       "ramp_to_ramp             0\n",
       "air_time                 0\n",
       "unique_carrier           0\n",
       "unique_carrier_name      0\n",
       "origin_airport_id        0\n",
       "origin_city_market_id    0\n",
       "origin                   0\n",
       "origin_city_name         0\n",
       "origin_state_abr         0\n",
       "origin_state_fips        0\n",
       "dest_airport_id          0\n",
       "dest_city_market_id      0\n",
       "dest                     0\n",
       "dest_city_name           0\n",
       "dest_state_abr           0\n",
       "dest_state_fips          0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "flights.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "97560c5a",
   "metadata": {},
   "source": [
    "We have no null values that we have to worry about."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ffe2b0f3",
   "metadata": {},
   "source": [
    "### Creating New Variables"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "99f80ef5",
   "metadata": {},
   "source": [
    "Next I want to create some new variables that will be useful for further analysis. The first of these is to combine our freight and mail values into a single value. This is useful for analysis because these are regarded as seperate in our data set but are treated very similarly in the real world and can be transported by train in the same way."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "925df3ea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>departures_scheduled</th>\n",
       "      <th>departures_performed</th>\n",
       "      <th>seats</th>\n",
       "      <th>passengers</th>\n",
       "      <th>freight</th>\n",
       "      <th>mail</th>\n",
       "      <th>distance</th>\n",
       "      <th>ramp_to_ramp</th>\n",
       "      <th>air_time</th>\n",
       "      <th>unique_carrier</th>\n",
       "      <th>...</th>\n",
       "      <th>origin_city_name</th>\n",
       "      <th>origin_state_abr</th>\n",
       "      <th>origin_state_fips</th>\n",
       "      <th>dest_airport_id</th>\n",
       "      <th>dest_city_market_id</th>\n",
       "      <th>dest</th>\n",
       "      <th>dest_city_name</th>\n",
       "      <th>dest_state_abr</th>\n",
       "      <th>dest_state_fips</th>\n",
       "      <th>cargo</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2440</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>277.0</td>\n",
       "      <td>72.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>L2</td>\n",
       "      <td>...</td>\n",
       "      <td>Anchorage, AK</td>\n",
       "      <td>AK</td>\n",
       "      <td>2</td>\n",
       "      <td>11813</td>\n",
       "      <td>31813</td>\n",
       "      <td>FVQ</td>\n",
       "      <td>Donlin Creek Mine, AK</td>\n",
       "      <td>AK</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2441</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>295.0</td>\n",
       "      <td>82.0</td>\n",
       "      <td>77.0</td>\n",
       "      <td>KO</td>\n",
       "      <td>...</td>\n",
       "      <td>King Salmon, AK</td>\n",
       "      <td>AK</td>\n",
       "      <td>2</td>\n",
       "      <td>14816</td>\n",
       "      <td>34816</td>\n",
       "      <td>SHX</td>\n",
       "      <td>Shageluk, AK</td>\n",
       "      <td>AK</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2442</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>626.0</td>\n",
       "      <td>126.0</td>\n",
       "      <td>114.0</td>\n",
       "      <td>L2</td>\n",
       "      <td>...</td>\n",
       "      <td>Anchorage, AK</td>\n",
       "      <td>AK</td>\n",
       "      <td>2</td>\n",
       "      <td>14709</td>\n",
       "      <td>30073</td>\n",
       "      <td>SCC</td>\n",
       "      <td>Deadhorse, AK</td>\n",
       "      <td>AK</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2443</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>5Y</td>\n",
       "      <td>...</td>\n",
       "      <td>Rockford, IL</td>\n",
       "      <td>IL</td>\n",
       "      <td>17</td>\n",
       "      <td>14512</td>\n",
       "      <td>34512</td>\n",
       "      <td>RFD</td>\n",
       "      <td>Rockford, IL</td>\n",
       "      <td>IL</td>\n",
       "      <td>17</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2444</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>261.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>KO</td>\n",
       "      <td>...</td>\n",
       "      <td>Unalaska, AK</td>\n",
       "      <td>AK</td>\n",
       "      <td>2</td>\n",
       "      <td>14738</td>\n",
       "      <td>34738</td>\n",
       "      <td>SDP</td>\n",
       "      <td>Sandpoint, AK</td>\n",
       "      <td>AK</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      departures_scheduled  departures_performed  seats  passengers  freight  \\\n",
       "2440                   0.0                   1.0    0.0         0.0      1.0   \n",
       "2441                   0.0                   1.0    0.0         0.0      1.0   \n",
       "2442                   0.0                   1.0    0.0         0.0      1.0   \n",
       "2443                   0.0                   1.0    0.0         0.0      2.0   \n",
       "2444                   0.0                   1.0    0.0         0.0      2.0   \n",
       "\n",
       "      mail  distance  ramp_to_ramp  air_time unique_carrier  ...  \\\n",
       "2440   0.0     277.0          72.0      66.0             L2  ...   \n",
       "2441   0.0     295.0          82.0      77.0             KO  ...   \n",
       "2442   0.0     626.0         126.0     114.0             L2  ...   \n",
       "2443   0.0       0.0          48.0      38.0             5Y  ...   \n",
       "2444   0.0     261.0          66.0      56.0             KO  ...   \n",
       "\n",
       "     origin_city_name  origin_state_abr  origin_state_fips dest_airport_id  \\\n",
       "2440    Anchorage, AK                AK                  2           11813   \n",
       "2441  King Salmon, AK                AK                  2           14816   \n",
       "2442    Anchorage, AK                AK                  2           14709   \n",
       "2443     Rockford, IL                IL                 17           14512   \n",
       "2444     Unalaska, AK                AK                  2           14738   \n",
       "\n",
       "     dest_city_market_id dest         dest_city_name  dest_state_abr  \\\n",
       "2440               31813  FVQ  Donlin Creek Mine, AK              AK   \n",
       "2441               34816  SHX           Shageluk, AK              AK   \n",
       "2442               30073  SCC          Deadhorse, AK              AK   \n",
       "2443               34512  RFD           Rockford, IL              IL   \n",
       "2444               34738  SDP          Sandpoint, AK              AK   \n",
       "\n",
       "      dest_state_fips cargo  \n",
       "2440                2   1.0  \n",
       "2441                2   1.0  \n",
       "2442                2   1.0  \n",
       "2443               17   2.0  \n",
       "2444                2   2.0  \n",
       "\n",
       "[5 rows x 24 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "flights[\"cargo\"] = flights[\"freight\"] + flights[\"mail\"]\n",
    "flights.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a29bb7f1",
   "metadata": {},
   "source": [
    "I want to also convert the air time and ramp to ramp times into hours instead of minutes instead of the minutes. This is easier to visualise instead of seeing times in minutes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "7ebfca83",
   "metadata": {},
   "outputs": [],
   "source": [
    "flights[\"air_time_hours\"] = round(flights[\"air_time\"] / 60, 2)\n",
    "flights[\"ramp_to_ramp_hours\"] = round(flights[\"ramp_to_ramp\"] / 60, 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c0aa6698",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>departures_scheduled</th>\n",
       "      <th>departures_performed</th>\n",
       "      <th>seats</th>\n",
       "      <th>passengers</th>\n",
       "      <th>freight</th>\n",
       "      <th>mail</th>\n",
       "      <th>distance</th>\n",
       "      <th>ramp_to_ramp</th>\n",
       "      <th>air_time</th>\n",
       "      <th>unique_carrier</th>\n",
       "      <th>...</th>\n",
       "      <th>origin_state_fips</th>\n",
       "      <th>dest_airport_id</th>\n",
       "      <th>dest_city_market_id</th>\n",
       "      <th>dest</th>\n",
       "      <th>dest_city_name</th>\n",
       "      <th>dest_state_abr</th>\n",
       "      <th>dest_state_fips</th>\n",
       "      <th>cargo</th>\n",
       "      <th>air_time_hours</th>\n",
       "      <th>ramp_to_ramp_hours</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2440</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>277.0</td>\n",
       "      <td>72.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>L2</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>11813</td>\n",
       "      <td>31813</td>\n",
       "      <td>FVQ</td>\n",
       "      <td>Donlin Creek Mine, AK</td>\n",
       "      <td>AK</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.10</td>\n",
       "      <td>1.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2441</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>295.0</td>\n",
       "      <td>82.0</td>\n",
       "      <td>77.0</td>\n",
       "      <td>KO</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>14816</td>\n",
       "      <td>34816</td>\n",
       "      <td>SHX</td>\n",
       "      <td>Shageluk, AK</td>\n",
       "      <td>AK</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.28</td>\n",
       "      <td>1.37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2442</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>626.0</td>\n",
       "      <td>126.0</td>\n",
       "      <td>114.0</td>\n",
       "      <td>L2</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>14709</td>\n",
       "      <td>30073</td>\n",
       "      <td>SCC</td>\n",
       "      <td>Deadhorse, AK</td>\n",
       "      <td>AK</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.90</td>\n",
       "      <td>2.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2443</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>5Y</td>\n",
       "      <td>...</td>\n",
       "      <td>17</td>\n",
       "      <td>14512</td>\n",
       "      <td>34512</td>\n",
       "      <td>RFD</td>\n",
       "      <td>Rockford, IL</td>\n",
       "      <td>IL</td>\n",
       "      <td>17</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.63</td>\n",
       "      <td>0.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2444</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>261.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>KO</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>14738</td>\n",
       "      <td>34738</td>\n",
       "      <td>SDP</td>\n",
       "      <td>Sandpoint, AK</td>\n",
       "      <td>AK</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.93</td>\n",
       "      <td>1.10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 26 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      departures_scheduled  departures_performed  seats  passengers  freight  \\\n",
       "2440                   0.0                   1.0    0.0         0.0      1.0   \n",
       "2441                   0.0                   1.0    0.0         0.0      1.0   \n",
       "2442                   0.0                   1.0    0.0         0.0      1.0   \n",
       "2443                   0.0                   1.0    0.0         0.0      2.0   \n",
       "2444                   0.0                   1.0    0.0         0.0      2.0   \n",
       "\n",
       "      mail  distance  ramp_to_ramp  air_time unique_carrier  ...  \\\n",
       "2440   0.0     277.0          72.0      66.0             L2  ...   \n",
       "2441   0.0     295.0          82.0      77.0             KO  ...   \n",
       "2442   0.0     626.0         126.0     114.0             L2  ...   \n",
       "2443   0.0       0.0          48.0      38.0             5Y  ...   \n",
       "2444   0.0     261.0          66.0      56.0             KO  ...   \n",
       "\n",
       "     origin_state_fips  dest_airport_id  dest_city_market_id dest  \\\n",
       "2440                 2            11813                31813  FVQ   \n",
       "2441                 2            14816                34816  SHX   \n",
       "2442                 2            14709                30073  SCC   \n",
       "2443                17            14512                34512  RFD   \n",
       "2444                 2            14738                34738  SDP   \n",
       "\n",
       "             dest_city_name dest_state_abr  dest_state_fips  cargo  \\\n",
       "2440  Donlin Creek Mine, AK             AK                2    1.0   \n",
       "2441           Shageluk, AK             AK                2    1.0   \n",
       "2442          Deadhorse, AK             AK                2    1.0   \n",
       "2443           Rockford, IL             IL               17    2.0   \n",
       "2444          Sandpoint, AK             AK                2    2.0   \n",
       "\n",
       "      air_time_hours ramp_to_ramp_hours  \n",
       "2440            1.10               1.20  \n",
       "2441            1.28               1.37  \n",
       "2442            1.90               2.10  \n",
       "2443            0.63               0.80  \n",
       "2444            0.93               1.10  \n",
       "\n",
       "[5 rows x 26 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "flights.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d3a41db",
   "metadata": {},
   "source": [
    "Finally I want to compute the ratio of passengers to the number of seats. This allows us to see how well flights are selling. Routes with a higher ratio have flights that fill up more seats which could be an indicator of how indemand the route is. Routes with high numbers of passengers and high ratios would be the first corridor to study further."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "45b9adda",
   "metadata": {},
   "outputs": [],
   "source": [
    "flights[\"passenger_seats_ratio\"] = flights[\"passengers\"] / flights[\"seats\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d2a451aa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>departures_scheduled</th>\n",
       "      <th>departures_performed</th>\n",
       "      <th>seats</th>\n",
       "      <th>passengers</th>\n",
       "      <th>freight</th>\n",
       "      <th>mail</th>\n",
       "      <th>distance</th>\n",
       "      <th>ramp_to_ramp</th>\n",
       "      <th>air_time</th>\n",
       "      <th>unique_carrier</th>\n",
       "      <th>...</th>\n",
       "      <th>dest_airport_id</th>\n",
       "      <th>dest_city_market_id</th>\n",
       "      <th>dest</th>\n",
       "      <th>dest_city_name</th>\n",
       "      <th>dest_state_abr</th>\n",
       "      <th>dest_state_fips</th>\n",
       "      <th>cargo</th>\n",
       "      <th>air_time_hours</th>\n",
       "      <th>ramp_to_ramp_hours</th>\n",
       "      <th>passenger_seats_ratio</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2440</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>277.0</td>\n",
       "      <td>72.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>L2</td>\n",
       "      <td>...</td>\n",
       "      <td>11813</td>\n",
       "      <td>31813</td>\n",
       "      <td>FVQ</td>\n",
       "      <td>Donlin Creek Mine, AK</td>\n",
       "      <td>AK</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.10</td>\n",
       "      <td>1.20</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2441</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>295.0</td>\n",
       "      <td>82.0</td>\n",
       "      <td>77.0</td>\n",
       "      <td>KO</td>\n",
       "      <td>...</td>\n",
       "      <td>14816</td>\n",
       "      <td>34816</td>\n",
       "      <td>SHX</td>\n",
       "      <td>Shageluk, AK</td>\n",
       "      <td>AK</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.28</td>\n",
       "      <td>1.37</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2442</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>626.0</td>\n",
       "      <td>126.0</td>\n",
       "      <td>114.0</td>\n",
       "      <td>L2</td>\n",
       "      <td>...</td>\n",
       "      <td>14709</td>\n",
       "      <td>30073</td>\n",
       "      <td>SCC</td>\n",
       "      <td>Deadhorse, AK</td>\n",
       "      <td>AK</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.90</td>\n",
       "      <td>2.10</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2443</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>5Y</td>\n",
       "      <td>...</td>\n",
       "      <td>14512</td>\n",
       "      <td>34512</td>\n",
       "      <td>RFD</td>\n",
       "      <td>Rockford, IL</td>\n",
       "      <td>IL</td>\n",
       "      <td>17</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.63</td>\n",
       "      <td>0.80</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2444</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>261.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>KO</td>\n",
       "      <td>...</td>\n",
       "      <td>14738</td>\n",
       "      <td>34738</td>\n",
       "      <td>SDP</td>\n",
       "      <td>Sandpoint, AK</td>\n",
       "      <td>AK</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.93</td>\n",
       "      <td>1.10</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 27 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      departures_scheduled  departures_performed  seats  passengers  freight  \\\n",
       "2440                   0.0                   1.0    0.0         0.0      1.0   \n",
       "2441                   0.0                   1.0    0.0         0.0      1.0   \n",
       "2442                   0.0                   1.0    0.0         0.0      1.0   \n",
       "2443                   0.0                   1.0    0.0         0.0      2.0   \n",
       "2444                   0.0                   1.0    0.0         0.0      2.0   \n",
       "\n",
       "      mail  distance  ramp_to_ramp  air_time unique_carrier  ...  \\\n",
       "2440   0.0     277.0          72.0      66.0             L2  ...   \n",
       "2441   0.0     295.0          82.0      77.0             KO  ...   \n",
       "2442   0.0     626.0         126.0     114.0             L2  ...   \n",
       "2443   0.0       0.0          48.0      38.0             5Y  ...   \n",
       "2444   0.0     261.0          66.0      56.0             KO  ...   \n",
       "\n",
       "     dest_airport_id  dest_city_market_id  dest         dest_city_name  \\\n",
       "2440           11813                31813   FVQ  Donlin Creek Mine, AK   \n",
       "2441           14816                34816   SHX           Shageluk, AK   \n",
       "2442           14709                30073   SCC          Deadhorse, AK   \n",
       "2443           14512                34512   RFD           Rockford, IL   \n",
       "2444           14738                34738   SDP          Sandpoint, AK   \n",
       "\n",
       "     dest_state_abr dest_state_fips  cargo  air_time_hours  \\\n",
       "2440             AK               2    1.0            1.10   \n",
       "2441             AK               2    1.0            1.28   \n",
       "2442             AK               2    1.0            1.90   \n",
       "2443             IL              17    2.0            0.63   \n",
       "2444             AK               2    2.0            0.93   \n",
       "\n",
       "      ramp_to_ramp_hours passenger_seats_ratio  \n",
       "2440                1.20                   NaN  \n",
       "2441                1.37                   NaN  \n",
       "2442                2.10                   NaN  \n",
       "2443                0.80                   NaN  \n",
       "2444                1.10                   NaN  \n",
       "\n",
       "[5 rows x 27 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "flights.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4670e4af",
   "metadata": {},
   "source": [
    "This created NaN values since many of the flights contained 0 seats, to fix this, we will convert the NaN values we just created into 0."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "dda2628c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "departures_scheduled     0\n",
       "departures_performed     0\n",
       "seats                    0\n",
       "passengers               0\n",
       "freight                  0\n",
       "mail                     0\n",
       "distance                 0\n",
       "ramp_to_ramp             0\n",
       "air_time                 0\n",
       "unique_carrier           0\n",
       "unique_carrier_name      0\n",
       "origin_airport_id        0\n",
       "origin_city_market_id    0\n",
       "origin                   0\n",
       "origin_city_name         0\n",
       "origin_state_abr         0\n",
       "origin_state_fips        0\n",
       "dest_airport_id          0\n",
       "dest_city_market_id      0\n",
       "dest                     0\n",
       "dest_city_name           0\n",
       "dest_state_abr           0\n",
       "dest_state_fips          0\n",
       "cargo                    0\n",
       "air_time_hours           0\n",
       "ramp_to_ramp_hours       0\n",
       "passenger_seats_ratio    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "flights['passenger_seats_ratio'] = flights['passenger_seats_ratio'].fillna(0)\n",
    "flights.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f379e73",
   "metadata": {},
   "source": [
    "Finally, I want to create two different dataframes. One of these will contain just flights that carried passengers, the other one will be flights that just carried freight. This will be useful in future analysis to analyze just passenger flights to study the viability of passenger rail and to study the viability of adding cargo rail to the corridor as well."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8daf6b11",
   "metadata": {},
   "source": [
    "### Subsetting Data Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "b2eebbbd",
   "metadata": {},
   "outputs": [],
   "source": [
    "passenger_flights = flights[flights[\"passengers\"] != 0]\n",
    "cargo_flights = flights[flights[\"passengers\"] == 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "1529b9c1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(289974, 27)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "passenger_flights.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "24d5cf2a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(35493, 27)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cargo_flights.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c435a63",
   "metadata": {},
   "source": [
    "## Project Milestone 3"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4aae134d",
   "metadata": {},
   "source": [
    "The first step that we need to do is to import our website data, we will accomplish this through Beautiful Soup."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "2a44d026",
   "metadata": {},
   "outputs": [],
   "source": [
    "website_url = requests.get(\"https://en.wikipedia.org/wiki/List_of_United_States_cities_by_population\").text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "9ffb6789",
   "metadata": {},
   "outputs": [],
   "source": [
    "soup = BeautifulSoup(website_url, 'lxml')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "4334a54b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n"
     ]
    }
   ],
   "source": [
    "all_tables = soup.find_all(\"table\")\n",
    "print(len(all_tables))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c977c6e",
   "metadata": {},
   "source": [
    "We can see that we have 14 tables from the website. The specific one we want is a sortable wikitable that we can find by using a webrowser and looking at the html file. We will now find that specific table."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "74acd8a2",
   "metadata": {},
   "outputs": [],
   "source": [
    "My_table = soup.find('table',{'class':'sortable wikitable sticky-header static-row-numbers sort-under col1left col2center'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "f8d04e07",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "bs4.element.Tag"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(My_table)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69c40d9b",
   "metadata": {},
   "source": [
    "Now that we have the correct table, we can first extract the column headers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "4b79ef66",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['City',\n",
       " 'ST',\n",
       " '2022estimate',\n",
       " '2020census',\n",
       " 'Change',\n",
       " '2020 land area',\n",
       " '2020 density',\n",
       " 'Location']"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sources = My_table.tbody.findAll('tr', recursive=False)[0]\n",
    "list_of_sources = [source for source in sources.findAll('th')]\n",
    "source_names = [source.getText().strip() for source in list_of_sources]\n",
    "source_names"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c260ee30",
   "metadata": {},
   "source": [
    "After reading in the headers, we are missing two of them. We are missing the 2020 Land Area in km-squared as well as the 2020 Density in km-squared. We will add both of these columns by using the insert function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "51da79ec",
   "metadata": {},
   "outputs": [],
   "source": [
    "source_names.insert(6, '2020 land area km')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "4a4a8f2f",
   "metadata": {},
   "outputs": [],
   "source": [
    "source_names.insert(8, '2020 density km')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "5108cb18",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['City',\n",
       " 'ST',\n",
       " '2022estimate',\n",
       " '2020census',\n",
       " 'Change',\n",
       " '2020 land area',\n",
       " '2020 land area km',\n",
       " '2020 density',\n",
       " '2020 density km',\n",
       " 'Location']"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "source_names"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dbd4b604",
   "metadata": {},
   "source": [
    "Now we have our complete list of headers, we can move on to reading in our data. We can accomplish thi by finding all of the tr blocks starting with the 4th entry and continuting to the end of our table."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "c4bbdd88",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = My_table.tbody.findAll('tr', recursive=False)[3:]\n",
    "data_tables = []\n",
    "for tr in data:\n",
    "    data_tables.append(tr.findAll('td', recursive=False))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9e92ec80",
   "metadata": {},
   "source": [
    "Now that we have all of our data, we need to get it into a format that is readable. We can accomplish this by using the function getText as well as striping the string so that we get just the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "b72fdaf5",
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(len(data_tables)):\n",
    "    for j in range(len(data_tables[i])):\n",
    "        data_tables[i][j] = data_tables[i][j].getText().strip()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dfa46890",
   "metadata": {},
   "source": [
    "Now that we have both our data set and our column names, we can creat our pandas dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "1e922114",
   "metadata": {},
   "outputs": [],
   "source": [
    "population = pd.DataFrame(data_tables, columns=source_names)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "3f0949ed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>City</th>\n",
       "      <th>ST</th>\n",
       "      <th>2022estimate</th>\n",
       "      <th>2020census</th>\n",
       "      <th>Change</th>\n",
       "      <th>2020 land area</th>\n",
       "      <th>2020 land area km</th>\n",
       "      <th>2020 density</th>\n",
       "      <th>2020 density km</th>\n",
       "      <th>Location</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Los Angeles</td>\n",
       "      <td>CA</td>\n",
       "      <td>3,822,238</td>\n",
       "      <td>3,898,747</td>\n",
       "      <td>âˆ’1.96%</td>\n",
       "      <td>469.5</td>\n",
       "      <td>1,216.0</td>\n",
       "      <td>8,304</td>\n",
       "      <td>3,206</td>\n",
       "      <td>34Â°01â€²N 118Â°25â€²Wï»¿ / ï»¿34.02Â°N 118.41Â°Wï»¿ / 34.02...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Chicago</td>\n",
       "      <td>IL</td>\n",
       "      <td>2,665,039</td>\n",
       "      <td>2,746,388</td>\n",
       "      <td>âˆ’2.96%</td>\n",
       "      <td>227.7</td>\n",
       "      <td>589.7</td>\n",
       "      <td>12,061</td>\n",
       "      <td>4,657</td>\n",
       "      <td>41Â°50â€²N 87Â°41â€²Wï»¿ / ï»¿41.84Â°N 87.68Â°Wï»¿ / 41.84; ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Houston</td>\n",
       "      <td>TX</td>\n",
       "      <td>2,302,878</td>\n",
       "      <td>2,304,580</td>\n",
       "      <td>âˆ’0.07%</td>\n",
       "      <td>640.4</td>\n",
       "      <td>1,658.6</td>\n",
       "      <td>3,599</td>\n",
       "      <td>1,390</td>\n",
       "      <td>29Â°47â€²N 95Â°23â€²Wï»¿ / ï»¿29.79Â°N 95.39Â°Wï»¿ / 29.79; ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Phoenix</td>\n",
       "      <td>AZ</td>\n",
       "      <td>1,644,409</td>\n",
       "      <td>1,608,139</td>\n",
       "      <td>+2.26%</td>\n",
       "      <td>518.0</td>\n",
       "      <td>1,341.6</td>\n",
       "      <td>3,105</td>\n",
       "      <td>1,199</td>\n",
       "      <td>33Â°34â€²N 112Â°05â€²Wï»¿ / ï»¿33.57Â°N 112.09Â°Wï»¿ / 33.57...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Philadelphia[d]</td>\n",
       "      <td>PA</td>\n",
       "      <td>1,567,258</td>\n",
       "      <td>1,603,797</td>\n",
       "      <td>âˆ’2.28%</td>\n",
       "      <td>134.4</td>\n",
       "      <td>348.1</td>\n",
       "      <td>11,933</td>\n",
       "      <td>4,607</td>\n",
       "      <td>40Â°01â€²N 75Â°08â€²Wï»¿ / ï»¿40.01Â°N 75.13Â°Wï»¿ / 40.01; ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              City  ST 2022estimate 2020census  Change 2020 land area  \\\n",
       "0      Los Angeles  CA    3,822,238  3,898,747  âˆ’1.96%          469.5   \n",
       "1          Chicago  IL    2,665,039  2,746,388  âˆ’2.96%          227.7   \n",
       "2          Houston  TX    2,302,878  2,304,580  âˆ’0.07%          640.4   \n",
       "3          Phoenix  AZ    1,644,409  1,608,139  +2.26%          518.0   \n",
       "4  Philadelphia[d]  PA    1,567,258  1,603,797  âˆ’2.28%          134.4   \n",
       "\n",
       "  2020 land area km 2020 density 2020 density km  \\\n",
       "0           1,216.0        8,304           3,206   \n",
       "1             589.7       12,061           4,657   \n",
       "2           1,658.6        3,599           1,390   \n",
       "3           1,341.6        3,105           1,199   \n",
       "4             348.1       11,933           4,607   \n",
       "\n",
       "                                            Location  \n",
       "0  34Â°01â€²N 118Â°25â€²Wï»¿ / ï»¿34.02Â°N 118.41Â°Wï»¿ / 34.02...  \n",
       "1  41Â°50â€²N 87Â°41â€²Wï»¿ / ï»¿41.84Â°N 87.68Â°Wï»¿ / 41.84; ...  \n",
       "2  29Â°47â€²N 95Â°23â€²Wï»¿ / ï»¿29.79Â°N 95.39Â°Wï»¿ / 29.79; ...  \n",
       "3  33Â°34â€²N 112Â°05â€²Wï»¿ / ï»¿33.57Â°N 112.09Â°Wï»¿ / 33.57...  \n",
       "4  40Â°01â€²N 75Â°08â€²Wï»¿ / ï»¿40.01Â°N 75.13Â°Wï»¿ / 40.01; ...  "
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "population.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "7143497c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "City                 object\n",
       "ST                   object\n",
       "2022estimate         object\n",
       "2020census           object\n",
       "Change               object\n",
       "2020 land area       object\n",
       "2020 land area km    object\n",
       "2020 density         object\n",
       "2020 density km      object\n",
       "Location             object\n",
       "dtype: object"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "population.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "019a155c",
   "metadata": {},
   "source": [
    "Looking at our list of column data types, we can see that all of our columns were read in as objects were some columns (our populations, percent change, areas) should be numeric values instead."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "d5213861",
   "metadata": {},
   "outputs": [],
   "source": [
    "import string\n",
    "for pop in population[\"2022estimate\"]:\n",
    "    pop = pop.translate(str.maketrans('', '', string.punctuation))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "b44f5e7a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.simplefilter(action='ignore', category=FutureWarning)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "26763274",
   "metadata": {},
   "outputs": [],
   "source": [
    "population[\"2022estimate\"] = population['2022estimate'].str.replace('[{}]'.format(string.punctuation), '')\n",
    "population[\"2022estimate\"] = pd.to_numeric(population[\"2022estimate\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "158f1185",
   "metadata": {},
   "outputs": [],
   "source": [
    "population[\"2020census\"] = population['2020census'].str.replace('[{}]'.format(string.punctuation), '')\n",
    "population[\"2020census\"] = pd.to_numeric(population[\"2020census\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "a13c774b",
   "metadata": {},
   "outputs": [],
   "source": [
    "population[\"2020 land area\"] = population['2020 land area'].str.replace(',', '')\n",
    "population[\"2020 land area\"] = pd.to_numeric(population[\"2020 land area\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "d3166017",
   "metadata": {},
   "outputs": [],
   "source": [
    "population[\"2020 land area km\"] = population['2020 land area km'].str.replace(',', '')\n",
    "population[\"2020 land area km\"] = pd.to_numeric(population[\"2020 land area km\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "18d02562",
   "metadata": {},
   "outputs": [],
   "source": [
    "population[\"2020 density\"] = population['2020 density'].str.replace(',', '')\n",
    "population[\"2020 density\"] = pd.to_numeric(population[\"2020 density\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "8775860e",
   "metadata": {},
   "outputs": [],
   "source": [
    "population[\"2020 density km\"] = population['2020 density km'].str.replace(',', '')\n",
    "population[\"2020 density km\"] = pd.to_numeric(population[\"2020 density km\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2fdb3985",
   "metadata": {},
   "source": [
    "We can easily convert the Change column to be a numeric by calculating the percentage change between our 2022 estimate and 2020 census columns and then multiply this by 100. We have rounded the value to keep our formating consistent with the wikipedia table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "f9110471",
   "metadata": {},
   "outputs": [],
   "source": [
    "population[\"Change\"] = round((population[\"2022estimate\"] - population[\"2020census\"]) /\n",
    "                              population[\"2020census\"], 4) * 100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "739f28c3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>City</th>\n",
       "      <th>ST</th>\n",
       "      <th>2022estimate</th>\n",
       "      <th>2020census</th>\n",
       "      <th>Change</th>\n",
       "      <th>2020 land area</th>\n",
       "      <th>2020 land area km</th>\n",
       "      <th>2020 density</th>\n",
       "      <th>2020 density km</th>\n",
       "      <th>Location</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Los Angeles</td>\n",
       "      <td>CA</td>\n",
       "      <td>3822238</td>\n",
       "      <td>3898747</td>\n",
       "      <td>-1.96</td>\n",
       "      <td>469.5</td>\n",
       "      <td>1216.0</td>\n",
       "      <td>8304</td>\n",
       "      <td>3206</td>\n",
       "      <td>34Â°01â€²N 118Â°25â€²Wï»¿ / ï»¿34.02Â°N 118.41Â°Wï»¿ / 34.02...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Chicago</td>\n",
       "      <td>IL</td>\n",
       "      <td>2665039</td>\n",
       "      <td>2746388</td>\n",
       "      <td>-2.96</td>\n",
       "      <td>227.7</td>\n",
       "      <td>589.7</td>\n",
       "      <td>12061</td>\n",
       "      <td>4657</td>\n",
       "      <td>41Â°50â€²N 87Â°41â€²Wï»¿ / ï»¿41.84Â°N 87.68Â°Wï»¿ / 41.84; ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Houston</td>\n",
       "      <td>TX</td>\n",
       "      <td>2302878</td>\n",
       "      <td>2304580</td>\n",
       "      <td>-0.07</td>\n",
       "      <td>640.4</td>\n",
       "      <td>1658.6</td>\n",
       "      <td>3599</td>\n",
       "      <td>1390</td>\n",
       "      <td>29Â°47â€²N 95Â°23â€²Wï»¿ / ï»¿29.79Â°N 95.39Â°Wï»¿ / 29.79; ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Phoenix</td>\n",
       "      <td>AZ</td>\n",
       "      <td>1644409</td>\n",
       "      <td>1608139</td>\n",
       "      <td>2.26</td>\n",
       "      <td>518.0</td>\n",
       "      <td>1341.6</td>\n",
       "      <td>3105</td>\n",
       "      <td>1199</td>\n",
       "      <td>33Â°34â€²N 112Â°05â€²Wï»¿ / ï»¿33.57Â°N 112.09Â°Wï»¿ / 33.57...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Philadelphia[d]</td>\n",
       "      <td>PA</td>\n",
       "      <td>1567258</td>\n",
       "      <td>1603797</td>\n",
       "      <td>-2.28</td>\n",
       "      <td>134.4</td>\n",
       "      <td>348.1</td>\n",
       "      <td>11933</td>\n",
       "      <td>4607</td>\n",
       "      <td>40Â°01â€²N 75Â°08â€²Wï»¿ / ï»¿40.01Â°N 75.13Â°Wï»¿ / 40.01; ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              City  ST  2022estimate  2020census  Change  2020 land area  \\\n",
       "0      Los Angeles  CA       3822238     3898747   -1.96           469.5   \n",
       "1          Chicago  IL       2665039     2746388   -2.96           227.7   \n",
       "2          Houston  TX       2302878     2304580   -0.07           640.4   \n",
       "3          Phoenix  AZ       1644409     1608139    2.26           518.0   \n",
       "4  Philadelphia[d]  PA       1567258     1603797   -2.28           134.4   \n",
       "\n",
       "   2020 land area km  2020 density  2020 density km  \\\n",
       "0             1216.0          8304             3206   \n",
       "1              589.7         12061             4657   \n",
       "2             1658.6          3599             1390   \n",
       "3             1341.6          3105             1199   \n",
       "4              348.1         11933             4607   \n",
       "\n",
       "                                            Location  \n",
       "0  34Â°01â€²N 118Â°25â€²Wï»¿ / ï»¿34.02Â°N 118.41Â°Wï»¿ / 34.02...  \n",
       "1  41Â°50â€²N 87Â°41â€²Wï»¿ / ï»¿41.84Â°N 87.68Â°Wï»¿ / 41.84; ...  \n",
       "2  29Â°47â€²N 95Â°23â€²Wï»¿ / ï»¿29.79Â°N 95.39Â°Wï»¿ / 29.79; ...  \n",
       "3  33Â°34â€²N 112Â°05â€²Wï»¿ / ï»¿33.57Â°N 112.09Â°Wï»¿ / 33.57...  \n",
       "4  40Â°01â€²N 75Â°08â€²Wï»¿ / ï»¿40.01Â°N 75.13Â°Wï»¿ / 40.01; ...  "
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "population.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "cbb8affe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "City                  object\n",
       "ST                    object\n",
       "2022estimate           int64\n",
       "2020census             int64\n",
       "Change               float64\n",
       "2020 land area       float64\n",
       "2020 land area km    float64\n",
       "2020 density           int64\n",
       "2020 density km        int64\n",
       "Location              object\n",
       "dtype: object"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "population.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "132eed53",
   "metadata": {},
   "source": [
    "The location column will not be useful for us so we will drop it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "a420d660",
   "metadata": {},
   "outputs": [],
   "source": [
    "population = population.drop(columns=['Location'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "5e11afb5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>City</th>\n",
       "      <th>ST</th>\n",
       "      <th>2022estimate</th>\n",
       "      <th>2020census</th>\n",
       "      <th>Change</th>\n",
       "      <th>2020 land area</th>\n",
       "      <th>2020 land area km</th>\n",
       "      <th>2020 density</th>\n",
       "      <th>2020 density km</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Los Angeles</td>\n",
       "      <td>CA</td>\n",
       "      <td>3822238</td>\n",
       "      <td>3898747</td>\n",
       "      <td>-1.96</td>\n",
       "      <td>469.5</td>\n",
       "      <td>1216.0</td>\n",
       "      <td>8304</td>\n",
       "      <td>3206</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Chicago</td>\n",
       "      <td>IL</td>\n",
       "      <td>2665039</td>\n",
       "      <td>2746388</td>\n",
       "      <td>-2.96</td>\n",
       "      <td>227.7</td>\n",
       "      <td>589.7</td>\n",
       "      <td>12061</td>\n",
       "      <td>4657</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Houston</td>\n",
       "      <td>TX</td>\n",
       "      <td>2302878</td>\n",
       "      <td>2304580</td>\n",
       "      <td>-0.07</td>\n",
       "      <td>640.4</td>\n",
       "      <td>1658.6</td>\n",
       "      <td>3599</td>\n",
       "      <td>1390</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Phoenix</td>\n",
       "      <td>AZ</td>\n",
       "      <td>1644409</td>\n",
       "      <td>1608139</td>\n",
       "      <td>2.26</td>\n",
       "      <td>518.0</td>\n",
       "      <td>1341.6</td>\n",
       "      <td>3105</td>\n",
       "      <td>1199</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Philadelphia[d]</td>\n",
       "      <td>PA</td>\n",
       "      <td>1567258</td>\n",
       "      <td>1603797</td>\n",
       "      <td>-2.28</td>\n",
       "      <td>134.4</td>\n",
       "      <td>348.1</td>\n",
       "      <td>11933</td>\n",
       "      <td>4607</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              City  ST  2022estimate  2020census  Change  2020 land area  \\\n",
       "0      Los Angeles  CA       3822238     3898747   -1.96           469.5   \n",
       "1          Chicago  IL       2665039     2746388   -2.96           227.7   \n",
       "2          Houston  TX       2302878     2304580   -0.07           640.4   \n",
       "3          Phoenix  AZ       1644409     1608139    2.26           518.0   \n",
       "4  Philadelphia[d]  PA       1567258     1603797   -2.28           134.4   \n",
       "\n",
       "   2020 land area km  2020 density  2020 density km  \n",
       "0             1216.0          8304             3206  \n",
       "1              589.7         12061             4657  \n",
       "2             1658.6          3599             1390  \n",
       "3             1341.6          3105             1199  \n",
       "4              348.1         11933             4607  "
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "population.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66b4e734",
   "metadata": {},
   "source": [
    "Next, we are going to rename all of columns following python naming conventions so that it is consistent across all of our dataframes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "b9858de6",
   "metadata": {},
   "outputs": [],
   "source": [
    "population = population.rename(columns={'City': 'city', 'ST': 'state', '2022estimate': '2022_estimate', '2020census': '2020_census',\n",
    "                        'Change': 'change', '2020 land area': '2020_land_area', '2020 land area km': '2020_land_area_km',\n",
    "                        '2020 density': '2020_density', '2020 density km': '2020_density_km'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "d47ca593",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>city</th>\n",
       "      <th>state</th>\n",
       "      <th>2022_estimate</th>\n",
       "      <th>2020_census</th>\n",
       "      <th>change</th>\n",
       "      <th>2020_land_area</th>\n",
       "      <th>2020_land_area_km</th>\n",
       "      <th>2020_density</th>\n",
       "      <th>2020_density_km</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Los Angeles</td>\n",
       "      <td>CA</td>\n",
       "      <td>3822238</td>\n",
       "      <td>3898747</td>\n",
       "      <td>-1.96</td>\n",
       "      <td>469.5</td>\n",
       "      <td>1216.0</td>\n",
       "      <td>8304</td>\n",
       "      <td>3206</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Chicago</td>\n",
       "      <td>IL</td>\n",
       "      <td>2665039</td>\n",
       "      <td>2746388</td>\n",
       "      <td>-2.96</td>\n",
       "      <td>227.7</td>\n",
       "      <td>589.7</td>\n",
       "      <td>12061</td>\n",
       "      <td>4657</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Houston</td>\n",
       "      <td>TX</td>\n",
       "      <td>2302878</td>\n",
       "      <td>2304580</td>\n",
       "      <td>-0.07</td>\n",
       "      <td>640.4</td>\n",
       "      <td>1658.6</td>\n",
       "      <td>3599</td>\n",
       "      <td>1390</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Phoenix</td>\n",
       "      <td>AZ</td>\n",
       "      <td>1644409</td>\n",
       "      <td>1608139</td>\n",
       "      <td>2.26</td>\n",
       "      <td>518.0</td>\n",
       "      <td>1341.6</td>\n",
       "      <td>3105</td>\n",
       "      <td>1199</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Philadelphia[d]</td>\n",
       "      <td>PA</td>\n",
       "      <td>1567258</td>\n",
       "      <td>1603797</td>\n",
       "      <td>-2.28</td>\n",
       "      <td>134.4</td>\n",
       "      <td>348.1</td>\n",
       "      <td>11933</td>\n",
       "      <td>4607</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              city state  2022_estimate  2020_census  change  2020_land_area  \\\n",
       "0      Los Angeles    CA        3822238      3898747   -1.96           469.5   \n",
       "1          Chicago    IL        2665039      2746388   -2.96           227.7   \n",
       "2          Houston    TX        2302878      2304580   -0.07           640.4   \n",
       "3          Phoenix    AZ        1644409      1608139    2.26           518.0   \n",
       "4  Philadelphia[d]    PA        1567258      1603797   -2.28           134.4   \n",
       "\n",
       "   2020_land_area_km  2020_density  2020_density_km  \n",
       "0             1216.0          8304             3206  \n",
       "1              589.7         12061             4657  \n",
       "2             1658.6          3599             1390  \n",
       "3             1341.6          3105             1199  \n",
       "4              348.1         11933             4607  "
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "population.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e9e48b18",
   "metadata": {},
   "source": [
    "Some of entries for cities have a set of brackes ([]) with a letter inside of it for footnotes found on the wikipedia page. To fix this, we will run a loop to find all cities that end in ] and replace the city name without the brackets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "c695ea08",
   "metadata": {},
   "outputs": [],
   "source": [
    "for city in population['city']:\n",
    "    if city.endswith(']'):\n",
    "        population.replace(city, city[:-3], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "e886c3ea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>city</th>\n",
       "      <th>state</th>\n",
       "      <th>2022_estimate</th>\n",
       "      <th>2020_census</th>\n",
       "      <th>change</th>\n",
       "      <th>2020_land_area</th>\n",
       "      <th>2020_land_area_km</th>\n",
       "      <th>2020_density</th>\n",
       "      <th>2020_density_km</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Los Angeles</td>\n",
       "      <td>CA</td>\n",
       "      <td>3822238</td>\n",
       "      <td>3898747</td>\n",
       "      <td>-1.96</td>\n",
       "      <td>469.5</td>\n",
       "      <td>1216.0</td>\n",
       "      <td>8304</td>\n",
       "      <td>3206</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Chicago</td>\n",
       "      <td>IL</td>\n",
       "      <td>2665039</td>\n",
       "      <td>2746388</td>\n",
       "      <td>-2.96</td>\n",
       "      <td>227.7</td>\n",
       "      <td>589.7</td>\n",
       "      <td>12061</td>\n",
       "      <td>4657</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Houston</td>\n",
       "      <td>TX</td>\n",
       "      <td>2302878</td>\n",
       "      <td>2304580</td>\n",
       "      <td>-0.07</td>\n",
       "      <td>640.4</td>\n",
       "      <td>1658.6</td>\n",
       "      <td>3599</td>\n",
       "      <td>1390</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Phoenix</td>\n",
       "      <td>AZ</td>\n",
       "      <td>1644409</td>\n",
       "      <td>1608139</td>\n",
       "      <td>2.26</td>\n",
       "      <td>518.0</td>\n",
       "      <td>1341.6</td>\n",
       "      <td>3105</td>\n",
       "      <td>1199</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Philadelphia</td>\n",
       "      <td>PA</td>\n",
       "      <td>1567258</td>\n",
       "      <td>1603797</td>\n",
       "      <td>-2.28</td>\n",
       "      <td>134.4</td>\n",
       "      <td>348.1</td>\n",
       "      <td>11933</td>\n",
       "      <td>4607</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           city state  2022_estimate  2020_census  change  2020_land_area  \\\n",
       "0   Los Angeles    CA        3822238      3898747   -1.96           469.5   \n",
       "1       Chicago    IL        2665039      2746388   -2.96           227.7   \n",
       "2       Houston    TX        2302878      2304580   -0.07           640.4   \n",
       "3       Phoenix    AZ        1644409      1608139    2.26           518.0   \n",
       "4  Philadelphia    PA        1567258      1603797   -2.28           134.4   \n",
       "\n",
       "   2020_land_area_km  2020_density  2020_density_km  \n",
       "0             1216.0          8304             3206  \n",
       "1              589.7         12061             4657  \n",
       "2             1658.6          3599             1390  \n",
       "3             1341.6          3105             1199  \n",
       "4              348.1         11933             4607  "
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "population.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "3380b950",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "population.isnull().values.any()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "68543183",
   "metadata": {},
   "outputs": [],
   "source": [
    "population['location'] = population['city'] + ', ' + population['state']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "cd64b358",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>city</th>\n",
       "      <th>state</th>\n",
       "      <th>2022_estimate</th>\n",
       "      <th>2020_census</th>\n",
       "      <th>change</th>\n",
       "      <th>2020_land_area</th>\n",
       "      <th>2020_land_area_km</th>\n",
       "      <th>2020_density</th>\n",
       "      <th>2020_density_km</th>\n",
       "      <th>location</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Los Angeles</td>\n",
       "      <td>CA</td>\n",
       "      <td>3822238</td>\n",
       "      <td>3898747</td>\n",
       "      <td>-1.96</td>\n",
       "      <td>469.5</td>\n",
       "      <td>1216.0</td>\n",
       "      <td>8304</td>\n",
       "      <td>3206</td>\n",
       "      <td>Los Angeles, CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Chicago</td>\n",
       "      <td>IL</td>\n",
       "      <td>2665039</td>\n",
       "      <td>2746388</td>\n",
       "      <td>-2.96</td>\n",
       "      <td>227.7</td>\n",
       "      <td>589.7</td>\n",
       "      <td>12061</td>\n",
       "      <td>4657</td>\n",
       "      <td>Chicago, IL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Houston</td>\n",
       "      <td>TX</td>\n",
       "      <td>2302878</td>\n",
       "      <td>2304580</td>\n",
       "      <td>-0.07</td>\n",
       "      <td>640.4</td>\n",
       "      <td>1658.6</td>\n",
       "      <td>3599</td>\n",
       "      <td>1390</td>\n",
       "      <td>Houston, TX</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Phoenix</td>\n",
       "      <td>AZ</td>\n",
       "      <td>1644409</td>\n",
       "      <td>1608139</td>\n",
       "      <td>2.26</td>\n",
       "      <td>518.0</td>\n",
       "      <td>1341.6</td>\n",
       "      <td>3105</td>\n",
       "      <td>1199</td>\n",
       "      <td>Phoenix, AZ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Philadelphia</td>\n",
       "      <td>PA</td>\n",
       "      <td>1567258</td>\n",
       "      <td>1603797</td>\n",
       "      <td>-2.28</td>\n",
       "      <td>134.4</td>\n",
       "      <td>348.1</td>\n",
       "      <td>11933</td>\n",
       "      <td>4607</td>\n",
       "      <td>Philadelphia, PA</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           city state  2022_estimate  2020_census  change  2020_land_area  \\\n",
       "0   Los Angeles    CA        3822238      3898747   -1.96           469.5   \n",
       "1       Chicago    IL        2665039      2746388   -2.96           227.7   \n",
       "2       Houston    TX        2302878      2304580   -0.07           640.4   \n",
       "3       Phoenix    AZ        1644409      1608139    2.26           518.0   \n",
       "4  Philadelphia    PA        1567258      1603797   -2.28           134.4   \n",
       "\n",
       "   2020_land_area_km  2020_density  2020_density_km          location  \n",
       "0             1216.0          8304             3206   Los Angeles, CA  \n",
       "1              589.7         12061             4657       Chicago, IL  \n",
       "2             1658.6          3599             1390       Houston, TX  \n",
       "3             1341.6          3105             1199       Phoenix, AZ  \n",
       "4              348.1         11933             4607  Philadelphia, PA  "
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "population.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f48f5a54",
   "metadata": {},
   "source": [
    "In summary, we now have a completly cleaned dataset that is ready to be used in further steps. We have cleaned all of our column names so that they are consistent with python naming conventions. We have converted all of our columns containing numbers to be numeric instead of objects and we have dropped unecessary columns. Finally, we have cleaned up all of our city names to remove any unnecessary characters. The only ethical implication would be that we are using a dataset that has been entered by someon else without providing them with any compensation."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c9d70aa",
   "metadata": {},
   "source": [
    "## Project Milestone 4"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "df8f0c46",
   "metadata": {},
   "source": [
    "Our url will be querying data from the BEA to get GDP data for each Metropolitan Area."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "4ccb45f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "url = \"https://apps.bea.gov/api/data?&UserID=6644EF6C-9AB8-4265-835B-6D6F166FEE22&datasetname=REGIONAL&Method=GETDATA&RESULTFORMAT=JSON&GEOFIPS=MSA&TABLENAME=CAINC1&YEAR=2022&LINECODE=1\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "9ddf174e",
   "metadata": {},
   "outputs": [],
   "source": [
    "request = requests.request(\"GET\", url)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "5d3942a4",
   "metadata": {},
   "outputs": [],
   "source": [
    "response = json.loads(request.text)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "caff219a",
   "metadata": {},
   "source": [
    "Looking at the response, we can see that the data we are interested in nested in a couple of dictionaries, we will have to extract it out of these dictionaries before we can use it. The dimension dictionary will be our column names with the data being the GDP data that we want."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "34aef5ae",
   "metadata": {},
   "source": [
    "We will first extract the column names and store them in a list to be used with our dataframe later."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "7861beb0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'Name': 'Code', 'DataType': 'string', 'IsValue': '0'},\n",
       " {'Name': 'GeoFips', 'DataType': 'string', 'IsValue': '0'},\n",
       " {'Name': 'GeoName', 'DataType': 'string', 'IsValue': '0'},\n",
       " {'Name': 'TimePeriod', 'DataType': 'string', 'IsValue': '0'},\n",
       " {'Name': 'DataValue', 'DataType': 'numeric', 'IsValue': '1'},\n",
       " {'Name': 'CL_UNIT', 'DataType': 'string', 'IsValue': '0'},\n",
       " {'Name': 'UNIT_MULT', 'DataType': 'numeric', 'IsValue': '0'}]"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results = response.get('BEAAPI').get('Results')\n",
    "results.get('Dimensions')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "6ab206b8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "list"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(results.get('Dimensions'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "7ab81cea",
   "metadata": {},
   "outputs": [],
   "source": [
    "dimensions = results.get('Dimensions')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "51863ec9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Code',\n",
       " 'GeoFips',\n",
       " 'GeoName',\n",
       " 'TimePeriod',\n",
       " 'DataValue',\n",
       " 'CL_UNIT',\n",
       " 'UNIT_MULT']"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cols = []\n",
    "for dim in dimensions:\n",
    "    cols.append(dim.get('Name'))\n",
    "\n",
    "cols"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "34490ea2",
   "metadata": {},
   "source": [
    "Next, we can get our data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "7f0f0066",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = results.get('Data')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0881dd4",
   "metadata": {},
   "source": [
    "In order to create a dataframe with all of our entries, we will first create an empty dataframe with the column names tha we just got."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "6d6b2583",
   "metadata": {},
   "outputs": [],
   "source": [
    "gdp = pd.DataFrame(columns=cols)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "00eea85a",
   "metadata": {},
   "source": [
    "Next, we will iterate over every entry in our data list. Each of these entries is a dictionary where the keys are the column names. We will get all of our data from the values in the dictionary, store them in a temporary list which will use to create a new dataframe, finally we will concatenate the dataframe for the row with our existing dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "75e11796",
   "metadata": {},
   "outputs": [],
   "source": [
    "for entry in data:\n",
    "    row = []\n",
    "    for key in entry:\n",
    "        row.append(entry[key])\n",
    "    new_row = pd.DataFrame([row], columns=cols)\n",
    "    gdp = pd.concat([gdp, new_row])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "f372dff7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Code</th>\n",
       "      <th>GeoFips</th>\n",
       "      <th>GeoName</th>\n",
       "      <th>TimePeriod</th>\n",
       "      <th>DataValue</th>\n",
       "      <th>CL_UNIT</th>\n",
       "      <th>UNIT_MULT</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>CAINC1-1</td>\n",
       "      <td>00998</td>\n",
       "      <td>United States (Metropolitan Portion)</td>\n",
       "      <td>2022</td>\n",
       "      <td>Thousands of dollars</td>\n",
       "      <td>3</td>\n",
       "      <td>19506221545</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>CAINC1-1</td>\n",
       "      <td>10180</td>\n",
       "      <td>Abilene, TX (Metropolitan Statistical Area)</td>\n",
       "      <td>2022</td>\n",
       "      <td>Thousands of dollars</td>\n",
       "      <td>3</td>\n",
       "      <td>9585333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>CAINC1-1</td>\n",
       "      <td>10420</td>\n",
       "      <td>Akron, OH (Metropolitan Statistical Area)</td>\n",
       "      <td>2022</td>\n",
       "      <td>Thousands of dollars</td>\n",
       "      <td>3</td>\n",
       "      <td>41976094</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>CAINC1-1</td>\n",
       "      <td>10500</td>\n",
       "      <td>Albany, GA (Metropolitan Statistical Area)</td>\n",
       "      <td>2022</td>\n",
       "      <td>Thousands of dollars</td>\n",
       "      <td>3</td>\n",
       "      <td>6690575</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>CAINC1-1</td>\n",
       "      <td>10540</td>\n",
       "      <td>Albany-Lebanon, OR (Metropolitan Statistical A...</td>\n",
       "      <td>2022</td>\n",
       "      <td>Thousands of dollars</td>\n",
       "      <td>3</td>\n",
       "      <td>6845480</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Code GeoFips                                            GeoName  \\\n",
       "0  CAINC1-1   00998               United States (Metropolitan Portion)   \n",
       "0  CAINC1-1   10180        Abilene, TX (Metropolitan Statistical Area)   \n",
       "0  CAINC1-1   10420          Akron, OH (Metropolitan Statistical Area)   \n",
       "0  CAINC1-1   10500         Albany, GA (Metropolitan Statistical Area)   \n",
       "0  CAINC1-1   10540  Albany-Lebanon, OR (Metropolitan Statistical A...   \n",
       "\n",
       "  TimePeriod             DataValue CL_UNIT    UNIT_MULT  \n",
       "0       2022  Thousands of dollars       3  19506221545  \n",
       "0       2022  Thousands of dollars       3      9585333  \n",
       "0       2022  Thousands of dollars       3     41976094  \n",
       "0       2022  Thousands of dollars       3      6690575  \n",
       "0       2022  Thousands of dollars       3      6845480  "
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gdp.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "065ae432",
   "metadata": {},
   "source": [
    "Now, we have all of our data loaded into our dataframe and it is ready for the rest of the cleaning process."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6aa6a103",
   "metadata": {},
   "source": [
    "## Transformation 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "20f670e0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>Code</th>\n",
       "      <th>GeoFips</th>\n",
       "      <th>GeoName</th>\n",
       "      <th>TimePeriod</th>\n",
       "      <th>DataValue</th>\n",
       "      <th>CL_UNIT</th>\n",
       "      <th>UNIT_MULT</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>CAINC1-1</td>\n",
       "      <td>00998</td>\n",
       "      <td>United States (Metropolitan Portion)</td>\n",
       "      <td>2022</td>\n",
       "      <td>Thousands of dollars</td>\n",
       "      <td>3</td>\n",
       "      <td>19506221545</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>CAINC1-1</td>\n",
       "      <td>10180</td>\n",
       "      <td>Abilene, TX (Metropolitan Statistical Area)</td>\n",
       "      <td>2022</td>\n",
       "      <td>Thousands of dollars</td>\n",
       "      <td>3</td>\n",
       "      <td>9585333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>CAINC1-1</td>\n",
       "      <td>10420</td>\n",
       "      <td>Akron, OH (Metropolitan Statistical Area)</td>\n",
       "      <td>2022</td>\n",
       "      <td>Thousands of dollars</td>\n",
       "      <td>3</td>\n",
       "      <td>41976094</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>CAINC1-1</td>\n",
       "      <td>10500</td>\n",
       "      <td>Albany, GA (Metropolitan Statistical Area)</td>\n",
       "      <td>2022</td>\n",
       "      <td>Thousands of dollars</td>\n",
       "      <td>3</td>\n",
       "      <td>6690575</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>CAINC1-1</td>\n",
       "      <td>10540</td>\n",
       "      <td>Albany-Lebanon, OR (Metropolitan Statistical A...</td>\n",
       "      <td>2022</td>\n",
       "      <td>Thousands of dollars</td>\n",
       "      <td>3</td>\n",
       "      <td>6845480</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   index      Code GeoFips                                            GeoName  \\\n",
       "0      0  CAINC1-1   00998               United States (Metropolitan Portion)   \n",
       "1      0  CAINC1-1   10180        Abilene, TX (Metropolitan Statistical Area)   \n",
       "2      0  CAINC1-1   10420          Akron, OH (Metropolitan Statistical Area)   \n",
       "3      0  CAINC1-1   10500         Albany, GA (Metropolitan Statistical Area)   \n",
       "4      0  CAINC1-1   10540  Albany-Lebanon, OR (Metropolitan Statistical A...   \n",
       "\n",
       "  TimePeriod             DataValue CL_UNIT    UNIT_MULT  \n",
       "0       2022  Thousands of dollars       3  19506221545  \n",
       "1       2022  Thousands of dollars       3      9585333  \n",
       "2       2022  Thousands of dollars       3     41976094  \n",
       "3       2022  Thousands of dollars       3      6690575  \n",
       "4       2022  Thousands of dollars       3      6845480  "
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gdp = gdp.reset_index()\n",
    "gdp.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "38b84816",
   "metadata": {},
   "outputs": [],
   "source": [
    "gdp = gdp.drop(columns=['index'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15388209",
   "metadata": {},
   "source": [
    "## Transformation 2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d30319c4",
   "metadata": {},
   "source": [
    "We can see that the first entry in our dataframe is the United States as a whole. This is not relevant for our data set since we are analyzing cities. We can remove the first row."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "bf0f9a31",
   "metadata": {},
   "outputs": [],
   "source": [
    "gdp = gdp.drop([0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "4d9359d9",
   "metadata": {},
   "outputs": [],
   "source": [
    "gdp = gdp.reset_index()\n",
    "gdp = gdp.drop(columns=['index'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "fcf5de2a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Code</th>\n",
       "      <th>GeoFips</th>\n",
       "      <th>GeoName</th>\n",
       "      <th>TimePeriod</th>\n",
       "      <th>DataValue</th>\n",
       "      <th>CL_UNIT</th>\n",
       "      <th>UNIT_MULT</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>CAINC1-1</td>\n",
       "      <td>10180</td>\n",
       "      <td>Abilene, TX (Metropolitan Statistical Area)</td>\n",
       "      <td>2022</td>\n",
       "      <td>Thousands of dollars</td>\n",
       "      <td>3</td>\n",
       "      <td>9585333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>CAINC1-1</td>\n",
       "      <td>10420</td>\n",
       "      <td>Akron, OH (Metropolitan Statistical Area)</td>\n",
       "      <td>2022</td>\n",
       "      <td>Thousands of dollars</td>\n",
       "      <td>3</td>\n",
       "      <td>41976094</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>CAINC1-1</td>\n",
       "      <td>10500</td>\n",
       "      <td>Albany, GA (Metropolitan Statistical Area)</td>\n",
       "      <td>2022</td>\n",
       "      <td>Thousands of dollars</td>\n",
       "      <td>3</td>\n",
       "      <td>6690575</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>CAINC1-1</td>\n",
       "      <td>10540</td>\n",
       "      <td>Albany-Lebanon, OR (Metropolitan Statistical A...</td>\n",
       "      <td>2022</td>\n",
       "      <td>Thousands of dollars</td>\n",
       "      <td>3</td>\n",
       "      <td>6845480</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>CAINC1-1</td>\n",
       "      <td>10580</td>\n",
       "      <td>Albany-Schenectady-Troy, NY (Metropolitan Stat...</td>\n",
       "      <td>2022</td>\n",
       "      <td>Thousands of dollars</td>\n",
       "      <td>3</td>\n",
       "      <td>60594702</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Code GeoFips                                            GeoName  \\\n",
       "0  CAINC1-1   10180        Abilene, TX (Metropolitan Statistical Area)   \n",
       "1  CAINC1-1   10420          Akron, OH (Metropolitan Statistical Area)   \n",
       "2  CAINC1-1   10500         Albany, GA (Metropolitan Statistical Area)   \n",
       "3  CAINC1-1   10540  Albany-Lebanon, OR (Metropolitan Statistical A...   \n",
       "4  CAINC1-1   10580  Albany-Schenectady-Troy, NY (Metropolitan Stat...   \n",
       "\n",
       "  TimePeriod             DataValue CL_UNIT UNIT_MULT  \n",
       "0       2022  Thousands of dollars       3   9585333  \n",
       "1       2022  Thousands of dollars       3  41976094  \n",
       "2       2022  Thousands of dollars       3   6690575  \n",
       "3       2022  Thousands of dollars       3   6845480  \n",
       "4       2022  Thousands of dollars       3  60594702  "
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gdp.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "678c990c",
   "metadata": {},
   "source": [
    "## Transformation 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "81f23742",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Code          object\n",
       "GeoFips       object\n",
       "GeoName       object\n",
       "TimePeriod    object\n",
       "DataValue     object\n",
       "CL_UNIT       object\n",
       "UNIT_MULT     object\n",
       "dtype: object"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gdp.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e6705048",
   "metadata": {},
   "source": [
    "We can see that our UNIT_MULT has an objec tdata type instead of a numeric data type. We will convert the column to be a numeric."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "077db244",
   "metadata": {},
   "outputs": [],
   "source": [
    "gdp['UNIT_MULT'] = pd.to_numeric(gdp['UNIT_MULT'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "427a9e37",
   "metadata": {},
   "source": [
    "## Transformation 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "7e6d37e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "gdp['GeoName'] = gdp['GeoName'].astype(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "659c3bf4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#df['GeoName'] = df['GeoName'].str.rstrip(\"(Metropolitan Statistical Area)\")\n",
    "gdp['GeoName'] = gdp['GeoName'].str.removesuffix('(Metropolitan Statistical Area)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "72fca7cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "gdp['state'] = gdp['GeoName'].str.split(',', expand=True)[1]\n",
    "gdp['city'] = gdp['GeoName'].str.split(',', expand=True)[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "e9ffb2fa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Code</th>\n",
       "      <th>GeoFips</th>\n",
       "      <th>GeoName</th>\n",
       "      <th>TimePeriod</th>\n",
       "      <th>DataValue</th>\n",
       "      <th>CL_UNIT</th>\n",
       "      <th>UNIT_MULT</th>\n",
       "      <th>state</th>\n",
       "      <th>city</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>CAINC1-1</td>\n",
       "      <td>10180</td>\n",
       "      <td>Abilene, TX</td>\n",
       "      <td>2022</td>\n",
       "      <td>Thousands of dollars</td>\n",
       "      <td>3</td>\n",
       "      <td>9585333</td>\n",
       "      <td>TX</td>\n",
       "      <td>Abilene</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>CAINC1-1</td>\n",
       "      <td>10420</td>\n",
       "      <td>Akron, OH</td>\n",
       "      <td>2022</td>\n",
       "      <td>Thousands of dollars</td>\n",
       "      <td>3</td>\n",
       "      <td>41976094</td>\n",
       "      <td>OH</td>\n",
       "      <td>Akron</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>CAINC1-1</td>\n",
       "      <td>10500</td>\n",
       "      <td>Albany, GA</td>\n",
       "      <td>2022</td>\n",
       "      <td>Thousands of dollars</td>\n",
       "      <td>3</td>\n",
       "      <td>6690575</td>\n",
       "      <td>GA</td>\n",
       "      <td>Albany</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>CAINC1-1</td>\n",
       "      <td>10540</td>\n",
       "      <td>Albany-Lebanon, OR</td>\n",
       "      <td>2022</td>\n",
       "      <td>Thousands of dollars</td>\n",
       "      <td>3</td>\n",
       "      <td>6845480</td>\n",
       "      <td>OR</td>\n",
       "      <td>Albany-Lebanon</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>CAINC1-1</td>\n",
       "      <td>10580</td>\n",
       "      <td>Albany-Schenectady-Troy, NY</td>\n",
       "      <td>2022</td>\n",
       "      <td>Thousands of dollars</td>\n",
       "      <td>3</td>\n",
       "      <td>60594702</td>\n",
       "      <td>NY</td>\n",
       "      <td>Albany-Schenectady-Troy</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Code GeoFips                       GeoName TimePeriod  \\\n",
       "0  CAINC1-1   10180                  Abilene, TX        2022   \n",
       "1  CAINC1-1   10420                    Akron, OH        2022   \n",
       "2  CAINC1-1   10500                   Albany, GA        2022   \n",
       "3  CAINC1-1   10540           Albany-Lebanon, OR        2022   \n",
       "4  CAINC1-1   10580  Albany-Schenectady-Troy, NY        2022   \n",
       "\n",
       "              DataValue CL_UNIT  UNIT_MULT state                     city  \n",
       "0  Thousands of dollars       3    9585333   TX                   Abilene  \n",
       "1  Thousands of dollars       3   41976094   OH                     Akron  \n",
       "2  Thousands of dollars       3    6690575   GA                    Albany  \n",
       "3  Thousands of dollars       3    6845480   OR            Albany-Lebanon  \n",
       "4  Thousands of dollars       3   60594702   NY   Albany-Schenectady-Troy  "
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gdp.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "99d0b9e2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([' TX ', ' OH ', ' GA ', ' OR ', ' NY ',\n",
       "       ' NM (Metropolitan Statistical Area) *', ' LA ', ' PA-NJ ', ' PA ',\n",
       "       ' IA ', ' AK ', ' MI ', ' AL ', ' WI ', ' NC ', ' NJ ', ' GA-SC ',\n",
       "       ' CA ', ' MD ', ' ME ', ' MA ', ' WV ', ' WA ', ' MT ', ' ND ',\n",
       "       ' VA (Metropolitan Statistical Area) *', ' IL ', ' IN ', ' ID ',\n",
       "       ' MA-NH ', ' CO (Metropolitan Statistical Area) *', ' KY ', ' CT ',\n",
       "       ' VT ', ' FL ', ' MO-IL ', ' NV ', ' WY ', ' SC ', ' NC-SC ',\n",
       "       ' TN-GA ', ' IL-IN-WI ', ' OH-KY-IN ', ' TN-KY ', ' TN ', ' CO ',\n",
       "       ' MO ', ' GA-AL ', ' MD-WV ', ' IA-IL ', ' DE ', ' MN-WI ', ' OK ',\n",
       "       ' IN-KY ', ' ND-MN ', ' NM ', ' AR ', ' AZ ', ' AR-OK ', ' NE ',\n",
       "       ' MS ', ' WV-KY-OH ', ' HI ', ' MO-KS ',\n",
       "       ' TN-VA (Metropolitan Statistical Area) *', ' WI-MN ', ' KS ',\n",
       "       ' ID-WA ', ' UT-ID ', ' KY-IN ', ' NH ', ' MN ', ' TN-MS-AR ',\n",
       "       ' SC-NC ', ' NY-NJ-PA ', ' UT ', ' NE-IA ', ' PA-NJ-DE-MD ',\n",
       "       ' OR-WA ', ' RI-MA ', ' SD ', ' MD-DE ', ' IA-NE-SD ', ' IN-MI ',\n",
       "       ' TX-AR ', ' VA-NC (Metropolitan Statistical Area) *',\n",
       "       ' DC-VA-MD-WV (Metropolitan Statistical Area) *', ' WV-OH ',\n",
       "       ' VA-WV (Metropolitan Statistical Area) *', ' MA-CT ', ' OH-PA ',\n",
       "       ' AZ (Metropolitan Statistical Area) *'], dtype=object)"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gdp['state'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "aec126d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "gdp['state'] = gdp['state'].str.removesuffix('(Metropolitan Statistical Area) *')\n",
    "gdp['state'] = gdp['state'].str.rsplit('-',expand=True)[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "6075d613",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([' TX ', ' OH ', ' GA ', ' OR ', ' NY ', ' NM ', ' LA ', ' PA',\n",
       "       ' PA ', ' IA ', ' AK ', ' MI ', ' AL ', ' WI ', ' NC ', ' NJ ',\n",
       "       ' GA', ' CA ', ' MD ', ' ME ', ' MA ', ' WV ', ' WA ', ' MT ',\n",
       "       ' ND ', ' VA ', ' IL ', ' IN ', ' ID ', ' MA', ' CO ', ' KY ',\n",
       "       ' CT ', ' VT ', ' FL ', ' MO', ' NV ', ' WY ', ' SC ', ' NC',\n",
       "       ' TN', ' IL', ' OH', ' TN ', ' MO ', ' MD', ' IA', ' DE ', ' MN',\n",
       "       ' OK ', ' IN', ' ND', ' AR ', ' AZ ', ' AR', ' NE ', ' MS ', ' WV',\n",
       "       ' HI ', ' WI', ' KS ', ' ID', ' UT', ' KY', ' NH ', ' MN ', ' SC',\n",
       "       ' NY', ' UT ', ' NE', ' OR', ' RI', ' SD ', ' TX', ' VA', ' DC'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gdp['state'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "15b9ce9a",
   "metadata": {},
   "outputs": [],
   "source": [
    "gdp['city'] = gdp['city'].str.split('-',expand=True)[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "26f46f36",
   "metadata": {},
   "source": [
    "## Transformation 5"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0fd5aa80",
   "metadata": {},
   "source": [
    "We have many columns that we will need going forward. The only columns that we need will be UNIT_MULT, city and state so we will drop the rest of the columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "c8af541b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Code', 'GeoFips', 'GeoName', 'TimePeriod', 'DataValue', 'CL_UNIT',\n",
       "       'UNIT_MULT', 'state', 'city'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gdp.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "972b2719",
   "metadata": {},
   "outputs": [],
   "source": [
    "gdp = gdp[['UNIT_MULT', 'city', 'state']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "7f2eb833",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>UNIT_MULT</th>\n",
       "      <th>city</th>\n",
       "      <th>state</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9585333</td>\n",
       "      <td>Abilene</td>\n",
       "      <td>TX</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>41976094</td>\n",
       "      <td>Akron</td>\n",
       "      <td>OH</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6690575</td>\n",
       "      <td>Albany</td>\n",
       "      <td>GA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6845480</td>\n",
       "      <td>Albany</td>\n",
       "      <td>OR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>60594702</td>\n",
       "      <td>Albany</td>\n",
       "      <td>NY</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   UNIT_MULT     city state\n",
       "0    9585333  Abilene   TX \n",
       "1   41976094    Akron   OH \n",
       "2    6690575   Albany   GA \n",
       "3    6845480   Albany   OR \n",
       "4   60594702   Albany   NY "
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gdp.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af178d01",
   "metadata": {},
   "source": [
    "We can also rename the UNIT_MULT column to gdp so it is clear what the column is and consitent with our column names."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "44df71df",
   "metadata": {},
   "outputs": [],
   "source": [
    "gdp = gdp.rename(columns={'UNIT_MULT': 'gdp'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "72e8398b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gdp</th>\n",
       "      <th>city</th>\n",
       "      <th>state</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9585333</td>\n",
       "      <td>Abilene</td>\n",
       "      <td>TX</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>41976094</td>\n",
       "      <td>Akron</td>\n",
       "      <td>OH</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6690575</td>\n",
       "      <td>Albany</td>\n",
       "      <td>GA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6845480</td>\n",
       "      <td>Albany</td>\n",
       "      <td>OR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>60594702</td>\n",
       "      <td>Albany</td>\n",
       "      <td>NY</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        gdp     city state\n",
       "0   9585333  Abilene   TX \n",
       "1  41976094    Akron   OH \n",
       "2   6690575   Albany   GA \n",
       "3   6845480   Albany   OR \n",
       "4  60594702   Albany   NY "
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gdp.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "8173b845",
   "metadata": {},
   "outputs": [],
   "source": [
    "gdp['location'] = gdp['city'] + ',' + gdp['state']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "f0fe938e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gdp</th>\n",
       "      <th>city</th>\n",
       "      <th>state</th>\n",
       "      <th>location</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9585333</td>\n",
       "      <td>Abilene</td>\n",
       "      <td>TX</td>\n",
       "      <td>Abilene, TX</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>41976094</td>\n",
       "      <td>Akron</td>\n",
       "      <td>OH</td>\n",
       "      <td>Akron, OH</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6690575</td>\n",
       "      <td>Albany</td>\n",
       "      <td>GA</td>\n",
       "      <td>Albany, GA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6845480</td>\n",
       "      <td>Albany</td>\n",
       "      <td>OR</td>\n",
       "      <td>Albany, OR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>60594702</td>\n",
       "      <td>Albany</td>\n",
       "      <td>NY</td>\n",
       "      <td>Albany, NY</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        gdp     city state      location\n",
       "0   9585333  Abilene   TX   Abilene, TX \n",
       "1  41976094    Akron   OH     Akron, OH \n",
       "2   6690575   Albany   GA    Albany, GA \n",
       "3   6845480   Albany   OR    Albany, OR \n",
       "4  60594702   Albany   NY    Albany, NY "
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gdp.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc127920",
   "metadata": {},
   "source": [
    "## Project Milestone 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "612896c5",
   "metadata": {},
   "outputs": [],
   "source": [
    "import sqlite3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "1220c6d1",
   "metadata": {},
   "outputs": [],
   "source": [
    "conn = sqlite3.connect(\"flights.db\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "77add55b",
   "metadata": {},
   "outputs": [],
   "source": [
    "cursor = conn.cursor()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "0a7555b0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "325467"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "flights.to_sql(name='flights', con=conn, if_exists='replace')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "5178da1c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "289974"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "passenger_flights.to_sql(name='passenger', con=conn, if_exists='replace')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "007c3c33",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "35493"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cargo_flights.to_sql(name='freight', con=conn, if_exists='replace')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "c91bbc1d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "332"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "population.to_sql(name='population', con=conn, if_exists='replace')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "b66f1620",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "384"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gdp.to_sql(name='gdp', con=conn, if_exists='replace')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "30bbf0d6",
   "metadata": {},
   "source": [
    "I was going to attempt to merge the sql databases together in order to get our merged data set, however the merges were too complicated to efficiently be done in SQL since we are trying to merge the same data set with our flights multiple times, so I decided to use pandas to merge the data sets and then store this data set in our SQL database."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "id": "359f2975",
   "metadata": {},
   "outputs": [],
   "source": [
    "merged = pd.merge(flights, population, left_on='origin_city_name', right_on='location')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "id": "8387c152",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['departures_scheduled', 'departures_performed', 'seats', 'passengers',\n",
       "       'freight', 'mail', 'distance', 'ramp_to_ramp', 'air_time',\n",
       "       'unique_carrier', 'unique_carrier_name', 'origin_airport_id',\n",
       "       'origin_city_market_id', 'origin', 'origin_city_name',\n",
       "       'origin_state_abr', 'origin_state_fips', 'dest_airport_id',\n",
       "       'dest_city_market_id', 'dest', 'dest_city_name', 'dest_state_abr',\n",
       "       'dest_state_fips', 'cargo', 'air_time_hours', 'ramp_to_ramp_hours',\n",
       "       'passenger_seats_ratio', 'city', 'state', '2022_estimate',\n",
       "       '2020_census', 'change', '2020_land_area', '2020_land_area_km',\n",
       "       '2020_density', '2020_density_km', 'location'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 220,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "id": "c94ed528",
   "metadata": {},
   "outputs": [],
   "source": [
    "merged = merged.drop(columns=['city', 'state','2020_census', 'change', '2020_land_area', '2020_land_area_km', '2020_density_km', 'location'])\n",
    "merged = merged.rename(columns={'2022_estimate': 'origin_population', '2020_density': 'origin_density'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "id": "4cebf800",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['departures_scheduled', 'departures_performed', 'seats', 'passengers',\n",
       "       'freight', 'mail', 'distance', 'ramp_to_ramp', 'air_time',\n",
       "       'unique_carrier', 'unique_carrier_name', 'origin_airport_id',\n",
       "       'origin_city_market_id', 'origin', 'origin_city_name',\n",
       "       'origin_state_abr', 'origin_state_fips', 'dest_airport_id',\n",
       "       'dest_city_market_id', 'dest', 'dest_city_name', 'dest_state_abr',\n",
       "       'dest_state_fips', 'cargo', 'air_time_hours', 'ramp_to_ramp_hours',\n",
       "       'passenger_seats_ratio', 'origin_population', 'origin_density'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 222,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "id": "a48417f5",
   "metadata": {},
   "outputs": [],
   "source": [
    "merged = pd.merge(merged, population, left_on='dest_city_name', right_on='location')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "id": "a87b2523",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['departures_scheduled', 'departures_performed', 'seats', 'passengers',\n",
       "       'freight', 'mail', 'distance', 'ramp_to_ramp', 'air_time',\n",
       "       'unique_carrier', 'unique_carrier_name', 'origin_airport_id',\n",
       "       'origin_city_market_id', 'origin', 'origin_city_name',\n",
       "       'origin_state_abr', 'origin_state_fips', 'dest_airport_id',\n",
       "       'dest_city_market_id', 'dest', 'dest_city_name', 'dest_state_abr',\n",
       "       'dest_state_fips', 'cargo', 'air_time_hours', 'ramp_to_ramp_hours',\n",
       "       'passenger_seats_ratio', 'origin_population', 'origin_density', 'city',\n",
       "       'state', '2022_estimate', '2020_census', 'change', '2020_land_area',\n",
       "       '2020_land_area_km', '2020_density', '2020_density_km', 'location'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 224,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "id": "9b74276c",
   "metadata": {},
   "outputs": [],
   "source": [
    "merged = merged.drop(columns=['city', 'state','2020_census', 'change', '2020_land_area', '2020_land_area_km', '2020_density_km', 'location'])\n",
    "merged = merged.rename(columns={'2022_estimate': 'dest_population', '2020_density': 'dest_density'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "id": "3536f16e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>departures_scheduled</th>\n",
       "      <th>departures_performed</th>\n",
       "      <th>seats</th>\n",
       "      <th>passengers</th>\n",
       "      <th>freight</th>\n",
       "      <th>mail</th>\n",
       "      <th>distance</th>\n",
       "      <th>ramp_to_ramp</th>\n",
       "      <th>air_time</th>\n",
       "      <th>unique_carrier</th>\n",
       "      <th>...</th>\n",
       "      <th>dest_state_abr</th>\n",
       "      <th>dest_state_fips</th>\n",
       "      <th>cargo</th>\n",
       "      <th>air_time_hours</th>\n",
       "      <th>ramp_to_ramp_hours</th>\n",
       "      <th>passenger_seats_ratio</th>\n",
       "      <th>origin_population</th>\n",
       "      <th>origin_density</th>\n",
       "      <th>dest_population</th>\n",
       "      <th>dest_density</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3457.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2379.0</td>\n",
       "      <td>294.0</td>\n",
       "      <td>279.0</td>\n",
       "      <td>KD</td>\n",
       "      <td>...</td>\n",
       "      <td>CA</td>\n",
       "      <td>6</td>\n",
       "      <td>3457.0</td>\n",
       "      <td>4.65</td>\n",
       "      <td>4.90</td>\n",
       "      <td>0.0</td>\n",
       "      <td>287145</td>\n",
       "      <td>171</td>\n",
       "      <td>320764</td>\n",
       "      <td>3879</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>83669.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>KD</td>\n",
       "      <td>...</td>\n",
       "      <td>CA</td>\n",
       "      <td>6</td>\n",
       "      <td>83669.0</td>\n",
       "      <td>0.48</td>\n",
       "      <td>0.88</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3822238</td>\n",
       "      <td>8304</td>\n",
       "      <td>320764</td>\n",
       "      <td>3879</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4855.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>5Y</td>\n",
       "      <td>...</td>\n",
       "      <td>CA</td>\n",
       "      <td>6</td>\n",
       "      <td>4855.0</td>\n",
       "      <td>0.25</td>\n",
       "      <td>0.58</td>\n",
       "      <td>0.0</td>\n",
       "      <td>179061</td>\n",
       "      <td>3505</td>\n",
       "      <td>320764</td>\n",
       "      <td>3879</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>12694.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>5Y</td>\n",
       "      <td>...</td>\n",
       "      <td>CA</td>\n",
       "      <td>6</td>\n",
       "      <td>12694.0</td>\n",
       "      <td>0.25</td>\n",
       "      <td>0.73</td>\n",
       "      <td>0.0</td>\n",
       "      <td>179061</td>\n",
       "      <td>3505</td>\n",
       "      <td>320764</td>\n",
       "      <td>3879</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>71342.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>8C</td>\n",
       "      <td>...</td>\n",
       "      <td>CA</td>\n",
       "      <td>6</td>\n",
       "      <td>71342.0</td>\n",
       "      <td>0.18</td>\n",
       "      <td>0.57</td>\n",
       "      <td>0.0</td>\n",
       "      <td>179061</td>\n",
       "      <td>3505</td>\n",
       "      <td>320764</td>\n",
       "      <td>3879</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 31 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   departures_scheduled  departures_performed  seats  passengers  freight  \\\n",
       "0                   0.0                   1.0    0.0         0.0   3457.0   \n",
       "1                   0.0                   1.0    0.0         0.0  83669.0   \n",
       "2                   0.0                   1.0    0.0         0.0   4855.0   \n",
       "3                   0.0                   1.0    0.0         0.0  12694.0   \n",
       "4                   0.0                   1.0    0.0         0.0  71342.0   \n",
       "\n",
       "   mail  distance  ramp_to_ramp  air_time unique_carrier  ... dest_state_abr  \\\n",
       "0   0.0    2379.0         294.0     279.0             KD  ...             CA   \n",
       "1   0.0      66.0          53.0      29.0             KD  ...             CA   \n",
       "2   0.0      23.0          35.0      15.0             5Y  ...             CA   \n",
       "3   0.0      23.0          44.0      15.0             5Y  ...             CA   \n",
       "4   0.0      23.0          34.0      11.0             8C  ...             CA   \n",
       "\n",
       "   dest_state_fips    cargo air_time_hours ramp_to_ramp_hours  \\\n",
       "0                6   3457.0           4.65               4.90   \n",
       "1                6  83669.0           0.48               0.88   \n",
       "2                6   4855.0           0.25               0.58   \n",
       "3                6  12694.0           0.25               0.73   \n",
       "4                6  71342.0           0.18               0.57   \n",
       "\n",
       "  passenger_seats_ratio  origin_population  origin_density  dest_population  \\\n",
       "0                   0.0             287145             171           320764   \n",
       "1                   0.0            3822238            8304           320764   \n",
       "2                   0.0             179061            3505           320764   \n",
       "3                   0.0             179061            3505           320764   \n",
       "4                   0.0             179061            3505           320764   \n",
       "\n",
       "  dest_density  \n",
       "0         3879  \n",
       "1         3879  \n",
       "2         3879  \n",
       "3         3879  \n",
       "4         3879  \n",
       "\n",
       "[5 rows x 31 columns]"
      ]
     },
     "execution_count": 226,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "id": "c9739a28",
   "metadata": {},
   "outputs": [],
   "source": [
    "merged = pd.merge(merged, gdp, left_on='origin_city_name', right_on='location')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "id": "6f560525",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['departures_scheduled', 'departures_performed', 'seats', 'passengers',\n",
       "       'freight', 'mail', 'distance', 'ramp_to_ramp', 'air_time',\n",
       "       'unique_carrier', 'unique_carrier_name', 'origin_airport_id',\n",
       "       'origin_city_market_id', 'origin', 'origin_city_name',\n",
       "       'origin_state_abr', 'origin_state_fips', 'dest_airport_id',\n",
       "       'dest_city_market_id', 'dest', 'dest_city_name', 'dest_state_abr',\n",
       "       'dest_state_fips', 'cargo', 'air_time_hours', 'ramp_to_ramp_hours',\n",
       "       'passenger_seats_ratio', 'origin_population', 'origin_density',\n",
       "       'dest_population', 'dest_density', 'gdp', 'city', 'state', 'location'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 228,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "id": "f9563329",
   "metadata": {},
   "outputs": [],
   "source": [
    "merged = merged.drop(columns=['city', 'state', 'location'])\n",
    "merged = merged.rename(columns={'gdp': 'origin_gdp'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "id": "0d82b5b5",
   "metadata": {},
   "outputs": [],
   "source": [
    "merged = pd.merge(merged, gdp, left_on='dest_city_name', right_on='location')\n",
    "merged = merged.drop(columns=['city', 'state', 'location'])\n",
    "merged = merged.rename(columns={'gdp': 'dest_gdp'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "id": "7070f685",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['departures_scheduled', 'departures_performed', 'seats', 'passengers',\n",
       "       'freight', 'mail', 'distance', 'ramp_to_ramp', 'air_time',\n",
       "       'unique_carrier', 'unique_carrier_name', 'origin_airport_id',\n",
       "       'origin_city_market_id', 'origin', 'origin_city_name',\n",
       "       'origin_state_abr', 'origin_state_fips', 'dest_airport_id',\n",
       "       'dest_city_market_id', 'dest', 'dest_city_name', 'dest_state_abr',\n",
       "       'dest_state_fips', 'cargo', 'air_time_hours', 'ramp_to_ramp_hours',\n",
       "       'passenger_seats_ratio', 'origin_population', 'origin_density',\n",
       "       'dest_population', 'dest_density', 'origin_gdp', 'dest_gdp'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 231,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "id": "b1fcd7b6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>departures_scheduled</th>\n",
       "      <th>departures_performed</th>\n",
       "      <th>seats</th>\n",
       "      <th>passengers</th>\n",
       "      <th>freight</th>\n",
       "      <th>mail</th>\n",
       "      <th>distance</th>\n",
       "      <th>ramp_to_ramp</th>\n",
       "      <th>air_time</th>\n",
       "      <th>unique_carrier</th>\n",
       "      <th>...</th>\n",
       "      <th>cargo</th>\n",
       "      <th>air_time_hours</th>\n",
       "      <th>ramp_to_ramp_hours</th>\n",
       "      <th>passenger_seats_ratio</th>\n",
       "      <th>origin_population</th>\n",
       "      <th>origin_density</th>\n",
       "      <th>dest_population</th>\n",
       "      <th>dest_density</th>\n",
       "      <th>origin_gdp</th>\n",
       "      <th>dest_gdp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>72.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1739.0</td>\n",
       "      <td>263.0</td>\n",
       "      <td>244.0</td>\n",
       "      <td>DL</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.07</td>\n",
       "      <td>4.38</td>\n",
       "      <td>0.750000</td>\n",
       "      <td>2665039</td>\n",
       "      <td>12061</td>\n",
       "      <td>635067</td>\n",
       "      <td>4888</td>\n",
       "      <td>684652105</td>\n",
       "      <td>174245501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>72.0</td>\n",
       "      <td>69.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1751.0</td>\n",
       "      <td>263.0</td>\n",
       "      <td>242.0</td>\n",
       "      <td>DL</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.03</td>\n",
       "      <td>4.38</td>\n",
       "      <td>0.958333</td>\n",
       "      <td>2665039</td>\n",
       "      <td>12061</td>\n",
       "      <td>635067</td>\n",
       "      <td>4888</td>\n",
       "      <td>684652105</td>\n",
       "      <td>174245501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>162.0</td>\n",
       "      <td>118.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1739.0</td>\n",
       "      <td>293.0</td>\n",
       "      <td>247.0</td>\n",
       "      <td>B6</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.12</td>\n",
       "      <td>4.88</td>\n",
       "      <td>0.728395</td>\n",
       "      <td>2665039</td>\n",
       "      <td>12061</td>\n",
       "      <td>635067</td>\n",
       "      <td>4888</td>\n",
       "      <td>684652105</td>\n",
       "      <td>174245501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>178.0</td>\n",
       "      <td>162.0</td>\n",
       "      <td>462.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1739.0</td>\n",
       "      <td>263.0</td>\n",
       "      <td>241.0</td>\n",
       "      <td>AS</td>\n",
       "      <td>...</td>\n",
       "      <td>462.0</td>\n",
       "      <td>4.02</td>\n",
       "      <td>4.38</td>\n",
       "      <td>0.910112</td>\n",
       "      <td>2665039</td>\n",
       "      <td>12061</td>\n",
       "      <td>635067</td>\n",
       "      <td>4888</td>\n",
       "      <td>684652105</td>\n",
       "      <td>174245501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>186.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1739.0</td>\n",
       "      <td>260.0</td>\n",
       "      <td>240.0</td>\n",
       "      <td>SY</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.00</td>\n",
       "      <td>4.33</td>\n",
       "      <td>0.236559</td>\n",
       "      <td>2665039</td>\n",
       "      <td>12061</td>\n",
       "      <td>635067</td>\n",
       "      <td>4888</td>\n",
       "      <td>684652105</td>\n",
       "      <td>174245501</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 33 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   departures_scheduled  departures_performed  seats  passengers  freight  \\\n",
       "0                   0.0                   1.0   72.0        54.0      0.0   \n",
       "1                   0.0                   1.0   72.0        69.0      0.0   \n",
       "2                   0.0                   1.0  162.0       118.0      0.0   \n",
       "3                   0.0                   1.0  178.0       162.0    462.0   \n",
       "4                   0.0                   1.0  186.0        44.0      0.0   \n",
       "\n",
       "   mail  distance  ramp_to_ramp  air_time unique_carrier  ...  cargo  \\\n",
       "0   0.0    1739.0         263.0     244.0             DL  ...    0.0   \n",
       "1   0.0    1751.0         263.0     242.0             DL  ...    0.0   \n",
       "2   0.0    1739.0         293.0     247.0             B6  ...    0.0   \n",
       "3   0.0    1739.0         263.0     241.0             AS  ...  462.0   \n",
       "4   0.0    1739.0         260.0     240.0             SY  ...    0.0   \n",
       "\n",
       "   air_time_hours  ramp_to_ramp_hours passenger_seats_ratio origin_population  \\\n",
       "0            4.07                4.38              0.750000           2665039   \n",
       "1            4.03                4.38              0.958333           2665039   \n",
       "2            4.12                4.88              0.728395           2665039   \n",
       "3            4.02                4.38              0.910112           2665039   \n",
       "4            4.00                4.33              0.236559           2665039   \n",
       "\n",
       "  origin_density  dest_population  dest_density  origin_gdp   dest_gdp  \n",
       "0          12061           635067          4888   684652105  174245501  \n",
       "1          12061           635067          4888   684652105  174245501  \n",
       "2          12061           635067          4888   684652105  174245501  \n",
       "3          12061           635067          4888   684652105  174245501  \n",
       "4          12061           635067          4888   684652105  174245501  \n",
       "\n",
       "[5 rows x 33 columns]"
      ]
     },
     "execution_count": 234,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "id": "db488c8e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "11619"
      ]
     },
     "execution_count": 235,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged.to_sql(name='merged', con=conn, if_exists='replace')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a60a644",
   "metadata": {},
   "source": [
    "First, I want to look at the distribution of distances for passenger flights in order to see how many flights are in the range where rail travel would be competitive. This distance is around 1000 miles."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 313,
   "id": "bb4807ba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(passenger_flights['distance'], bins = 100)\n",
    "plt.xlabel(\"Flight Distance\")\n",
    "plt.ylabel(\"Number of Flights\")\n",
    "plt.title(\"Histogram of Flight Distance\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab9c1041",
   "metadata": {},
   "source": [
    "As we can see, there are many flights that are under 1000 miles which could be viable options to connect the two cities with high speed rail."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 314,
   "id": "3dc17898",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(passenger_flights[passenger_flights['ramp_to_ramp_hours'] < 10]['ramp_to_ramp_hours'])\n",
    "plt.xlabel(\"Ramp to Ramp Time (Hours)\")\n",
    "plt.ylabel(\"Number of Flights\")\n",
    "plt.title(\"Histogram of Ramp to Ramp Flight Time\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "09835237",
   "metadata": {},
   "source": [
    "Even though two cities may be within the sweet spot for passenger rail does not mean they would be a good rail allignment. In order for rail to succeed, it needs a lot of passengers. To look at this, I plotted a scatterplot of flight distance by the number of passengers. In this plot, we could decide the minimum number of passengers that we would need for a passenger rail line and then look to see how many flights fulfil this number as well as are under 1000 miles."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 315,
   "id": "39a42b14",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(merged['distance'], merged['passengers'])\n",
    "plt.xlabel(\"Flight Distance (Miles)\")\n",
    "plt.ylabel(\"Number of Passengers Carried\")\n",
    "plt.title(\"Distance vs Passengers Carried\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 307,
   "id": "bf035968",
   "metadata": {},
   "outputs": [],
   "source": [
    "merged['net_gdp'] = merged['origin_gdp'] + merged['dest_gdp']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c6571c65",
   "metadata": {},
   "source": [
    "Similarly to our last plot, we might want to connect strong economic centers together rather than just the number of passengers on flights. In order to do this, we will create a new column which is the total gdp between the origin and destination and then create a scatterplot of distance by total gdp."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 316,
   "id": "21367989",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(merged['distance'], merged['net_gdp'])\n",
    "plt.xlabel(\"Flight Distance (Miles)\")\n",
    "plt.ylabel(\"Total GDP of City Pair\")\n",
    "plt.title(\"Distance vs City Pair GDP\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1edbf50a",
   "metadata": {},
   "source": [
    "Maybe instead of connecting cities with the most passengers together, we can connect cities with the largest total population between city pairs within a certain range. In the next plot we investigate this by creating another scatterplot this time with the distance between the cities compared to the total population between them."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 318,
   "id": "28cabc9c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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I2RmZuodU360w6FDh4QnnnhCCA0NFdzd3YWAgAChY8eOwqZNm3SO27lzp9CiRQvB3d1dACAMHTpUEARBuH37tjBixAghMDBQ8PLyEtq3by8kJCTojZTQjPr58ccfdc5raPSDIAjC1q1bhY4dOwre3t6Cl5eXEBERIcyfP1+nzJ9//ik888wzQmBgoODq6ioEBQUJXbp0EZYtWybq+pWUlAghISECAOGtt97S279o0SKhXbt2Qo0aNQQ3Nzehbt26wogRI4T09HRR579+/brwn//8R2jatKng5eUluLu7Cw0aNBBeeeUV4eTJk9pyhkagpKenC927dxd8fX0FAEJoaKje+YcNGya4uLgIV65cERWPIDz4nR8zZozJMqdOnRJiY2MFX19fwc/PT3j66aeFS5cu6Y38MjZCpmnTpqLj0bz2GzdumCyXlZUlvPrqq0JwcLDg4uIihIaGCtOmTRPy8/MNvr6lS5cK9evXF1xdXYXGjRsL3333nd45jxw5IrRr107w9vYWHnroIWHGjBnCl19+KWrUz9dffy08/PDDgru7u1CvXj1h7ty5wldffaV3rLH30djnPiEhQejSpYvg7e0teHp6Cm3bthU2b96sU8bYaD/N79iePXtMXkuqvFSCYGb4hANSqVTYsGEDBgwYAABYu3Ytnn/+efz111861ZrAg2+6QUFBmDFjBubMmYOioiLtvvv378PLywvbt29HbGysLV8CUZVUWFiIsLAwtG/f3uwkd1WJSqXCmDFjKjRYgMhRVYmmnxYtWqCkpASZmZno0KGDwTKPPfYYiouLkZqaql2n4uzZswCgHcJIRNZx48YNnDlzBitWrNAuekhEBFSiROXu3bs6PfjT0tKQlJQEf39/NGrUCM8//zxefPFFLFq0CC1atMDNmzexe/duNGvWTNseHB0djeHDh2Px4sUoLS3FmDFjEBsby85eRFa2ZcsWvPTSSwgODsbSpUtFD0kmosqv0jT97N27F507d9bbPnToUKxcuRJFRUV4//33sWrVKly9ehUBAQGIiYnBrFmztJ3Arl27hnHjxmH79u3w9vZGr169sGjRIvj7+9v65RAREREqUaJCRERElU+VmUeFiIiIHA8TFSIiIlIsh+5MW1paimvXrsHX15eTBhERETkIQRCQm5uL2rVrw8nJdJ2JQycq165dQ0hIiL3DICIiIgtcvnzZ7IzfDp2oaNY9uXz5MqpVq2bnaIiIiEiMnJwchISEmF2/DHDwREXT3FOtWjUmKkRERA5GTLcNdqYlIiIixWKiQkRERIrFRIWIiIgUi4kKERERKRYTFSIiIlIsJipERESkWExUiIiISLGYqBAREZFiMVEhIiIixXLomWmt5dbdQjz7xUFcz8nHvYISOKuAwGoe2DC6PWpWc7d3eERERFUGE5VyWr2/AzfuFupsKxGAK3fy0WrOTlTzcMGJmT3sFB0REVHVwqafMgwlKeXl5BcjauY2G0VERERUtTFR+cetu4VmkxSNnPxi3MgpsHJERERExETlH89+cVBS+SeWHrBSJERERKTBROUfmbnialM0bt0rslIkREREpMFE5R+Bvm6Syvt7u1opEiIiItJgovKPNaPaSSq/YXR7K0VCREREGkxU/uHv44aaPuJqVap5uHA+FSIiIhtgolJG4tuxZpMVzqNCRERkO5zwrZzEt2M5My0REZFCMFExwN/HDdsndbJ3GERERFUem36IiIhIsZioEBERkWIxUSEiIiLFYqJCREREisVEhYiIiBSLiQoREREpFhMVIiIiUiwmKkRERKRYTFSIiIhIsZioEBERkWIxUSEiIiLFsmuiMnPmTKhUKp2foKAge4ZERERECmL3RQmbNm2KnTt3ah87OzvbMRoiIiJSErsnKi4uLqxFISIiIoPs3kfl3LlzqF27NsLDw/Hss8/iwoULRssWFBQgJydH54eIiIgqL7smKm3atMGqVauwbds2LF++HNevX0e7du2QlZVlsPzcuXOhVqu1PyEhITaOmIiIiGxJJQiCYO8gNO7du4f69evjzTffxKRJk/T2FxQUoKCgQPs4JycHISEhyM7ORrVq1WwZKhEREVkoJycHarVa1P3b7n1UyvL29kazZs1w7tw5g/vd3d3h7u5u46iIiIjIXuzeR6WsgoICpKSkIDg42N6hEBERkQLYNVGZMmUK9u3bh7S0NPz+++8YOHAgcnJyMHToUHuGRURERAph16afK1euYPDgwbh58yZq1qyJtm3b4vDhwwgNDbVnWERERKQQdk1U1qxZY8+nJyIiIoVTVB8VIiIiorKYqBAREZFiMVEhIiIixWKiQkRERIrFRIWIiIgUi4kKERERKRYTFSIiIlIsJipERESkWExUiIiISLGYqBAREZFiMVEhIiIixWKiQkRERIrFRIWIiIgUi4kKERERKRYTFSIiIlIsJipERESkWExUiIiISLGYqBAREZFiMVEhIiIixWKiQkRERIrFRIWIiIgUi4kKERERKRYTFSIiIlIsJipERESkWExUiIiISLGYqBAREZFiMVEhIiIixWKiQkRERIrFRIWIiIgUi4kKERERKRYTFSIiIlIsJipERESkWExUiIiISLGYqBAREZFiMVEhIiIixWKiQkRERIrFRIWIiIgUi4kKERERKRYTFSIiIlIsF3sHQGQrT8zZguM5hvelz4uzbTBERCQKa1SoSgibajxJ0ewnIiLlYaJClZ7YJITJChGR8jBRoUrtiTnSkg8mK0REysJEhSo1U809RESkfJISleLiYsyaNQuXL1+2VjxEREREWpISFRcXF3zwwQcoKSmxVjxEREREWpKbfrp164a9e/daIRQi+bWoZu8IiIioIiTPo9KrVy9MmzYNycnJePTRR+Ht7a2zv1+/frIFR1RRG6bHSeogy/lUiIiURSUIgiDlACcn45UwKpXKps1COTk5UKvVyM7ORrVq/OpMxolJVpikEBHZhpT7t+Smn9LSUqM/7LtCSpU+L85kMxCTFCIiZeIU+lRlbJjOZISIyNGISlQ++eQTjBo1Ch4eHvjkk09Mlh0/frwsgRERERGJ6qMSHh6Oo0ePIiAgAOHh4cZPplLhwoULsgZoCvuoEBEROR4p929RNSppaWkG/09ERERkTZxCn4iIiBTLos60V65cwaZNm3Dp0iUUFhbq7Pvwww8tCmTu3LmYPn06JkyYgMWLF1t0DiIiIqpcJCcqu3btQr9+/RAeHo4zZ84gMjIS6enpEAQB0dHRFgWRmJiIL774AlFRURYdT0RERJWT5KafadOmYfLkyUhOToaHhwd+/vlnXL58GR07dsTTTz8tOYC7d+/i+eefx/Lly+Hn5yf5eCIiIqq8JCcqKSkpGDp0KIAHixTev38fPj4+mD17NubPny85gDFjxiAuLg7dunWTfCwRERFVbpKbfry9vVFQUAAAqF27NlJTU9G0aVMAwM2bNyWda82aNTh27BgSExNFlS8oKNA+N/BgeBMRERFVXpITlbZt2+K3335DREQE4uLiMHnyZJw8eRLr169H27ZtRZ/n8uXLmDBhArZv3w4PDw9Rx8ydOxezZs2SGjIRERE5KMmLEl64cAF3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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "merged['total_pop'] = merged['origin_population'] + merged['dest_population']\n",
    "plt.scatter(merged['distance'], merged['total_pop'])\n",
    "plt.xlabel(\"Flight Distance (Miles)\")\n",
    "plt.ylabel(\"Total Population of City Pair\")\n",
    "plt.title(\"Distance vs City Pair Population\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fc165400",
   "metadata": {},
   "source": [
    "Finally, I wanted to look at which cities exactly have the most passengers flying between them within 1000 miles. To do this, I first selected flight pairs with distances less than 1000 miles, then I grouped these flights by the origin city name and destination city name, then I sorted these values and selected the top 20 cities."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 310,
   "id": "217928c0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>departures_scheduled</th>\n",
       "      <th>departures_performed</th>\n",
       "      <th>seats</th>\n",
       "      <th>passengers</th>\n",
       "      <th>freight</th>\n",
       "      <th>mail</th>\n",
       "      <th>distance</th>\n",
       "      <th>ramp_to_ramp</th>\n",
       "      <th>air_time</th>\n",
       "      <th>origin_airport_id</th>\n",
       "      <th>...</th>\n",
       "      <th>ramp_to_ramp_hours</th>\n",
       "      <th>passenger_seats_ratio</th>\n",
       "      <th>origin_population</th>\n",
       "      <th>origin_density</th>\n",
       "      <th>dest_population</th>\n",
       "      <th>dest_density</th>\n",
       "      <th>origin_gdp</th>\n",
       "      <th>dest_gdp</th>\n",
       "      <th>total_pop</th>\n",
       "      <th>net_gdp</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>origin_city_name</th>\n",
       "      <th>dest_city_name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Washington, DC</th>\n",
       "      <th>Boston, MA</th>\n",
       "      <td>9562.0</td>\n",
       "      <td>9381.0</td>\n",
       "      <td>997662.0</td>\n",
       "      <td>820080.0</td>\n",
       "      <td>90915.0</td>\n",
       "      <td>5552.0</td>\n",
       "      <td>40383.0</td>\n",
       "      <td>872579.0</td>\n",
       "      <td>604775.0</td>\n",
       "      <td>1178640.0</td>\n",
       "      <td>...</td>\n",
       "      <td>14542.99</td>\n",
       "      <td>84.300655</td>\n",
       "      <td>66508497.0</td>\n",
       "      <td>1117314.0</td>\n",
       "      <td>64419894.0</td>\n",
       "      <td>1384911.0</td>\n",
       "      <td>5.237930e+10</td>\n",
       "      <td>4.564446e+10</td>\n",
       "      <td>130928391.0</td>\n",
       "      <td>9.802375e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Boston, MA</th>\n",
       "      <th>Washington, DC</th>\n",
       "      <td>8001.0</td>\n",
       "      <td>7851.0</td>\n",
       "      <td>760634.0</td>\n",
       "      <td>606091.0</td>\n",
       "      <td>10988.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11172.0</td>\n",
       "      <td>805971.0</td>\n",
       "      <td>593794.0</td>\n",
       "      <td>300188.0</td>\n",
       "      <td>...</td>\n",
       "      <td>13432.86</td>\n",
       "      <td>22.604546</td>\n",
       "      <td>18219768.0</td>\n",
       "      <td>391692.0</td>\n",
       "      <td>18810484.0</td>\n",
       "      <td>316008.0</td>\n",
       "      <td>1.290954e+10</td>\n",
       "      <td>1.481435e+10</td>\n",
       "      <td>37030252.0</td>\n",
       "      <td>2.772389e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">Chicago, IL</th>\n",
       "      <th>Charlotte, NC</th>\n",
       "      <td>4326.0</td>\n",
       "      <td>4295.0</td>\n",
       "      <td>714994.0</td>\n",
       "      <td>565911.0</td>\n",
       "      <td>404897.0</td>\n",
       "      <td>1006427.0</td>\n",
       "      <td>86405.0</td>\n",
       "      <td>486733.0</td>\n",
       "      <td>362122.0</td>\n",
       "      <td>1998910.0</td>\n",
       "      <td>...</td>\n",
       "      <td>8112.23</td>\n",
       "      <td>110.409333</td>\n",
       "      <td>386430655.0</td>\n",
       "      <td>1748845.0</td>\n",
       "      <td>130169400.0</td>\n",
       "      <td>411365.0</td>\n",
       "      <td>9.927456e+10</td>\n",
       "      <td>2.603834e+10</td>\n",
       "      <td>516600055.0</td>\n",
       "      <td>1.253129e+11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Kansas City, MO</th>\n",
       "      <td>4448.0</td>\n",
       "      <td>4399.0</td>\n",
       "      <td>603984.0</td>\n",
       "      <td>469280.0</td>\n",
       "      <td>424427.0</td>\n",
       "      <td>21885.0</td>\n",
       "      <td>69379.0</td>\n",
       "      <td>388257.0</td>\n",
       "      <td>283555.0</td>\n",
       "      <td>2372926.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6470.92</td>\n",
       "      <td>142.274565</td>\n",
       "      <td>458386708.0</td>\n",
       "      <td>2074492.0</td>\n",
       "      <td>87599084.0</td>\n",
       "      <td>277780.0</td>\n",
       "      <td>1.177602e+11</td>\n",
       "      <td>2.410060e+10</td>\n",
       "      <td>545985792.0</td>\n",
       "      <td>1.418608e+11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Boston, MA</th>\n",
       "      <th>Charlotte, NC</th>\n",
       "      <td>3707.0</td>\n",
       "      <td>3644.0</td>\n",
       "      <td>523852.0</td>\n",
       "      <td>452260.0</td>\n",
       "      <td>236986.0</td>\n",
       "      <td>263193.0</td>\n",
       "      <td>36400.0</td>\n",
       "      <td>525280.0</td>\n",
       "      <td>414339.0</td>\n",
       "      <td>536050.0</td>\n",
       "      <td>...</td>\n",
       "      <td>8754.67</td>\n",
       "      <td>42.439610</td>\n",
       "      <td>32535300.0</td>\n",
       "      <td>699450.0</td>\n",
       "      <td>44886000.0</td>\n",
       "      <td>141850.0</td>\n",
       "      <td>2.305276e+10</td>\n",
       "      <td>8.978736e+09</td>\n",
       "      <td>77421300.0</td>\n",
       "      <td>3.203149e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Washington, DC</th>\n",
       "      <th>Charlotte, NC</th>\n",
       "      <td>4781.0</td>\n",
       "      <td>4737.0</td>\n",
       "      <td>560545.0</td>\n",
       "      <td>446836.0</td>\n",
       "      <td>124182.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>53733.0</td>\n",
       "      <td>428659.0</td>\n",
       "      <td>275720.0</td>\n",
       "      <td>1957498.0</td>\n",
       "      <td>...</td>\n",
       "      <td>7144.36</td>\n",
       "      <td>124.236880</td>\n",
       "      <td>110847495.0</td>\n",
       "      <td>1862190.0</td>\n",
       "      <td>148123800.0</td>\n",
       "      <td>468105.0</td>\n",
       "      <td>8.729883e+10</td>\n",
       "      <td>2.962983e+10</td>\n",
       "      <td>258971295.0</td>\n",
       "      <td>1.169287e+11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">Philadelphia, PA</th>\n",
       "      <th>Boston, MA</th>\n",
       "      <td>4172.0</td>\n",
       "      <td>4112.0</td>\n",
       "      <td>485785.0</td>\n",
       "      <td>402995.0</td>\n",
       "      <td>12899101.0</td>\n",
       "      <td>57344.0</td>\n",
       "      <td>31360.0</td>\n",
       "      <td>324316.0</td>\n",
       "      <td>211620.0</td>\n",
       "      <td>1579200.0</td>\n",
       "      <td>...</td>\n",
       "      <td>5405.22</td>\n",
       "      <td>78.463109</td>\n",
       "      <td>175532896.0</td>\n",
       "      <td>1336496.0</td>\n",
       "      <td>72879072.0</td>\n",
       "      <td>1566768.0</td>\n",
       "      <td>5.123149e+10</td>\n",
       "      <td>5.163817e+10</td>\n",
       "      <td>248411968.0</td>\n",
       "      <td>1.028697e+11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Charlotte, NC</th>\n",
       "      <td>3030.0</td>\n",
       "      <td>3007.0</td>\n",
       "      <td>505737.0</td>\n",
       "      <td>387611.0</td>\n",
       "      <td>5679236.0</td>\n",
       "      <td>21779.0</td>\n",
       "      <td>48043.0</td>\n",
       "      <td>313725.0</td>\n",
       "      <td>222621.0</td>\n",
       "      <td>1508700.0</td>\n",
       "      <td>...</td>\n",
       "      <td>5228.75</td>\n",
       "      <td>72.937374</td>\n",
       "      <td>167696606.0</td>\n",
       "      <td>1276831.0</td>\n",
       "      <td>96056040.0</td>\n",
       "      <td>303559.0</td>\n",
       "      <td>4.894437e+10</td>\n",
       "      <td>1.921450e+10</td>\n",
       "      <td>263752646.0</td>\n",
       "      <td>6.815886e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chicago, IL</th>\n",
       "      <th>Omaha, NE</th>\n",
       "      <td>3354.0</td>\n",
       "      <td>3330.0</td>\n",
       "      <td>436860.0</td>\n",
       "      <td>349630.0</td>\n",
       "      <td>206831.0</td>\n",
       "      <td>6316.0</td>\n",
       "      <td>63859.0</td>\n",
       "      <td>299800.0</td>\n",
       "      <td>219667.0</td>\n",
       "      <td>2110740.0</td>\n",
       "      <td>...</td>\n",
       "      <td>4996.64</td>\n",
       "      <td>126.992660</td>\n",
       "      <td>407750967.0</td>\n",
       "      <td>1845333.0</td>\n",
       "      <td>74228409.0</td>\n",
       "      <td>525249.0</td>\n",
       "      <td>1.047518e+11</td>\n",
       "      <td>1.024891e+10</td>\n",
       "      <td>481979376.0</td>\n",
       "      <td>1.150007e+11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">Minneapolis, MN</th>\n",
       "      <th>Boston, MA</th>\n",
       "      <td>2104.0</td>\n",
       "      <td>2084.0</td>\n",
       "      <td>369854.0</td>\n",
       "      <td>322704.0</td>\n",
       "      <td>657520.0</td>\n",
       "      <td>634830.0</td>\n",
       "      <td>87672.0</td>\n",
       "      <td>343607.0</td>\n",
       "      <td>289750.0</td>\n",
       "      <td>1051986.0</td>\n",
       "      <td>...</td>\n",
       "      <td>5726.79</td>\n",
       "      <td>63.106161</td>\n",
       "      <td>33157488.0</td>\n",
       "      <td>621036.0</td>\n",
       "      <td>50755068.0</td>\n",
       "      <td>1091142.0</td>\n",
       "      <td>2.165553e+10</td>\n",
       "      <td>3.596230e+10</td>\n",
       "      <td>83912556.0</td>\n",
       "      <td>5.761783e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Charlotte, NC</th>\n",
       "      <td>1990.0</td>\n",
       "      <td>1976.0</td>\n",
       "      <td>279746.0</td>\n",
       "      <td>237024.0</td>\n",
       "      <td>41289.0</td>\n",
       "      <td>51506.0</td>\n",
       "      <td>53940.0</td>\n",
       "      <td>289975.0</td>\n",
       "      <td>234362.0</td>\n",
       "      <td>782246.0</td>\n",
       "      <td>...</td>\n",
       "      <td>4832.94</td>\n",
       "      <td>46.081060</td>\n",
       "      <td>24655568.0</td>\n",
       "      <td>461796.0</td>\n",
       "      <td>52067760.0</td>\n",
       "      <td>164546.0</td>\n",
       "      <td>1.610283e+10</td>\n",
       "      <td>1.041533e+10</td>\n",
       "      <td>76723328.0</td>\n",
       "      <td>2.651816e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>St. Louis, MO</th>\n",
       "      <th>Charlotte, NC</th>\n",
       "      <td>1552.0</td>\n",
       "      <td>1551.0</td>\n",
       "      <td>254661.0</td>\n",
       "      <td>204787.0</td>\n",
       "      <td>94975.0</td>\n",
       "      <td>3777.0</td>\n",
       "      <td>44820.0</td>\n",
       "      <td>164967.0</td>\n",
       "      <td>126443.0</td>\n",
       "      <td>1163462.0</td>\n",
       "      <td>...</td>\n",
       "      <td>2749.47</td>\n",
       "      <td>60.328841</td>\n",
       "      <td>22353084.0</td>\n",
       "      <td>381264.0</td>\n",
       "      <td>70022160.0</td>\n",
       "      <td>221286.0</td>\n",
       "      <td>1.522932e+10</td>\n",
       "      <td>1.400683e+10</td>\n",
       "      <td>92375244.0</td>\n",
       "      <td>2.923615e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Washington, DC</th>\n",
       "      <th>Providence, RI</th>\n",
       "      <td>2669.0</td>\n",
       "      <td>2625.0</td>\n",
       "      <td>230554.0</td>\n",
       "      <td>183297.0</td>\n",
       "      <td>34760.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>29803.0</td>\n",
       "      <td>221263.0</td>\n",
       "      <td>152736.0</td>\n",
       "      <td>952836.0</td>\n",
       "      <td>...</td>\n",
       "      <td>3687.71</td>\n",
       "      <td>64.760728</td>\n",
       "      <td>55759649.0</td>\n",
       "      <td>936738.0</td>\n",
       "      <td>15733729.0</td>\n",
       "      <td>861291.0</td>\n",
       "      <td>4.391396e+10</td>\n",
       "      <td>8.855975e+09</td>\n",
       "      <td>71493378.0</td>\n",
       "      <td>5.276993e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Kansas City, MO</th>\n",
       "      <th>Charlotte, NC</th>\n",
       "      <td>1127.0</td>\n",
       "      <td>1118.0</td>\n",
       "      <td>194802.0</td>\n",
       "      <td>164848.0</td>\n",
       "      <td>7952.0</td>\n",
       "      <td>108.0</td>\n",
       "      <td>24240.0</td>\n",
       "      <td>147067.0</td>\n",
       "      <td>116877.0</td>\n",
       "      <td>395940.0</td>\n",
       "      <td>...</td>\n",
       "      <td>2451.13</td>\n",
       "      <td>25.155268</td>\n",
       "      <td>15278910.0</td>\n",
       "      <td>48450.0</td>\n",
       "      <td>26931600.0</td>\n",
       "      <td>85110.0</td>\n",
       "      <td>4.203594e+09</td>\n",
       "      <td>5.387242e+09</td>\n",
       "      <td>42210510.0</td>\n",
       "      <td>9.590835e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Charlotte, NC</th>\n",
       "      <th>Kansas City, MO</th>\n",
       "      <td>1126.0</td>\n",
       "      <td>1117.0</td>\n",
       "      <td>194614.0</td>\n",
       "      <td>164408.0</td>\n",
       "      <td>16560.0</td>\n",
       "      <td>8990.0</td>\n",
       "      <td>22624.0</td>\n",
       "      <td>160188.0</td>\n",
       "      <td>133734.0</td>\n",
       "      <td>309596.0</td>\n",
       "      <td>...</td>\n",
       "      <td>2669.80</td>\n",
       "      <td>23.245230</td>\n",
       "      <td>25136160.0</td>\n",
       "      <td>79436.0</td>\n",
       "      <td>14260316.0</td>\n",
       "      <td>45220.0</td>\n",
       "      <td>5.028092e+09</td>\n",
       "      <td>3.923354e+09</td>\n",
       "      <td>39396476.0</td>\n",
       "      <td>8.951446e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chicago, IL</th>\n",
       "      <th>Providence, RI</th>\n",
       "      <td>1726.0</td>\n",
       "      <td>1712.0</td>\n",
       "      <td>191653.0</td>\n",
       "      <td>161171.0</td>\n",
       "      <td>54246.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>89784.0</td>\n",
       "      <td>226912.0</td>\n",
       "      <td>185781.0</td>\n",
       "      <td>1455640.0</td>\n",
       "      <td>...</td>\n",
       "      <td>3781.83</td>\n",
       "      <td>85.275196</td>\n",
       "      <td>282494134.0</td>\n",
       "      <td>1278466.0</td>\n",
       "      <td>20093678.0</td>\n",
       "      <td>1099962.0</td>\n",
       "      <td>7.257312e+10</td>\n",
       "      <td>1.131004e+10</td>\n",
       "      <td>302587812.0</td>\n",
       "      <td>8.388316e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Providence, RI</th>\n",
       "      <th>Charlotte, NC</th>\n",
       "      <td>1156.0</td>\n",
       "      <td>1147.0</td>\n",
       "      <td>180899.0</td>\n",
       "      <td>152983.0</td>\n",
       "      <td>32258.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>31418.0</td>\n",
       "      <td>150960.0</td>\n",
       "      <td>123616.0</td>\n",
       "      <td>658122.0</td>\n",
       "      <td>...</td>\n",
       "      <td>2515.97</td>\n",
       "      <td>37.684777</td>\n",
       "      <td>8719898.0</td>\n",
       "      <td>477342.0</td>\n",
       "      <td>41295120.0</td>\n",
       "      <td>130502.0</td>\n",
       "      <td>4.908131e+09</td>\n",
       "      <td>8.260438e+09</td>\n",
       "      <td>50015018.0</td>\n",
       "      <td>1.316857e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Kansas City, MO</th>\n",
       "      <th>Washington, DC</th>\n",
       "      <td>1782.0</td>\n",
       "      <td>1762.0</td>\n",
       "      <td>179018.0</td>\n",
       "      <td>142758.0</td>\n",
       "      <td>27561.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>36781.0</td>\n",
       "      <td>249504.0</td>\n",
       "      <td>211487.0</td>\n",
       "      <td>514722.0</td>\n",
       "      <td>...</td>\n",
       "      <td>4158.40</td>\n",
       "      <td>31.148088</td>\n",
       "      <td>19862583.0</td>\n",
       "      <td>62985.0</td>\n",
       "      <td>26200317.0</td>\n",
       "      <td>440154.0</td>\n",
       "      <td>5.464672e+09</td>\n",
       "      <td>2.063427e+10</td>\n",
       "      <td>46062900.0</td>\n",
       "      <td>2.609894e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cincinnati, OH</th>\n",
       "      <th>Charlotte, NC</th>\n",
       "      <td>1520.0</td>\n",
       "      <td>1535.0</td>\n",
       "      <td>172344.0</td>\n",
       "      <td>134865.0</td>\n",
       "      <td>1979169.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>22770.0</td>\n",
       "      <td>141091.0</td>\n",
       "      <td>90947.0</td>\n",
       "      <td>764948.0</td>\n",
       "      <td>...</td>\n",
       "      <td>2351.52</td>\n",
       "      <td>52.025190</td>\n",
       "      <td>21046884.0</td>\n",
       "      <td>270368.0</td>\n",
       "      <td>61044960.0</td>\n",
       "      <td>192916.0</td>\n",
       "      <td>1.005055e+10</td>\n",
       "      <td>1.221108e+10</td>\n",
       "      <td>82091844.0</td>\n",
       "      <td>2.226164e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Minneapolis, MN</th>\n",
       "      <th>Fargo, ND</th>\n",
       "      <td>1523.0</td>\n",
       "      <td>1500.0</td>\n",
       "      <td>158412.0</td>\n",
       "      <td>133938.0</td>\n",
       "      <td>674465.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>16056.0</td>\n",
       "      <td>94039.0</td>\n",
       "      <td>62247.0</td>\n",
       "      <td>971064.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1567.32</td>\n",
       "      <td>53.747707</td>\n",
       "      <td>30606912.0</td>\n",
       "      <td>573264.0</td>\n",
       "      <td>9463968.0</td>\n",
       "      <td>182160.0</td>\n",
       "      <td>1.998972e+10</td>\n",
       "      <td>1.200628e+09</td>\n",
       "      <td>40070880.0</td>\n",
       "      <td>2.119035e+10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>20 rows Ã— 27 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                  departures_scheduled  departures_performed  \\\n",
       "origin_city_name dest_city_name                                                \n",
       "Washington, DC   Boston, MA                     9562.0                9381.0   \n",
       "Boston, MA       Washington, DC                 8001.0                7851.0   \n",
       "Chicago, IL      Charlotte, NC                  4326.0                4295.0   \n",
       "                 Kansas City, MO                4448.0                4399.0   \n",
       "Boston, MA       Charlotte, NC                  3707.0                3644.0   \n",
       "Washington, DC   Charlotte, NC                  4781.0                4737.0   \n",
       "Philadelphia, PA Boston, MA                     4172.0                4112.0   \n",
       "                 Charlotte, NC                  3030.0                3007.0   \n",
       "Chicago, IL      Omaha, NE                      3354.0                3330.0   \n",
       "Minneapolis, MN  Boston, MA                     2104.0                2084.0   \n",
       "                 Charlotte, NC                  1990.0                1976.0   \n",
       "St. Louis, MO    Charlotte, NC                  1552.0                1551.0   \n",
       "Washington, DC   Providence, RI                 2669.0                2625.0   \n",
       "Kansas City, MO  Charlotte, NC                  1127.0                1118.0   \n",
       "Charlotte, NC    Kansas City, MO                1126.0                1117.0   \n",
       "Chicago, IL      Providence, RI                 1726.0                1712.0   \n",
       "Providence, RI   Charlotte, NC                  1156.0                1147.0   \n",
       "Kansas City, MO  Washington, DC                 1782.0                1762.0   \n",
       "Cincinnati, OH   Charlotte, NC                  1520.0                1535.0   \n",
       "Minneapolis, MN  Fargo, ND                      1523.0                1500.0   \n",
       "\n",
       "                                     seats  passengers     freight       mail  \\\n",
       "origin_city_name dest_city_name                                                 \n",
       "Washington, DC   Boston, MA       997662.0    820080.0     90915.0     5552.0   \n",
       "Boston, MA       Washington, DC   760634.0    606091.0     10988.0        0.0   \n",
       "Chicago, IL      Charlotte, NC    714994.0    565911.0    404897.0  1006427.0   \n",
       "                 Kansas City, MO  603984.0    469280.0    424427.0    21885.0   \n",
       "Boston, MA       Charlotte, NC    523852.0    452260.0    236986.0   263193.0   \n",
       "Washington, DC   Charlotte, NC    560545.0    446836.0    124182.0        0.0   \n",
       "Philadelphia, PA Boston, MA       485785.0    402995.0  12899101.0    57344.0   \n",
       "                 Charlotte, NC    505737.0    387611.0   5679236.0    21779.0   \n",
       "Chicago, IL      Omaha, NE        436860.0    349630.0    206831.0     6316.0   \n",
       "Minneapolis, MN  Boston, MA       369854.0    322704.0    657520.0   634830.0   \n",
       "                 Charlotte, NC    279746.0    237024.0     41289.0    51506.0   \n",
       "St. Louis, MO    Charlotte, NC    254661.0    204787.0     94975.0     3777.0   \n",
       "Washington, DC   Providence, RI   230554.0    183297.0     34760.0        0.0   \n",
       "Kansas City, MO  Charlotte, NC    194802.0    164848.0      7952.0      108.0   \n",
       "Charlotte, NC    Kansas City, MO  194614.0    164408.0     16560.0     8990.0   \n",
       "Chicago, IL      Providence, RI   191653.0    161171.0     54246.0        0.0   \n",
       "Providence, RI   Charlotte, NC    180899.0    152983.0     32258.0        0.0   \n",
       "Kansas City, MO  Washington, DC   179018.0    142758.0     27561.0        0.0   \n",
       "Cincinnati, OH   Charlotte, NC    172344.0    134865.0   1979169.0        0.0   \n",
       "Minneapolis, MN  Fargo, ND        158412.0    133938.0    674465.0        0.0   \n",
       "\n",
       "                                  distance  ramp_to_ramp  air_time  \\\n",
       "origin_city_name dest_city_name                                      \n",
       "Washington, DC   Boston, MA        40383.0      872579.0  604775.0   \n",
       "Boston, MA       Washington, DC    11172.0      805971.0  593794.0   \n",
       "Chicago, IL      Charlotte, NC     86405.0      486733.0  362122.0   \n",
       "                 Kansas City, MO   69379.0      388257.0  283555.0   \n",
       "Boston, MA       Charlotte, NC     36400.0      525280.0  414339.0   \n",
       "Washington, DC   Charlotte, NC     53733.0      428659.0  275720.0   \n",
       "Philadelphia, PA Boston, MA        31360.0      324316.0  211620.0   \n",
       "                 Charlotte, NC     48043.0      313725.0  222621.0   \n",
       "Chicago, IL      Omaha, NE         63859.0      299800.0  219667.0   \n",
       "Minneapolis, MN  Boston, MA        87672.0      343607.0  289750.0   \n",
       "                 Charlotte, NC     53940.0      289975.0  234362.0   \n",
       "St. Louis, MO    Charlotte, NC     44820.0      164967.0  126443.0   \n",
       "Washington, DC   Providence, RI    29803.0      221263.0  152736.0   \n",
       "Kansas City, MO  Charlotte, NC     24240.0      147067.0  116877.0   \n",
       "Charlotte, NC    Kansas City, MO   22624.0      160188.0  133734.0   \n",
       "Chicago, IL      Providence, RI    89784.0      226912.0  185781.0   \n",
       "Providence, RI   Charlotte, NC     31418.0      150960.0  123616.0   \n",
       "Kansas City, MO  Washington, DC    36781.0      249504.0  211487.0   \n",
       "Cincinnati, OH   Charlotte, NC     22770.0      141091.0   90947.0   \n",
       "Minneapolis, MN  Fargo, ND         16056.0       94039.0   62247.0   \n",
       "\n",
       "                                  origin_airport_id  ...  ramp_to_ramp_hours  \\\n",
       "origin_city_name dest_city_name                      ...                       \n",
       "Washington, DC   Boston, MA               1178640.0  ...            14542.99   \n",
       "Boston, MA       Washington, DC            300188.0  ...            13432.86   \n",
       "Chicago, IL      Charlotte, NC            1998910.0  ...             8112.23   \n",
       "                 Kansas City, MO          2372926.0  ...             6470.92   \n",
       "Boston, MA       Charlotte, NC             536050.0  ...             8754.67   \n",
       "Washington, DC   Charlotte, NC            1957498.0  ...             7144.36   \n",
       "Philadelphia, PA Boston, MA               1579200.0  ...             5405.22   \n",
       "                 Charlotte, NC            1508700.0  ...             5228.75   \n",
       "Chicago, IL      Omaha, NE                2110740.0  ...             4996.64   \n",
       "Minneapolis, MN  Boston, MA               1051986.0  ...             5726.79   \n",
       "                 Charlotte, NC             782246.0  ...             4832.94   \n",
       "St. Louis, MO    Charlotte, NC            1163462.0  ...             2749.47   \n",
       "Washington, DC   Providence, RI            952836.0  ...             3687.71   \n",
       "Kansas City, MO  Charlotte, NC             395940.0  ...             2451.13   \n",
       "Charlotte, NC    Kansas City, MO           309596.0  ...             2669.80   \n",
       "Chicago, IL      Providence, RI           1455640.0  ...             3781.83   \n",
       "Providence, RI   Charlotte, NC             658122.0  ...             2515.97   \n",
       "Kansas City, MO  Washington, DC            514722.0  ...             4158.40   \n",
       "Cincinnati, OH   Charlotte, NC             764948.0  ...             2351.52   \n",
       "Minneapolis, MN  Fargo, ND                 971064.0  ...             1567.32   \n",
       "\n",
       "                                  passenger_seats_ratio  origin_population  \\\n",
       "origin_city_name dest_city_name                                              \n",
       "Washington, DC   Boston, MA                   84.300655         66508497.0   \n",
       "Boston, MA       Washington, DC               22.604546         18219768.0   \n",
       "Chicago, IL      Charlotte, NC               110.409333        386430655.0   \n",
       "                 Kansas City, MO             142.274565        458386708.0   \n",
       "Boston, MA       Charlotte, NC                42.439610         32535300.0   \n",
       "Washington, DC   Charlotte, NC               124.236880        110847495.0   \n",
       "Philadelphia, PA Boston, MA                   78.463109        175532896.0   \n",
       "                 Charlotte, NC                72.937374        167696606.0   \n",
       "Chicago, IL      Omaha, NE                   126.992660        407750967.0   \n",
       "Minneapolis, MN  Boston, MA                   63.106161         33157488.0   \n",
       "                 Charlotte, NC                46.081060         24655568.0   \n",
       "St. Louis, MO    Charlotte, NC                60.328841         22353084.0   \n",
       "Washington, DC   Providence, RI               64.760728         55759649.0   \n",
       "Kansas City, MO  Charlotte, NC                25.155268         15278910.0   \n",
       "Charlotte, NC    Kansas City, MO              23.245230         25136160.0   \n",
       "Chicago, IL      Providence, RI               85.275196        282494134.0   \n",
       "Providence, RI   Charlotte, NC                37.684777          8719898.0   \n",
       "Kansas City, MO  Washington, DC               31.148088         19862583.0   \n",
       "Cincinnati, OH   Charlotte, NC                52.025190         21046884.0   \n",
       "Minneapolis, MN  Fargo, ND                    53.747707         30606912.0   \n",
       "\n",
       "                                  origin_density  dest_population  \\\n",
       "origin_city_name dest_city_name                                     \n",
       "Washington, DC   Boston, MA            1117314.0       64419894.0   \n",
       "Boston, MA       Washington, DC         391692.0       18810484.0   \n",
       "Chicago, IL      Charlotte, NC         1748845.0      130169400.0   \n",
       "                 Kansas City, MO       2074492.0       87599084.0   \n",
       "Boston, MA       Charlotte, NC          699450.0       44886000.0   \n",
       "Washington, DC   Charlotte, NC         1862190.0      148123800.0   \n",
       "Philadelphia, PA Boston, MA            1336496.0       72879072.0   \n",
       "                 Charlotte, NC         1276831.0       96056040.0   \n",
       "Chicago, IL      Omaha, NE             1845333.0       74228409.0   \n",
       "Minneapolis, MN  Boston, MA             621036.0       50755068.0   \n",
       "                 Charlotte, NC          461796.0       52067760.0   \n",
       "St. Louis, MO    Charlotte, NC          381264.0       70022160.0   \n",
       "Washington, DC   Providence, RI         936738.0       15733729.0   \n",
       "Kansas City, MO  Charlotte, NC           48450.0       26931600.0   \n",
       "Charlotte, NC    Kansas City, MO         79436.0       14260316.0   \n",
       "Chicago, IL      Providence, RI        1278466.0       20093678.0   \n",
       "Providence, RI   Charlotte, NC          477342.0       41295120.0   \n",
       "Kansas City, MO  Washington, DC          62985.0       26200317.0   \n",
       "Cincinnati, OH   Charlotte, NC          270368.0       61044960.0   \n",
       "Minneapolis, MN  Fargo, ND              573264.0        9463968.0   \n",
       "\n",
       "                                  dest_density    origin_gdp      dest_gdp  \\\n",
       "origin_city_name dest_city_name                                              \n",
       "Washington, DC   Boston, MA          1384911.0  5.237930e+10  4.564446e+10   \n",
       "Boston, MA       Washington, DC       316008.0  1.290954e+10  1.481435e+10   \n",
       "Chicago, IL      Charlotte, NC        411365.0  9.927456e+10  2.603834e+10   \n",
       "                 Kansas City, MO      277780.0  1.177602e+11  2.410060e+10   \n",
       "Boston, MA       Charlotte, NC        141850.0  2.305276e+10  8.978736e+09   \n",
       "Washington, DC   Charlotte, NC        468105.0  8.729883e+10  2.962983e+10   \n",
       "Philadelphia, PA Boston, MA          1566768.0  5.123149e+10  5.163817e+10   \n",
       "                 Charlotte, NC        303559.0  4.894437e+10  1.921450e+10   \n",
       "Chicago, IL      Omaha, NE            525249.0  1.047518e+11  1.024891e+10   \n",
       "Minneapolis, MN  Boston, MA          1091142.0  2.165553e+10  3.596230e+10   \n",
       "                 Charlotte, NC        164546.0  1.610283e+10  1.041533e+10   \n",
       "St. Louis, MO    Charlotte, NC        221286.0  1.522932e+10  1.400683e+10   \n",
       "Washington, DC   Providence, RI       861291.0  4.391396e+10  8.855975e+09   \n",
       "Kansas City, MO  Charlotte, NC         85110.0  4.203594e+09  5.387242e+09   \n",
       "Charlotte, NC    Kansas City, MO       45220.0  5.028092e+09  3.923354e+09   \n",
       "Chicago, IL      Providence, RI      1099962.0  7.257312e+10  1.131004e+10   \n",
       "Providence, RI   Charlotte, NC        130502.0  4.908131e+09  8.260438e+09   \n",
       "Kansas City, MO  Washington, DC       440154.0  5.464672e+09  2.063427e+10   \n",
       "Cincinnati, OH   Charlotte, NC        192916.0  1.005055e+10  1.221108e+10   \n",
       "Minneapolis, MN  Fargo, ND            182160.0  1.998972e+10  1.200628e+09   \n",
       "\n",
       "                                    total_pop       net_gdp  \n",
       "origin_city_name dest_city_name                              \n",
       "Washington, DC   Boston, MA       130928391.0  9.802375e+10  \n",
       "Boston, MA       Washington, DC    37030252.0  2.772389e+10  \n",
       "Chicago, IL      Charlotte, NC    516600055.0  1.253129e+11  \n",
       "                 Kansas City, MO  545985792.0  1.418608e+11  \n",
       "Boston, MA       Charlotte, NC     77421300.0  3.203149e+10  \n",
       "Washington, DC   Charlotte, NC    258971295.0  1.169287e+11  \n",
       "Philadelphia, PA Boston, MA       248411968.0  1.028697e+11  \n",
       "                 Charlotte, NC    263752646.0  6.815886e+10  \n",
       "Chicago, IL      Omaha, NE        481979376.0  1.150007e+11  \n",
       "Minneapolis, MN  Boston, MA        83912556.0  5.761783e+10  \n",
       "                 Charlotte, NC     76723328.0  2.651816e+10  \n",
       "St. Louis, MO    Charlotte, NC     92375244.0  2.923615e+10  \n",
       "Washington, DC   Providence, RI    71493378.0  5.276993e+10  \n",
       "Kansas City, MO  Charlotte, NC     42210510.0  9.590835e+09  \n",
       "Charlotte, NC    Kansas City, MO   39396476.0  8.951446e+09  \n",
       "Chicago, IL      Providence, RI   302587812.0  8.388316e+10  \n",
       "Providence, RI   Charlotte, NC     50015018.0  1.316857e+10  \n",
       "Kansas City, MO  Washington, DC    46062900.0  2.609894e+10  \n",
       "Cincinnati, OH   Charlotte, NC     82091844.0  2.226164e+10  \n",
       "Minneapolis, MN  Fargo, ND         40070880.0  2.119035e+10  \n",
       "\n",
       "[20 rows x 27 columns]"
      ]
     },
     "execution_count": 310,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged.where(passenger_flights['distance'] < 1000).groupby(by=[\"origin_city_name\", \"dest_city_name\"]).sum().sort_values(by=\"passengers\", ascending=False).head(20)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a14bf32",
   "metadata": {},
   "source": [
    "We can see that Washington DC and Boston has the most passengers carried within the 1000 mile threshold we were looking for. Many entries in the top 20 are round trip flights with the same two cities showing up twice. This could be a good starting ground when evaluating which routes would be the best to build as we could look. We can also see that there are cities with multiple entries which could indicate that these would be strong cities to start a network of trains to different cities creating a larger network of trains raidating from the hub city."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "02f6fd12",
   "metadata": {},
   "source": [
    "In conclusion, we have determined a list of cities that would be good candidates for investigating the potential of high speed rail between city pairs. We first imported all of our data from three different sources (csv, web scrapping, and API), created a pandas data frame to store the data, and then cleaned and simplified our data set to be merged and stored in an SQLite database. Finally we created a few graphs and tables to aid in our research of what city pairs would be candidates for rail investment. The use of the charts above could help in determining how much money should be set aside by an entity like the federal and state governments to be used for building passenger rail or by private corporations to show the potential profits that could be made by investing in high speed rail between some of the city pairs. There have been very little ethical implications with our data process. Two of our data sources (flights data and gdp data) came from open source governmental sources which were cleaned only enough so that our data was clear and concise. Our third source (Wikipedia) is also open source which means there is no ethical implications with using that data either."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
